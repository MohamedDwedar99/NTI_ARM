
Project_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b60  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002c90  08002c90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002c90  08002c90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c90  08002c90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c90  08002c90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002ca4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002ca4  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000282b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f4e  00000000  00000000  00022860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d8  00000000  00000000  000237b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00023c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000017b6  00000000  00000000  00024058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003522  00000000  00000000  0002580e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000567e  00000000  00000000  00028d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e3ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010ec  00000000  00000000  0002e400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002c78 	.word	0x08002c78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08002c78 	.word	0x08002c78

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__gesf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpsf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__lesf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpsf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpsf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d6:	d011      	beq.n	80009fc <__cmpsf2+0x40>
 80009d8:	b001      	add	sp, #4
 80009da:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009de:	bf18      	it	ne
 80009e0:	ea90 0f01 	teqne	r0, r1
 80009e4:	bf58      	it	pl
 80009e6:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ea:	bf88      	it	hi
 80009ec:	17c8      	asrhi	r0, r1, #31
 80009ee:	bf38      	it	cc
 80009f0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009f4:	bf18      	it	ne
 80009f6:	f040 0001 	orrne.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a00:	d102      	bne.n	8000a08 <__cmpsf2+0x4c>
 8000a02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a06:	d105      	bne.n	8000a14 <__cmpsf2+0x58>
 8000a08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a0c:	d1e4      	bne.n	80009d8 <__cmpsf2+0x1c>
 8000a0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a12:	d0e1      	beq.n	80009d8 <__cmpsf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cfrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4608      	mov	r0, r1
 8000a20:	4661      	mov	r1, ip
 8000a22:	e7ff      	b.n	8000a24 <__aeabi_cfcmpeq>

08000a24 <__aeabi_cfcmpeq>:
 8000a24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a26:	f7ff ffc9 	bl	80009bc <__cmpsf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a34 <__aeabi_fcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cfcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_fcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cfcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_fcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cfcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffd2 	bl	8000a1c <__aeabi_cfrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_fcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc8 	bl	8000a1c <__aeabi_cfrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_f2uiz>:
 8000a98:	0042      	lsls	r2, r0, #1
 8000a9a:	d20e      	bcs.n	8000aba <__aeabi_f2uiz+0x22>
 8000a9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000aa0:	d30b      	bcc.n	8000aba <__aeabi_f2uiz+0x22>
 8000aa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000aa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aaa:	d409      	bmi.n	8000ac0 <__aeabi_f2uiz+0x28>
 8000aac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	4770      	bx	lr
 8000ac0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ac4:	d101      	bne.n	8000aca <__aeabi_f2uiz+0x32>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	d102      	bne.n	8000ad0 <__aeabi_f2uiz+0x38>
 8000aca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <_delay_ms>:
#include "Common_Function.h"
void	_delay_ms(u32 ticks){
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	u32 i;
	for( i = 0; i < (ticks * 500) ; i++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	e003      	b.n	8000aee <_delay_ms+0x16>
	{
		asm("NOP");
 8000ae6:	bf00      	nop
	for( i = 0; i < (ticks * 500) ; i++)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000af4:	fb02 f303 	mul.w	r3, r2, r3
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d3f3      	bcc.n	8000ae6 <_delay_ms+0xe>
	}
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
	...

08000b0c <RCC_IntalizeHSI>:
#include	"RCC_interface.h"
#include	"RCC_private.h"
#include	"RCC_config.h"


void        RCC_IntalizeHSI(void){
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
			SET_BIT(RCC_CR,HSION); //Enable the HSI
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <RCC_IntalizeHSI+0x68>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <RCC_IntalizeHSI+0x68>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]
			while(!GET_BIT(RCC_CR,HSIRDY)); //wait for the HSI flag to be ready
 8000b1c:	bf00      	nop
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <RCC_IntalizeHSI+0x68>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f9      	beq.n	8000b1e <RCC_IntalizeHSI+0x12>
			SET_BIT(RCC_CR, HSIRDY); // clear the hsi ready flag
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <RCC_IntalizeHSI+0x68>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <RCC_IntalizeHSI+0x68>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6013      	str	r3, [r2, #0]
			if(PLL_clocksource== NO_PLL){
			CLR_BIT(RCC_CFGR, SW0); //choose the HSi as the system clock
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <RCC_IntalizeHSI+0x6c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <RCC_IntalizeHSI+0x6c>)
 8000b3c:	f023 0301 	bic.w	r3, r3, #1
 8000b40:	6013      	str	r3, [r2, #0]
			CLR_BIT(RCC_CFGR, SW1);//choose the HSi as the system clock
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <RCC_IntalizeHSI+0x6c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <RCC_IntalizeHSI+0x6c>)
 8000b48:	f023 0302 	bic.w	r3, r3, #2
 8000b4c:	6013      	str	r3, [r2, #0]
			while (GET_BIT(RCC_CFGR,SWS1)|| GET_BIT(RCC_CFGR,SWS0) !=0); // wait for the hsi to be choosen as the system clock
 8000b4e:	bf00      	nop
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <RCC_IntalizeHSI+0x6c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f9      	bne.n	8000b50 <RCC_IntalizeHSI+0x44>
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <RCC_IntalizeHSI+0x6c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f3      	bne.n	8000b50 <RCC_IntalizeHSI+0x44>
			}
	
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40021004 	.word	0x40021004

08000b7c <RCC_voidSysClkInt>:
				
}


void		RCC_voidSysClkInt(void)
{  
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	#if (RCC_SYS_CLK == Rcc_HSI)
		RCC_IntalizeHSI();
 8000b80:	f7ff ffc4 	bl	8000b0c <RCC_IntalizeHSI>
		RCC_intalizePLL();
	#else 
		// return error RCC_Sys_clk not spacified
	#endif

RCC_voidSetAHBprescaler();
 8000b84:	f000 f896 	bl	8000cb4 <RCC_voidSetAHBprescaler>
RCC_voidSetAPB1prescaler();
 8000b88:	f000 f8a4 	bl	8000cd4 <RCC_voidSetAPB1prescaler>
RCC_voidSetAPB2prescaler();
 8000b8c:	f000 f8b2 	bl	8000cf4 <RCC_voidSetAPB2prescaler>
RCC_voidSetADCprescaler();
 8000b90:	f000 f8c0 	bl	8000d14 <RCC_voidSetADCprescaler>

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <RCC_voidEnablePerClk>:



void		RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71bb      	strb	r3, [r7, #6]
	/*		Range Check							*/
	if(PerId < 32)
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	2b1f      	cmp	r3, #31
 8000bac:	d82a      	bhi.n	8000c04 <RCC_voidEnablePerClk+0x6c>
	{
		switch(BusId)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d01c      	beq.n	8000bee <RCC_voidEnablePerClk+0x56>
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	dc25      	bgt.n	8000c04 <RCC_voidEnablePerClk+0x6c>
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <RCC_voidEnablePerClk+0x2a>
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d00b      	beq.n	8000bd8 <RCC_voidEnablePerClk+0x40>
		}
		
	}
	else{	/*	Return Error "Out Of The Range"		*/	}
	
}
 8000bc0:	e020      	b.n	8000c04 <RCC_voidEnablePerClk+0x6c>
			case	RCC_AHB		:	SET_BIT(RCC_AHBENR,PerId) ;	break;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <RCC_voidEnablePerClk+0x78>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	79ba      	ldrb	r2, [r7, #6]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	fa01 f202 	lsl.w	r2, r1, r2
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <RCC_voidEnablePerClk+0x78>)
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e015      	b.n	8000c04 <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);	break;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <RCC_voidEnablePerClk+0x7c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	79ba      	ldrb	r2, [r7, #6]
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f202 	lsl.w	r2, r1, r2
 8000be4:	4611      	mov	r1, r2
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <RCC_voidEnablePerClk+0x7c>)
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	e00a      	b.n	8000c04 <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);	break;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <RCC_voidEnablePerClk+0x80>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	79ba      	ldrb	r2, [r7, #6]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <RCC_voidEnablePerClk+0x80>)
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	bf00      	nop
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021014 	.word	0x40021014
 8000c14:	4002101c 	.word	0x4002101c
 8000c18:	40021018 	.word	0x40021018

08000c1c <RCC_ADC_SETprescaler>:
	else{	/*	Return Error "Out Of The Range"		*/	}	
}



void 		RCC_ADC_SETprescaler(u8 prescaler){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	if (prescaler==divided2){
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10c      	bne.n	8000c46 <RCC_ADC_SETprescaler+0x2a>
		CLR_BIT(RCC_CFGR,14);
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c36:	6013      	str	r3, [r2, #0]
		CLR_BIT(RCC_CFGR,15);
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c42:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC_CFGR,15);
	}else{
		//#error"wrong prescaler config "
	}

}
 8000c44:	e02e      	b.n	8000ca4 <RCC_ADC_SETprescaler+0x88>
	}else if (prescaler==divided4){
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10c      	bne.n	8000c66 <RCC_ADC_SETprescaler+0x4a>
		SET_BIT(RCC_CFGR,14);
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c56:	6013      	str	r3, [r2, #0]
		CLR_BIT(RCC_CFGR,15);
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	e01e      	b.n	8000ca4 <RCC_ADC_SETprescaler+0x88>
	}else if (prescaler==divided6){
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d10c      	bne.n	8000c86 <RCC_ADC_SETprescaler+0x6a>
		CLR_BIT(RCC_CFGR,14);
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c76:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC_CFGR,15);
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	e00e      	b.n	8000ca4 <RCC_ADC_SETprescaler+0x88>
	}else if (prescaler==divided8){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d10b      	bne.n	8000ca4 <RCC_ADC_SETprescaler+0x88>
		SET_BIT(RCC_CFGR,14);
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC_CFGR,15);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <RCC_ADC_SETprescaler+0x94>)
 8000c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40021004 	.word	0x40021004

08000cb4 <RCC_voidSetAHBprescaler>:
void	RCC_voidSetAHBprescaler(void){
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
	switch(AHB_prescaler){
	case AHB_SysNotDiv:CLR_BIT(RCC_CFGR,7);	break;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <RCC_voidSetAHBprescaler+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <RCC_voidSetAHBprescaler+0x1c>)
 8000cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	bf00      	nop
			SET_BIT(RCC_CFGR,5);
			SET_BIT(RCC_CFGR,4);
		break;
	}

}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40021004 	.word	0x40021004

08000cd4 <RCC_voidSetAPB1prescaler>:
void	RCC_voidSetAPB1prescaler(void){
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	switch(APB1_prescaler){
	case APB1_HCLKNotDiv: CLR_BIT(RCC_CFGR,10); break;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <RCC_voidSetAPB1prescaler+0x1c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <RCC_voidSetAPB1prescaler+0x1c>)
 8000cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	bf00      	nop
					SET_BIT(RCC_CFGR,10);
					SET_BIT(RCC_CFGR,9);
					SET_BIT(RCC_CFGR,8);
					break;
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021004 	.word	0x40021004

08000cf4 <RCC_voidSetAPB2prescaler>:
void	RCC_voidSetAPB2prescaler(void){
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	switch(APB2_prescaler){
		case APB1_HCLKNotDiv: CLR_BIT(RCC_CFGR,13); break;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <RCC_voidSetAPB2prescaler+0x1c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <RCC_voidSetAPB2prescaler+0x1c>)
 8000cfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	bf00      	nop
						SET_BIT(RCC_CFGR,13);
						SET_BIT(RCC_CFGR,12);
						SET_BIT(RCC_CFGR,11);
						break;
		}
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021004 	.word	0x40021004

08000d14 <RCC_voidSetADCprescaler>:
void	RCC_voidSetADCprescaler(void){
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	switch(ADC_prescaler){

			case ADC_APB2clkdiv2:
							CLR_BIT(RCC_CFGR,15);
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <RCC_voidSetADCprescaler+0x28>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <RCC_voidSetADCprescaler+0x28>)
 8000d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d22:	6013      	str	r3, [r2, #0]
							CLR_BIT(RCC_CFGR,14);
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <RCC_voidSetADCprescaler+0x28>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <RCC_voidSetADCprescaler+0x28>)
 8000d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d2e:	6013      	str	r3, [r2, #0]
							break;
 8000d30:	bf00      	nop
			case ADC_APB2clkdiv8:
							SET_BIT(RCC_CFGR,15);
							SET_BIT(RCC_CFGR,14);
							break;
			}
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021004 	.word	0x40021004

08000d40 <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 port, u8 pin, u8 Direction)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	71bb      	strb	r3, [r7, #6]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	f200 80b3 	bhi.w	8000ec0 <DIO_voidSetPinDirection+0x180>
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	f200 80af 	bhi.w	8000ec0 <DIO_voidSetPinDirection+0x180>
	{
		if(pin<8)	/*		Low	(PIN0:PIN7) CRL	*/
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	2b07      	cmp	r3, #7
 8000d66:	d852      	bhi.n	8000e0e <DIO_voidSetPinDirection+0xce>
		{
			switch(port)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d037      	beq.n	8000dde <DIO_voidSetPinDirection+0x9e>
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	f300 80a6 	bgt.w	8000ec0 <DIO_voidSetPinDirection+0x180>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <DIO_voidSetPinDirection+0x3e>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d018      	beq.n	8000dae <DIO_voidSetPinDirection+0x6e>
				break;
			}

		}
	}else{/*	Return Error	*/}
}
 8000d7c:	e0a0      	b.n	8000ec0 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRL &= ~((0b1111)<<(pin * 4));
 8000d7e:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <DIO_voidSetPinDirection+0x18c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	79ba      	ldrb	r2, [r7, #6]
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	210f      	movs	r1, #15
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4a4e      	ldr	r2, [pc, #312]	; (8000ecc <DIO_voidSetPinDirection+0x18c>)
 8000d92:	400b      	ands	r3, r1
 8000d94:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |=  ((Direction)<<(pin * 4));
 8000d96:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <DIO_voidSetPinDirection+0x18c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	7979      	ldrb	r1, [r7, #5]
 8000d9c:	79ba      	ldrb	r2, [r7, #6]
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	4611      	mov	r1, r2
 8000da6:	4a49      	ldr	r2, [pc, #292]	; (8000ecc <DIO_voidSetPinDirection+0x18c>)
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6013      	str	r3, [r2, #0]
				break;
 8000dac:	e088      	b.n	8000ec0 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRL &= ~((0b1111)<<(pin * 4));
 8000dae:	4b48      	ldr	r3, [pc, #288]	; (8000ed0 <DIO_voidSetPinDirection+0x190>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	79ba      	ldrb	r2, [r7, #6]
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	210f      	movs	r1, #15
 8000db8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbc:	43d2      	mvns	r2, r2
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4a43      	ldr	r2, [pc, #268]	; (8000ed0 <DIO_voidSetPinDirection+0x190>)
 8000dc2:	400b      	ands	r3, r1
 8000dc4:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |=  ((Direction)<<(pin * 4));
 8000dc6:	4b42      	ldr	r3, [pc, #264]	; (8000ed0 <DIO_voidSetPinDirection+0x190>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	7979      	ldrb	r1, [r7, #5]
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <DIO_voidSetPinDirection+0x190>)
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	6013      	str	r3, [r2, #0]
				break;
 8000ddc:	e070      	b.n	8000ec0 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRL &= ~((0b1111)<<(pin * 4));
 8000dde:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <DIO_voidSetPinDirection+0x194>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	79ba      	ldrb	r2, [r7, #6]
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	210f      	movs	r1, #15
 8000de8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	4611      	mov	r1, r2
 8000df0:	4a38      	ldr	r2, [pc, #224]	; (8000ed4 <DIO_voidSetPinDirection+0x194>)
 8000df2:	400b      	ands	r3, r1
 8000df4:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |=  ((Direction)<<(pin * 4));
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <DIO_voidSetPinDirection+0x194>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	7979      	ldrb	r1, [r7, #5]
 8000dfc:	79ba      	ldrb	r2, [r7, #6]
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	fa01 f202 	lsl.w	r2, r1, r2
 8000e04:	4611      	mov	r1, r2
 8000e06:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <DIO_voidSetPinDirection+0x194>)
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6013      	str	r3, [r2, #0]
				break;
 8000e0c:	e058      	b.n	8000ec0 <DIO_voidSetPinDirection+0x180>
		}else if(pin<16)	/*		Low	(PIN8:PIN15) CRL	*/
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d854      	bhi.n	8000ebe <DIO_voidSetPinDirection+0x17e>
			pin -= 8;
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	3b08      	subs	r3, #8
 8000e18:	71bb      	strb	r3, [r7, #6]
			switch(port)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d036      	beq.n	8000e8e <DIO_voidSetPinDirection+0x14e>
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	dc4d      	bgt.n	8000ec0 <DIO_voidSetPinDirection+0x180>
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <DIO_voidSetPinDirection+0xee>
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d018      	beq.n	8000e5e <DIO_voidSetPinDirection+0x11e>
}
 8000e2c:	e048      	b.n	8000ec0 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRH &= ~((0b1111)<<(pin * 4));
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <DIO_voidSetPinDirection+0x198>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	79ba      	ldrb	r2, [r7, #6]
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	210f      	movs	r1, #15
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <DIO_voidSetPinDirection+0x198>)
 8000e42:	400b      	ands	r3, r1
 8000e44:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |=  ((Direction)<<(pin * 4));
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <DIO_voidSetPinDirection+0x198>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	7979      	ldrb	r1, [r7, #5]
 8000e4c:	79ba      	ldrb	r2, [r7, #6]
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <DIO_voidSetPinDirection+0x198>)
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6013      	str	r3, [r2, #0]
				break;
 8000e5c:	e030      	b.n	8000ec0 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRH &= ~((0b1111)<<(pin * 4));
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <DIO_voidSetPinDirection+0x19c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	79ba      	ldrb	r2, [r7, #6]
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	210f      	movs	r1, #15
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	43d2      	mvns	r2, r2
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <DIO_voidSetPinDirection+0x19c>)
 8000e72:	400b      	ands	r3, r1
 8000e74:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |=  ((Direction)<<(pin * 4));
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <DIO_voidSetPinDirection+0x19c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	7979      	ldrb	r1, [r7, #5]
 8000e7c:	79ba      	ldrb	r2, [r7, #6]
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	fa01 f202 	lsl.w	r2, r1, r2
 8000e84:	4611      	mov	r1, r2
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <DIO_voidSetPinDirection+0x19c>)
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6013      	str	r3, [r2, #0]
				break;
 8000e8c:	e018      	b.n	8000ec0 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRH &= ~((0b1111)<<(pin * 4));
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <DIO_voidSetPinDirection+0x1a0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	79ba      	ldrb	r2, [r7, #6]
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	210f      	movs	r1, #15
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <DIO_voidSetPinDirection+0x1a0>)
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |=  ((Direction)<<(pin * 4));
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <DIO_voidSetPinDirection+0x1a0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	7979      	ldrb	r1, [r7, #5]
 8000eac:	79ba      	ldrb	r2, [r7, #6]
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <DIO_voidSetPinDirection+0x1a0>)
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
				break;
 8000ebc:	e000      	b.n	8000ec0 <DIO_voidSetPinDirection+0x180>
		}
 8000ebe:	bf00      	nop
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40010800 	.word	0x40010800
 8000ed0:	40010c00 	.word	0x40010c00
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40010804 	.word	0x40010804
 8000edc:	40010c04 	.word	0x40010c04
 8000ee0:	40011004 	.word	0x40011004

08000ee4 <DIO_voidSetPinValue>:
	}

}*/

void	DIO_voidSetPinValue(u8 port, u8 pin, u8 Value)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d841      	bhi.n	8000f80 <DIO_voidSetPinValue+0x9c>
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	d83e      	bhi.n	8000f80 <DIO_voidSetPinValue+0x9c>
	{
		if(Value == GPIO_HIGH)
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d11b      	bne.n	8000f40 <DIO_voidSetPinValue+0x5c>
		{
			switch(port)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d012      	beq.n	8000f34 <DIO_voidSetPinValue+0x50>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	dc36      	bgt.n	8000f80 <DIO_voidSetPinValue+0x9c>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <DIO_voidSetPinValue+0x38>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d006      	beq.n	8000f28 <DIO_voidSetPinValue+0x44>
			}
		}

	}else{/*	Return Error	*/}

}
 8000f1a:	e031      	b.n	8000f80 <DIO_voidSetPinValue+0x9c>
				case	PORTA	:	GPIOA_BSRR=(1<<pin)    ;	break;
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	409a      	lsls	r2, r3
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <DIO_voidSetPinValue+0xa8>)
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e02b      	b.n	8000f80 <DIO_voidSetPinValue+0x9c>
				case	PORTB	:	GPIOB_BSRR=(1<<pin);	break;
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <DIO_voidSetPinValue+0xac>)
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e025      	b.n	8000f80 <DIO_voidSetPinValue+0x9c>
				case	PORTC	:	GPIOC_BSRR=(1<<pin);	break;
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	2201      	movs	r2, #1
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <DIO_voidSetPinValue+0xb0>)
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e01f      	b.n	8000f80 <DIO_voidSetPinValue+0x9c>
		else if(Value == GPIO_LOW)
 8000f40:	797b      	ldrb	r3, [r7, #5]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d11b      	bne.n	8000f7e <DIO_voidSetPinValue+0x9a>
			switch(port)
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d012      	beq.n	8000f72 <DIO_voidSetPinValue+0x8e>
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	dc17      	bgt.n	8000f80 <DIO_voidSetPinValue+0x9c>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <DIO_voidSetPinValue+0x76>
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d006      	beq.n	8000f66 <DIO_voidSetPinValue+0x82>
}
 8000f58:	e012      	b.n	8000f80 <DIO_voidSetPinValue+0x9c>
				case	PORTA	:	GPIOA_BRR=(1<<pin);	break;
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <DIO_voidSetPinValue+0xb4>)
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e00c      	b.n	8000f80 <DIO_voidSetPinValue+0x9c>
				case	PORTB	:	GPIOB_BRR=(1<<pin);	break;
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <DIO_voidSetPinValue+0xb8>)
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e006      	b.n	8000f80 <DIO_voidSetPinValue+0x9c>
				case	PORTC	:	GPIOC_BRR=(1<<pin);	break;
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	2201      	movs	r2, #1
 8000f76:	409a      	lsls	r2, r3
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <DIO_voidSetPinValue+0xbc>)
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e000      	b.n	8000f80 <DIO_voidSetPinValue+0x9c>
		}
 8000f7e:	bf00      	nop
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40010810 	.word	0x40010810
 8000f90:	40010c10 	.word	0x40010c10
 8000f94:	40011010 	.word	0x40011010
 8000f98:	40010814 	.word	0x40010814
 8000f9c:	40010c14 	.word	0x40010c14
 8000fa0:	40011014 	.word	0x40011014

08000fa4 <DIO_voidtogglepin>:


void	DIO_voidtogglepin (u8 port,u8 pin){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	if(port < 3 && pin < 16)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d82d      	bhi.n	8001016 <DIO_voidtogglepin+0x72>
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d82a      	bhi.n	8001016 <DIO_voidtogglepin+0x72>
	{
		
			switch(port)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d01c      	beq.n	8001000 <DIO_voidtogglepin+0x5c>
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	dc26      	bgt.n	8001018 <DIO_voidtogglepin+0x74>
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <DIO_voidtogglepin+0x30>
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d00b      	beq.n	8000fea <DIO_voidtogglepin+0x46>
			}
		}
		
	
	
}
 8000fd2:	e021      	b.n	8001018 <DIO_voidtogglepin+0x74>
				case	PORTA	:	GPIOA_ODR^=(1<<pin);	break;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <DIO_voidtogglepin+0x80>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	79ba      	ldrb	r2, [r7, #6]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <DIO_voidtogglepin+0x80>)
 8000fe4:	404b      	eors	r3, r1
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e016      	b.n	8001018 <DIO_voidtogglepin+0x74>
				case	PORTB	:	GPIOB_ODR^=(1<<pin);	break;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <DIO_voidtogglepin+0x84>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	79ba      	ldrb	r2, [r7, #6]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <DIO_voidtogglepin+0x84>)
 8000ffa:	404b      	eors	r3, r1
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e00b      	b.n	8001018 <DIO_voidtogglepin+0x74>
				case	PORTC	:	GPIOC_ODR^=(1<<pin);	break;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <DIO_voidtogglepin+0x88>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	79ba      	ldrb	r2, [r7, #6]
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	4611      	mov	r1, r2
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <DIO_voidtogglepin+0x88>)
 8001010:	404b      	eors	r3, r1
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e000      	b.n	8001018 <DIO_voidtogglepin+0x74>
		}
 8001016:	bf00      	nop
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	4001080c 	.word	0x4001080c
 8001028:	40010c0c 	.word	0x40010c0c
 800102c:	4001100c 	.word	0x4001100c

08001030 <DIO_u8GetPinValue>:
u8		DIO_u8GetPinValue(u8 port, u8 pin)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
	/*		Range Check 		*/
	u8	Local_u8Val = 0x99;
 8001040:	2399      	movs	r3, #153	; 0x99
 8001042:	73fb      	strb	r3, [r7, #15]
	if(port < 3 && pin < 16)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d82a      	bhi.n	80010a0 <DIO_u8GetPinValue+0x70>
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d827      	bhi.n	80010a0 <DIO_u8GetPinValue+0x70>
	{

			switch(port)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d01a      	beq.n	800108c <DIO_u8GetPinValue+0x5c>
 8001056:	2b02      	cmp	r3, #2
 8001058:	dc22      	bgt.n	80010a0 <DIO_u8GetPinValue+0x70>
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <DIO_u8GetPinValue+0x34>
 800105e:	2b01      	cmp	r3, #1
 8001060:	d00a      	beq.n	8001078 <DIO_u8GetPinValue+0x48>
 8001062:	e01d      	b.n	80010a0 <DIO_u8GetPinValue+0x70>
			{
				case	PORTA	:	Local_u8Val	=	GET_BIT(GPIOA_IDR,pin);	break;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <DIO_u8GetPinValue+0x7c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	fa22 f303 	lsr.w	r3, r2, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e013      	b.n	80010a0 <DIO_u8GetPinValue+0x70>
				case	PORTB	:	Local_u8Val	=	GET_BIT(GPIOB_IDR,pin);	break;
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <DIO_u8GetPinValue+0x80>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	fa22 f303 	lsr.w	r3, r2, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e009      	b.n	80010a0 <DIO_u8GetPinValue+0x70>
				case	PORTC	:	Local_u8Val	=	GET_BIT(GPIOC_IDR,pin);	break;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <DIO_u8GetPinValue+0x84>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	fa22 f303 	lsr.w	r3, r2, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	bf00      	nop
			}
	}else{/*	Return Error	*/}
	return Local_u8Val ;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	40010808 	.word	0x40010808
 80010b0:	40010c08 	.word	0x40010c08
 80010b4:	40011008 	.word	0x40011008

080010b8 <DIO_voidWriteValue>:

void DIO_voidWriteValue(u8 port,u8 startpin,u8 data)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	460b      	mov	r3, r1
 80010c4:	71bb      	strb	r3, [r7, #6]
 80010c6:	4613      	mov	r3, r2
 80010c8:	717b      	strb	r3, [r7, #5]
    switch(port)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <DIO_voidWriteValue+0x1e>
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d00b      	beq.n	80010ec <DIO_voidWriteValue+0x34>
    case PORTB:
        GPIOB_BRR = 0xff << startpin;
        GPIOB_BSRR = data << startpin;
        break;
    }
}
 80010d4:	e015      	b.n	8001102 <DIO_voidWriteValue+0x4a>
        GPIOA_BRR = 0xff << startpin;
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	409a      	lsls	r2, r3
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <DIO_voidWriteValue+0x54>)
 80010de:	601a      	str	r2, [r3, #0]
        GPIOA_BSRR = data << startpin;
 80010e0:	797a      	ldrb	r2, [r7, #5]
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	409a      	lsls	r2, r3
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <DIO_voidWriteValue+0x58>)
 80010e8:	601a      	str	r2, [r3, #0]
        break;
 80010ea:	e00a      	b.n	8001102 <DIO_voidWriteValue+0x4a>
        GPIOB_BRR = 0xff << startpin;
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	409a      	lsls	r2, r3
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <DIO_voidWriteValue+0x5c>)
 80010f4:	601a      	str	r2, [r3, #0]
        GPIOB_BSRR = data << startpin;
 80010f6:	797a      	ldrb	r2, [r7, #5]
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	409a      	lsls	r2, r3
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <DIO_voidWriteValue+0x60>)
 80010fe:	601a      	str	r2, [r3, #0]
        break;
 8001100:	bf00      	nop
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40010814 	.word	0x40010814
 8001110:	40010810 	.word	0x40010810
 8001114:	40010c14 	.word	0x40010c14
 8001118:	40010c10 	.word	0x40010c10

0800111c <NVIC_voidEnablePerInt>:
}



void		NVIC_voidEnablePerInt(u8 IntNum)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	/*		Range Check			*/
	if(IntNum<32)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b1f      	cmp	r3, #31
 800112a:	d805      	bhi.n	8001138 <NVIC_voidEnablePerInt+0x1c>
	{
		//SET_BIT(NVIC_ISER0,IntNum); Read Modify Write
		NVIC_ISER0 = (1 << IntNum) ; //write only
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2201      	movs	r2, #1
 8001130:	409a      	lsls	r2, r3
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <NVIC_voidEnablePerInt+0x3c>)
 8001134:	601a      	str	r2, [r3, #0]
	{
		IntNum -= 32;
		NVIC_ISER1 = (1 << IntNum) ; //write only
	}

}
 8001136:	e00a      	b.n	800114e <NVIC_voidEnablePerInt+0x32>
	}else if(IntNum<64)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b3f      	cmp	r3, #63	; 0x3f
 800113c:	d807      	bhi.n	800114e <NVIC_voidEnablePerInt+0x32>
		IntNum -= 32;
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	3b20      	subs	r3, #32
 8001142:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << IntNum) ; //write only
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2201      	movs	r2, #1
 8001148:	409a      	lsls	r2, r3
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <NVIC_voidEnablePerInt+0x40>)
 800114c:	601a      	str	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000e104 	.word	0xe000e104

08001160 <EXTI_voidInit>:

	EXTI_voidDisableInt(0);
	SET_BIT(EXTI->PR,0);
}

void		EXTI_voidInit(u8 EXTI_NUM,u8 Pin_number){ //configured till EXTI7
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
		#ifndef			AFIO_EXTICR
			#define		AFIO_EXTICR_ADD		(0x40010000)
			#define		AFIO_EXTICR2			*((u32 *)(AFIO_EXTICR_ADD+0x0C))
		#endif

	switch(EXTI_NUM){
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b07      	cmp	r3, #7
 8001174:	f200 83c1 	bhi.w	80018fa <EXTI_voidInit+0x79a>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <EXTI_voidInit+0x20>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	080011a1 	.word	0x080011a1
 8001184:	08001285 	.word	0x08001285
 8001188:	08001369 	.word	0x08001369
 800118c:	08001457 	.word	0x08001457
 8001190:	0800153b 	.word	0x0800153b
 8001194:	0800161f 	.word	0x0800161f
 8001198:	0800170f 	.word	0x0800170f
 800119c:	080017f3 	.word	0x080017f3
	case EXTI0 :
		switch(Pin_number){
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d04b      	beq.n	800123e <EXTI_voidInit+0xde>
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	f300 8394 	bgt.w	80018d4 <EXTI_voidInit+0x774>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <EXTI_voidInit+0x56>
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d022      	beq.n	80011fa <EXTI_voidInit+0x9a>
					CLR_BIT(AFIO_EXTICR1,2);
					CLR_BIT(AFIO_EXTICR1,3);

					EXTI_voidDisableInt(0);
					SET_BIT(EXTI->PR,0);  break;
		}break;
 80011b4:	e38e      	b.n	80018d4 <EXTI_voidInit+0x774>
		case PORTA:  CLR_BIT(AFIO_EXTICR1,0);
 80011b6:	4b94      	ldr	r3, [pc, #592]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a93      	ldr	r2, [pc, #588]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	6013      	str	r3, [r2, #0]
					 CLR_BIT(AFIO_EXTICR1,1);
 80011c2:	4b91      	ldr	r3, [pc, #580]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a90      	ldr	r2, [pc, #576]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011c8:	f023 0302 	bic.w	r3, r3, #2
 80011cc:	6013      	str	r3, [r2, #0]
					 CLR_BIT(AFIO_EXTICR1,2);
 80011ce:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a8d      	ldr	r2, [pc, #564]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	6013      	str	r3, [r2, #0]
					 CLR_BIT(AFIO_EXTICR1,3);
 80011da:	4b8b      	ldr	r3, [pc, #556]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a8a      	ldr	r2, [pc, #552]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011e0:	f023 0308 	bic.w	r3, r3, #8
 80011e4:	6013      	str	r3, [r2, #0]
					 EXTI_voidDisableInt(0);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 fba2 	bl	8001930 <EXTI_voidDisableInt>
					 SET_BIT(EXTI->PR,0);   break;
 80011ec:	4b87      	ldr	r3, [pc, #540]	; (800140c <EXTI_voidInit+0x2ac>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	4a86      	ldr	r2, [pc, #536]	; (800140c <EXTI_voidInit+0x2ac>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6153      	str	r3, [r2, #20]
 80011f8:	e043      	b.n	8001282 <EXTI_voidInit+0x122>
		case PORTB:	SET_BIT(AFIO_EXTICR1,0);
 80011fa:	4b83      	ldr	r3, [pc, #524]	; (8001408 <EXTI_voidInit+0x2a8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a82      	ldr	r2, [pc, #520]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6013      	str	r3, [r2, #0]
					CLR_BIT(AFIO_EXTICR1,1);
 8001206:	4b80      	ldr	r3, [pc, #512]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a7f      	ldr	r2, [pc, #508]	; (8001408 <EXTI_voidInit+0x2a8>)
 800120c:	f023 0302 	bic.w	r3, r3, #2
 8001210:	6013      	str	r3, [r2, #0]
					CLR_BIT(AFIO_EXTICR1,2);
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	6013      	str	r3, [r2, #0]
					CLR_BIT(AFIO_EXTICR1,3);
 800121e:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a79      	ldr	r2, [pc, #484]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001224:	f023 0308 	bic.w	r3, r3, #8
 8001228:	6013      	str	r3, [r2, #0]
					EXTI_voidDisableInt(0);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 fb80 	bl	8001930 <EXTI_voidDisableInt>
					SET_BIT(EXTI->PR,0); 	  break;
 8001230:	4b76      	ldr	r3, [pc, #472]	; (800140c <EXTI_voidInit+0x2ac>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	4a75      	ldr	r2, [pc, #468]	; (800140c <EXTI_voidInit+0x2ac>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6153      	str	r3, [r2, #20]
 800123c:	e021      	b.n	8001282 <EXTI_voidInit+0x122>
		case PORTC: CLR_BIT(AFIO_EXTICR1,0);
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a71      	ldr	r2, [pc, #452]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6013      	str	r3, [r2, #0]
					SET_BIT(AFIO_EXTICR1,1);
 800124a:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <EXTI_voidInit+0x2a8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6013      	str	r3, [r2, #0]
					CLR_BIT(AFIO_EXTICR1,2);
 8001256:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6b      	ldr	r2, [pc, #428]	; (8001408 <EXTI_voidInit+0x2a8>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6013      	str	r3, [r2, #0]
					CLR_BIT(AFIO_EXTICR1,3);
 8001262:	4b69      	ldr	r3, [pc, #420]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a68      	ldr	r2, [pc, #416]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001268:	f023 0308 	bic.w	r3, r3, #8
 800126c:	6013      	str	r3, [r2, #0]
					EXTI_voidDisableInt(0);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 fb5e 	bl	8001930 <EXTI_voidDisableInt>
					SET_BIT(EXTI->PR,0);  break;
 8001274:	4b65      	ldr	r3, [pc, #404]	; (800140c <EXTI_voidInit+0x2ac>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a64      	ldr	r2, [pc, #400]	; (800140c <EXTI_voidInit+0x2ac>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6153      	str	r3, [r2, #20]
 8001280:	bf00      	nop
		}break;
 8001282:	e327      	b.n	80018d4 <EXTI_voidInit+0x774>

	case EXTI1 :
		switch(Pin_number){
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d04b      	beq.n	8001322 <EXTI_voidInit+0x1c2>
 800128a:	2b02      	cmp	r3, #2
 800128c:	f300 8324 	bgt.w	80018d8 <EXTI_voidInit+0x778>
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <EXTI_voidInit+0x13a>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d022      	beq.n	80012de <EXTI_voidInit+0x17e>
											CLR_BIT(AFIO_EXTICR1,6);
											CLR_BIT(AFIO_EXTICR1,7);

											EXTI_voidDisableInt(1);
											SET_BIT(EXTI->PR,1);  break;
								}break;
 8001298:	e31e      	b.n	80018d8 <EXTI_voidInit+0x778>
								case PORTA:  CLR_BIT(AFIO_EXTICR1,4);
 800129a:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <EXTI_voidInit+0x2a8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a5a      	ldr	r2, [pc, #360]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012a0:	f023 0310 	bic.w	r3, r3, #16
 80012a4:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR1,5);
 80012a6:	4b58      	ldr	r3, [pc, #352]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a57      	ldr	r2, [pc, #348]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012ac:	f023 0320 	bic.w	r3, r3, #32
 80012b0:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR1,6);
 80012b2:	4b55      	ldr	r3, [pc, #340]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a54      	ldr	r2, [pc, #336]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012bc:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR1,7);
 80012be:	4b52      	ldr	r3, [pc, #328]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a51      	ldr	r2, [pc, #324]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012c8:	6013      	str	r3, [r2, #0]
											 EXTI_voidDisableInt(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 fb30 	bl	8001930 <EXTI_voidDisableInt>
											 SET_BIT(EXTI->PR,1);   break;
 80012d0:	4b4e      	ldr	r3, [pc, #312]	; (800140c <EXTI_voidInit+0x2ac>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	4a4d      	ldr	r2, [pc, #308]	; (800140c <EXTI_voidInit+0x2ac>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	6153      	str	r3, [r2, #20]
 80012dc:	e043      	b.n	8001366 <EXTI_voidInit+0x206>
								case PORTB:	SET_BIT(AFIO_EXTICR1,4);
 80012de:	4b4a      	ldr	r3, [pc, #296]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a49      	ldr	r2, [pc, #292]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,5);
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a46      	ldr	r2, [pc, #280]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012f0:	f023 0320 	bic.w	r3, r3, #32
 80012f4:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,6);
 80012f6:	4b44      	ldr	r3, [pc, #272]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a43      	ldr	r2, [pc, #268]	; (8001408 <EXTI_voidInit+0x2a8>)
 80012fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001300:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,7);
 8001302:	4b41      	ldr	r3, [pc, #260]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a40      	ldr	r2, [pc, #256]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800130c:	6013      	str	r3, [r2, #0]
											EXTI_voidDisableInt(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f000 fb0e 	bl	8001930 <EXTI_voidDisableInt>
										 SET_BIT(EXTI->PR,1);   break;
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <EXTI_voidInit+0x2ac>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4a3c      	ldr	r2, [pc, #240]	; (800140c <EXTI_voidInit+0x2ac>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	6153      	str	r3, [r2, #20]
 8001320:	e021      	b.n	8001366 <EXTI_voidInit+0x206>
								case PORTC: CLR_BIT(AFIO_EXTICR1,4);
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a38      	ldr	r2, [pc, #224]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001328:	f023 0310 	bic.w	r3, r3, #16
 800132c:	6013      	str	r3, [r2, #0]
											SET_BIT(AFIO_EXTICR1,5);
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a35      	ldr	r2, [pc, #212]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,6);
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <EXTI_voidInit+0x2a8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a32      	ldr	r2, [pc, #200]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001344:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,7);
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <EXTI_voidInit+0x2a8>)
 800134c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001350:	6013      	str	r3, [r2, #0]
											EXTI_voidDisableInt(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 faec 	bl	8001930 <EXTI_voidDisableInt>
											SET_BIT(EXTI->PR,1);  break;
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <EXTI_voidInit+0x2ac>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	4a2b      	ldr	r2, [pc, #172]	; (800140c <EXTI_voidInit+0x2ac>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	6153      	str	r3, [r2, #20]
 8001364:	bf00      	nop
								}break;
 8001366:	e2b7      	b.n	80018d8 <EXTI_voidInit+0x778>

		case EXTI2 :
				switch(Pin_number){
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d050      	beq.n	8001410 <EXTI_voidInit+0x2b0>
 800136e:	2b02      	cmp	r3, #2
 8001370:	f300 82b4 	bgt.w	80018dc <EXTI_voidInit+0x77c>
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <EXTI_voidInit+0x21e>
 8001378:	2b01      	cmp	r3, #1
 800137a:	d022      	beq.n	80013c2 <EXTI_voidInit+0x262>
											CLR_BIT(AFIO_EXTICR1,10);
											CLR_BIT(AFIO_EXTICR1,11);

											EXTI_voidDisableInt(2);
											SET_BIT(EXTI->PR,0);  break;
								}break;
 800137c:	e2ae      	b.n	80018dc <EXTI_voidInit+0x77c>
								case PORTA:  CLR_BIT(AFIO_EXTICR1,8);
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a21      	ldr	r2, [pc, #132]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001388:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR1,9);
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <EXTI_voidInit+0x2a8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001394:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR1,10);
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <EXTI_voidInit+0x2a8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <EXTI_voidInit+0x2a8>)
 800139c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013a0:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR1,11);
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a18      	ldr	r2, [pc, #96]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013ac:	6013      	str	r3, [r2, #0]
											 EXTI_voidDisableInt(2);
 80013ae:	2002      	movs	r0, #2
 80013b0:	f000 fabe 	bl	8001930 <EXTI_voidDisableInt>
											 SET_BIT(EXTI->PR,2);   break;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <EXTI_voidInit+0x2ac>)
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <EXTI_voidInit+0x2ac>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6153      	str	r3, [r2, #20]
 80013c0:	e048      	b.n	8001454 <EXTI_voidInit+0x2f4>
								case PORTB:	SET_BIT(AFIO_EXTICR1,8);
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,9);
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013d8:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,10);
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013e4:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,11);
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <EXTI_voidInit+0x2a8>)
 80013ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013f0:	6013      	str	r3, [r2, #0]
											EXTI_voidDisableInt(2);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f000 fa9c 	bl	8001930 <EXTI_voidDisableInt>
											SET_BIT(EXTI->PR,2); 	  break;
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <EXTI_voidInit+0x2ac>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <EXTI_voidInit+0x2ac>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6153      	str	r3, [r2, #20]
 8001404:	e026      	b.n	8001454 <EXTI_voidInit+0x2f4>
 8001406:	bf00      	nop
 8001408:	40010008 	.word	0x40010008
 800140c:	40010400 	.word	0x40010400
								case PORTC: CLR_BIT(AFIO_EXTICR1,8);
 8001410:	4b99      	ldr	r3, [pc, #612]	; (8001678 <EXTI_voidInit+0x518>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a98      	ldr	r2, [pc, #608]	; (8001678 <EXTI_voidInit+0x518>)
 8001416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]
											SET_BIT(AFIO_EXTICR1,9);
 800141c:	4b96      	ldr	r3, [pc, #600]	; (8001678 <EXTI_voidInit+0x518>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a95      	ldr	r2, [pc, #596]	; (8001678 <EXTI_voidInit+0x518>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,10);
 8001428:	4b93      	ldr	r3, [pc, #588]	; (8001678 <EXTI_voidInit+0x518>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a92      	ldr	r2, [pc, #584]	; (8001678 <EXTI_voidInit+0x518>)
 800142e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001432:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR1,11);
 8001434:	4b90      	ldr	r3, [pc, #576]	; (8001678 <EXTI_voidInit+0x518>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a8f      	ldr	r2, [pc, #572]	; (8001678 <EXTI_voidInit+0x518>)
 800143a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800143e:	6013      	str	r3, [r2, #0]
											EXTI_voidDisableInt(2);
 8001440:	2002      	movs	r0, #2
 8001442:	f000 fa75 	bl	8001930 <EXTI_voidDisableInt>
											SET_BIT(EXTI->PR,0);  break;
 8001446:	4b8d      	ldr	r3, [pc, #564]	; (800167c <EXTI_voidInit+0x51c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a8c      	ldr	r2, [pc, #560]	; (800167c <EXTI_voidInit+0x51c>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6153      	str	r3, [r2, #20]
 8001452:	bf00      	nop
								}break;
 8001454:	e242      	b.n	80018dc <EXTI_voidInit+0x77c>
				case EXTI3 :
						switch(Pin_number){
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d04b      	beq.n	80014f4 <EXTI_voidInit+0x394>
 800145c:	2b02      	cmp	r3, #2
 800145e:	f300 823f 	bgt.w	80018e0 <EXTI_voidInit+0x780>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <EXTI_voidInit+0x30c>
 8001466:	2b01      	cmp	r3, #1
 8001468:	d022      	beq.n	80014b0 <EXTI_voidInit+0x350>
									CLR_BIT(AFIO_EXTICR1,14);
									CLR_BIT(AFIO_EXTICR1,15);

									EXTI_voidDisableInt(3);
									SET_BIT(EXTI->PR,3);  break;
						}break;
 800146a:	e239      	b.n	80018e0 <EXTI_voidInit+0x780>
						case PORTA:  CLR_BIT(AFIO_EXTICR1,12);
 800146c:	4b82      	ldr	r3, [pc, #520]	; (8001678 <EXTI_voidInit+0x518>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a81      	ldr	r2, [pc, #516]	; (8001678 <EXTI_voidInit+0x518>)
 8001472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001476:	6013      	str	r3, [r2, #0]
									 CLR_BIT(AFIO_EXTICR1,13);
 8001478:	4b7f      	ldr	r3, [pc, #508]	; (8001678 <EXTI_voidInit+0x518>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a7e      	ldr	r2, [pc, #504]	; (8001678 <EXTI_voidInit+0x518>)
 800147e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001482:	6013      	str	r3, [r2, #0]
									 CLR_BIT(AFIO_EXTICR1,14);
 8001484:	4b7c      	ldr	r3, [pc, #496]	; (8001678 <EXTI_voidInit+0x518>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a7b      	ldr	r2, [pc, #492]	; (8001678 <EXTI_voidInit+0x518>)
 800148a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800148e:	6013      	str	r3, [r2, #0]
									 CLR_BIT(AFIO_EXTICR1,15);
 8001490:	4b79      	ldr	r3, [pc, #484]	; (8001678 <EXTI_voidInit+0x518>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a78      	ldr	r2, [pc, #480]	; (8001678 <EXTI_voidInit+0x518>)
 8001496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800149a:	6013      	str	r3, [r2, #0]
									 EXTI_voidDisableInt(3);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 fa47 	bl	8001930 <EXTI_voidDisableInt>
									 SET_BIT(EXTI->PR,3);   break;
 80014a2:	4b76      	ldr	r3, [pc, #472]	; (800167c <EXTI_voidInit+0x51c>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4a75      	ldr	r2, [pc, #468]	; (800167c <EXTI_voidInit+0x51c>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6153      	str	r3, [r2, #20]
 80014ae:	e043      	b.n	8001538 <EXTI_voidInit+0x3d8>
						case PORTB:	SET_BIT(AFIO_EXTICR1,12);
 80014b0:	4b71      	ldr	r3, [pc, #452]	; (8001678 <EXTI_voidInit+0x518>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a70      	ldr	r2, [pc, #448]	; (8001678 <EXTI_voidInit+0x518>)
 80014b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ba:	6013      	str	r3, [r2, #0]
									CLR_BIT(AFIO_EXTICR1,13);
 80014bc:	4b6e      	ldr	r3, [pc, #440]	; (8001678 <EXTI_voidInit+0x518>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a6d      	ldr	r2, [pc, #436]	; (8001678 <EXTI_voidInit+0x518>)
 80014c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014c6:	6013      	str	r3, [r2, #0]
									CLR_BIT(AFIO_EXTICR1,14);
 80014c8:	4b6b      	ldr	r3, [pc, #428]	; (8001678 <EXTI_voidInit+0x518>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a6a      	ldr	r2, [pc, #424]	; (8001678 <EXTI_voidInit+0x518>)
 80014ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014d2:	6013      	str	r3, [r2, #0]
									CLR_BIT(AFIO_EXTICR1,15);
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <EXTI_voidInit+0x518>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a67      	ldr	r2, [pc, #412]	; (8001678 <EXTI_voidInit+0x518>)
 80014da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014de:	6013      	str	r3, [r2, #0]
									EXTI_voidDisableInt(3);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 fa25 	bl	8001930 <EXTI_voidDisableInt>
									SET_BIT(EXTI->PR,3); 	  break;
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <EXTI_voidInit+0x51c>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a64      	ldr	r2, [pc, #400]	; (800167c <EXTI_voidInit+0x51c>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	e021      	b.n	8001538 <EXTI_voidInit+0x3d8>
						case PORTC: CLR_BIT(AFIO_EXTICR1,12);
 80014f4:	4b60      	ldr	r3, [pc, #384]	; (8001678 <EXTI_voidInit+0x518>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5f      	ldr	r2, [pc, #380]	; (8001678 <EXTI_voidInit+0x518>)
 80014fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014fe:	6013      	str	r3, [r2, #0]
									SET_BIT(AFIO_EXTICR1,13);
 8001500:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <EXTI_voidInit+0x518>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a5c      	ldr	r2, [pc, #368]	; (8001678 <EXTI_voidInit+0x518>)
 8001506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800150a:	6013      	str	r3, [r2, #0]
									CLR_BIT(AFIO_EXTICR1,14);
 800150c:	4b5a      	ldr	r3, [pc, #360]	; (8001678 <EXTI_voidInit+0x518>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a59      	ldr	r2, [pc, #356]	; (8001678 <EXTI_voidInit+0x518>)
 8001512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001516:	6013      	str	r3, [r2, #0]
									CLR_BIT(AFIO_EXTICR1,15);
 8001518:	4b57      	ldr	r3, [pc, #348]	; (8001678 <EXTI_voidInit+0x518>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a56      	ldr	r2, [pc, #344]	; (8001678 <EXTI_voidInit+0x518>)
 800151e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001522:	6013      	str	r3, [r2, #0]
									EXTI_voidDisableInt(3);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 fa03 	bl	8001930 <EXTI_voidDisableInt>
									SET_BIT(EXTI->PR,3);  break;
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <EXTI_voidInit+0x51c>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a53      	ldr	r2, [pc, #332]	; (800167c <EXTI_voidInit+0x51c>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	bf00      	nop
						}break;
 8001538:	e1d2      	b.n	80018e0 <EXTI_voidInit+0x780>
			case EXTI4 :
							switch(Pin_number){
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d04b      	beq.n	80015d8 <EXTI_voidInit+0x478>
 8001540:	2b02      	cmp	r3, #2
 8001542:	f300 81cf 	bgt.w	80018e4 <EXTI_voidInit+0x784>
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <EXTI_voidInit+0x3f0>
 800154a:	2b01      	cmp	r3, #1
 800154c:	d022      	beq.n	8001594 <EXTI_voidInit+0x434>
										CLR_BIT(AFIO_EXTICR2,2);
										CLR_BIT(AFIO_EXTICR2,3);

										EXTI_voidDisableInt(4);
										SET_BIT(EXTI->PR,4);  break;
							}break;
 800154e:	e1c9      	b.n	80018e4 <EXTI_voidInit+0x784>
							case PORTA:  CLR_BIT(AFIO_EXTICR2,0);
 8001550:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <EXTI_voidInit+0x520>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a4a      	ldr	r2, [pc, #296]	; (8001680 <EXTI_voidInit+0x520>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]
										 CLR_BIT(AFIO_EXTICR2,1);
 800155c:	4b48      	ldr	r3, [pc, #288]	; (8001680 <EXTI_voidInit+0x520>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a47      	ldr	r2, [pc, #284]	; (8001680 <EXTI_voidInit+0x520>)
 8001562:	f023 0302 	bic.w	r3, r3, #2
 8001566:	6013      	str	r3, [r2, #0]
										 CLR_BIT(AFIO_EXTICR2,2);
 8001568:	4b45      	ldr	r3, [pc, #276]	; (8001680 <EXTI_voidInit+0x520>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a44      	ldr	r2, [pc, #272]	; (8001680 <EXTI_voidInit+0x520>)
 800156e:	f023 0304 	bic.w	r3, r3, #4
 8001572:	6013      	str	r3, [r2, #0]
										 CLR_BIT(AFIO_EXTICR2,3);
 8001574:	4b42      	ldr	r3, [pc, #264]	; (8001680 <EXTI_voidInit+0x520>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a41      	ldr	r2, [pc, #260]	; (8001680 <EXTI_voidInit+0x520>)
 800157a:	f023 0308 	bic.w	r3, r3, #8
 800157e:	6013      	str	r3, [r2, #0]
										 EXTI_voidDisableInt(4);
 8001580:	2004      	movs	r0, #4
 8001582:	f000 f9d5 	bl	8001930 <EXTI_voidDisableInt>
										 SET_BIT(EXTI->PR,4);   break;
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <EXTI_voidInit+0x51c>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a3c      	ldr	r2, [pc, #240]	; (800167c <EXTI_voidInit+0x51c>)
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	6153      	str	r3, [r2, #20]
 8001592:	e043      	b.n	800161c <EXTI_voidInit+0x4bc>
							case PORTB:	SET_BIT(AFIO_EXTICR2,0);
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <EXTI_voidInit+0x520>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a39      	ldr	r2, [pc, #228]	; (8001680 <EXTI_voidInit+0x520>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]
										CLR_BIT(AFIO_EXTICR2,1);
 80015a0:	4b37      	ldr	r3, [pc, #220]	; (8001680 <EXTI_voidInit+0x520>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a36      	ldr	r2, [pc, #216]	; (8001680 <EXTI_voidInit+0x520>)
 80015a6:	f023 0302 	bic.w	r3, r3, #2
 80015aa:	6013      	str	r3, [r2, #0]
										CLR_BIT(AFIO_EXTICR2,2);
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <EXTI_voidInit+0x520>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a33      	ldr	r2, [pc, #204]	; (8001680 <EXTI_voidInit+0x520>)
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	6013      	str	r3, [r2, #0]
										CLR_BIT(AFIO_EXTICR2,3);
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <EXTI_voidInit+0x520>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a30      	ldr	r2, [pc, #192]	; (8001680 <EXTI_voidInit+0x520>)
 80015be:	f023 0308 	bic.w	r3, r3, #8
 80015c2:	6013      	str	r3, [r2, #0]
										EXTI_voidDisableInt(4);
 80015c4:	2004      	movs	r0, #4
 80015c6:	f000 f9b3 	bl	8001930 <EXTI_voidDisableInt>
										SET_BIT(EXTI->PR,4); 	  break;
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <EXTI_voidInit+0x51c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a2b      	ldr	r2, [pc, #172]	; (800167c <EXTI_voidInit+0x51c>)
 80015d0:	f043 0310 	orr.w	r3, r3, #16
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	e021      	b.n	800161c <EXTI_voidInit+0x4bc>
							case PORTC: CLR_BIT(AFIO_EXTICR2,0);
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <EXTI_voidInit+0x520>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <EXTI_voidInit+0x520>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	6013      	str	r3, [r2, #0]
										SET_BIT(AFIO_EXTICR2,1);
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <EXTI_voidInit+0x520>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a25      	ldr	r2, [pc, #148]	; (8001680 <EXTI_voidInit+0x520>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	6013      	str	r3, [r2, #0]
										CLR_BIT(AFIO_EXTICR2,2);
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <EXTI_voidInit+0x520>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a22      	ldr	r2, [pc, #136]	; (8001680 <EXTI_voidInit+0x520>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6013      	str	r3, [r2, #0]
										CLR_BIT(AFIO_EXTICR2,3);
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <EXTI_voidInit+0x520>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <EXTI_voidInit+0x520>)
 8001602:	f023 0308 	bic.w	r3, r3, #8
 8001606:	6013      	str	r3, [r2, #0]
										EXTI_voidDisableInt(4);
 8001608:	2004      	movs	r0, #4
 800160a:	f000 f991 	bl	8001930 <EXTI_voidDisableInt>
										SET_BIT(EXTI->PR,4);  break;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <EXTI_voidInit+0x51c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a1a      	ldr	r2, [pc, #104]	; (800167c <EXTI_voidInit+0x51c>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	6153      	str	r3, [r2, #20]
 800161a:	bf00      	nop
							}break;
 800161c:	e162      	b.n	80018e4 <EXTI_voidInit+0x784>
							case EXTI5 :
								switch(Pin_number){
 800161e:	79bb      	ldrb	r3, [r7, #6]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d051      	beq.n	80016c8 <EXTI_voidInit+0x568>
 8001624:	2b02      	cmp	r3, #2
 8001626:	f300 815f 	bgt.w	80018e8 <EXTI_voidInit+0x788>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <EXTI_voidInit+0x4d4>
 800162e:	2b01      	cmp	r3, #1
 8001630:	d028      	beq.n	8001684 <EXTI_voidInit+0x524>
												SET_BIT(AFIO_EXTICR2,5);
												CLR_BIT(AFIO_EXTICR2,6);
												CLR_BIT(AFIO_EXTICR2,7);
												EXTI_voidDisableInt(5);
												SET_BIT(EXTI->PR,5);  break;
												}break;
 8001632:	e159      	b.n	80018e8 <EXTI_voidInit+0x788>
									case PORTA:  CLR_BIT(AFIO_EXTICR2,4);
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <EXTI_voidInit+0x520>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a11      	ldr	r2, [pc, #68]	; (8001680 <EXTI_voidInit+0x520>)
 800163a:	f023 0310 	bic.w	r3, r3, #16
 800163e:	6013      	str	r3, [r2, #0]
												 CLR_BIT(AFIO_EXTICR2,5);
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <EXTI_voidInit+0x520>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <EXTI_voidInit+0x520>)
 8001646:	f023 0320 	bic.w	r3, r3, #32
 800164a:	6013      	str	r3, [r2, #0]
												 CLR_BIT(AFIO_EXTICR2,6);
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <EXTI_voidInit+0x520>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <EXTI_voidInit+0x520>)
 8001652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001656:	6013      	str	r3, [r2, #0]
												 CLR_BIT(AFIO_EXTICR2,7);
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <EXTI_voidInit+0x520>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a08      	ldr	r2, [pc, #32]	; (8001680 <EXTI_voidInit+0x520>)
 800165e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001662:	6013      	str	r3, [r2, #0]
												 EXTI_voidDisableInt(5);
 8001664:	2005      	movs	r0, #5
 8001666:	f000 f963 	bl	8001930 <EXTI_voidDisableInt>
												 SET_BIT(EXTI->PR,5);   break;
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <EXTI_voidInit+0x51c>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a03      	ldr	r2, [pc, #12]	; (800167c <EXTI_voidInit+0x51c>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	e049      	b.n	800170c <EXTI_voidInit+0x5ac>
 8001678:	40010008 	.word	0x40010008
 800167c:	40010400 	.word	0x40010400
 8001680:	4001000c 	.word	0x4001000c
									case PORTB:	SET_BIT(AFIO_EXTICR2,4);
 8001684:	4b9a      	ldr	r3, [pc, #616]	; (80018f0 <EXTI_voidInit+0x790>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a99      	ldr	r2, [pc, #612]	; (80018f0 <EXTI_voidInit+0x790>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6013      	str	r3, [r2, #0]
												CLR_BIT(AFIO_EXTICR2,5);
 8001690:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <EXTI_voidInit+0x790>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a96      	ldr	r2, [pc, #600]	; (80018f0 <EXTI_voidInit+0x790>)
 8001696:	f023 0320 	bic.w	r3, r3, #32
 800169a:	6013      	str	r3, [r2, #0]
												CLR_BIT(AFIO_EXTICR2,6);
 800169c:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <EXTI_voidInit+0x790>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a93      	ldr	r2, [pc, #588]	; (80018f0 <EXTI_voidInit+0x790>)
 80016a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016a6:	6013      	str	r3, [r2, #0]
												CLR_BIT(AFIO_EXTICR2,7);
 80016a8:	4b91      	ldr	r3, [pc, #580]	; (80018f0 <EXTI_voidInit+0x790>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a90      	ldr	r2, [pc, #576]	; (80018f0 <EXTI_voidInit+0x790>)
 80016ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016b2:	6013      	str	r3, [r2, #0]
												EXTI_voidDisableInt(5);
 80016b4:	2005      	movs	r0, #5
 80016b6:	f000 f93b 	bl	8001930 <EXTI_voidDisableInt>
												SET_BIT(EXTI->PR,5); 	  break;
 80016ba:	4b8e      	ldr	r3, [pc, #568]	; (80018f4 <EXTI_voidInit+0x794>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a8d      	ldr	r2, [pc, #564]	; (80018f4 <EXTI_voidInit+0x794>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	e021      	b.n	800170c <EXTI_voidInit+0x5ac>
									case PORTC: CLR_BIT(AFIO_EXTICR2,4);
 80016c8:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <EXTI_voidInit+0x790>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a88      	ldr	r2, [pc, #544]	; (80018f0 <EXTI_voidInit+0x790>)
 80016ce:	f023 0310 	bic.w	r3, r3, #16
 80016d2:	6013      	str	r3, [r2, #0]
												SET_BIT(AFIO_EXTICR2,5);
 80016d4:	4b86      	ldr	r3, [pc, #536]	; (80018f0 <EXTI_voidInit+0x790>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a85      	ldr	r2, [pc, #532]	; (80018f0 <EXTI_voidInit+0x790>)
 80016da:	f043 0320 	orr.w	r3, r3, #32
 80016de:	6013      	str	r3, [r2, #0]
												CLR_BIT(AFIO_EXTICR2,6);
 80016e0:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <EXTI_voidInit+0x790>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a82      	ldr	r2, [pc, #520]	; (80018f0 <EXTI_voidInit+0x790>)
 80016e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016ea:	6013      	str	r3, [r2, #0]
												CLR_BIT(AFIO_EXTICR2,7);
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <EXTI_voidInit+0x790>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <EXTI_voidInit+0x790>)
 80016f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016f6:	6013      	str	r3, [r2, #0]
												EXTI_voidDisableInt(5);
 80016f8:	2005      	movs	r0, #5
 80016fa:	f000 f919 	bl	8001930 <EXTI_voidDisableInt>
												SET_BIT(EXTI->PR,5);  break;
 80016fe:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <EXTI_voidInit+0x794>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	4a7c      	ldr	r2, [pc, #496]	; (80018f4 <EXTI_voidInit+0x794>)
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	6153      	str	r3, [r2, #20]
 800170a:	bf00      	nop
												}break;
 800170c:	e0ec      	b.n	80018e8 <EXTI_voidInit+0x788>
						case EXTI6 :
							switch(Pin_number){
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d04b      	beq.n	80017ac <EXTI_voidInit+0x64c>
 8001714:	2b02      	cmp	r3, #2
 8001716:	f300 80e9 	bgt.w	80018ec <EXTI_voidInit+0x78c>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <EXTI_voidInit+0x5c4>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d022      	beq.n	8001768 <EXTI_voidInit+0x608>
											SET_BIT(AFIO_EXTICR2,9);
											CLR_BIT(AFIO_EXTICR2,10);
											CLR_BIT(AFIO_EXTICR2,11);
											EXTI_voidDisableInt(6);
											SET_BIT(EXTI->PR,6);  break;
											}break;
 8001722:	e0e3      	b.n	80018ec <EXTI_voidInit+0x78c>
								case PORTA:  CLR_BIT(AFIO_EXTICR2,8);
 8001724:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <EXTI_voidInit+0x790>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <EXTI_voidInit+0x790>)
 800172a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172e:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR2,9);
 8001730:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <EXTI_voidInit+0x790>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <EXTI_voidInit+0x790>)
 8001736:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR2,10);
 800173c:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <EXTI_voidInit+0x790>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6b      	ldr	r2, [pc, #428]	; (80018f0 <EXTI_voidInit+0x790>)
 8001742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR2,11);
 8001748:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <EXTI_voidInit+0x790>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a68      	ldr	r2, [pc, #416]	; (80018f0 <EXTI_voidInit+0x790>)
 800174e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001752:	6013      	str	r3, [r2, #0]
											 EXTI_voidDisableInt(6);
 8001754:	2006      	movs	r0, #6
 8001756:	f000 f8eb 	bl	8001930 <EXTI_voidDisableInt>
											 SET_BIT(EXTI->PR,6);   break;
 800175a:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <EXTI_voidInit+0x794>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a65      	ldr	r2, [pc, #404]	; (80018f4 <EXTI_voidInit+0x794>)
 8001760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	e043      	b.n	80017f0 <EXTI_voidInit+0x690>
								case PORTB:	SET_BIT(AFIO_EXTICR2,8);
 8001768:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <EXTI_voidInit+0x790>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a60      	ldr	r2, [pc, #384]	; (80018f0 <EXTI_voidInit+0x790>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,9);
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <EXTI_voidInit+0x790>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a5d      	ldr	r2, [pc, #372]	; (80018f0 <EXTI_voidInit+0x790>)
 800177a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,10);
 8001780:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <EXTI_voidInit+0x790>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5a      	ldr	r2, [pc, #360]	; (80018f0 <EXTI_voidInit+0x790>)
 8001786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,11);
 800178c:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <EXTI_voidInit+0x790>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a57      	ldr	r2, [pc, #348]	; (80018f0 <EXTI_voidInit+0x790>)
 8001792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001796:	6013      	str	r3, [r2, #0]
											EXTI_voidDisableInt(6);
 8001798:	2006      	movs	r0, #6
 800179a:	f000 f8c9 	bl	8001930 <EXTI_voidDisableInt>
											SET_BIT(EXTI->PR,6); 	  break;
 800179e:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <EXTI_voidInit+0x794>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	4a54      	ldr	r2, [pc, #336]	; (80018f4 <EXTI_voidInit+0x794>)
 80017a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a8:	6153      	str	r3, [r2, #20]
 80017aa:	e021      	b.n	80017f0 <EXTI_voidInit+0x690>
								case PORTC: CLR_BIT(AFIO_EXTICR2,8);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <EXTI_voidInit+0x790>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <EXTI_voidInit+0x790>)
 80017b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b6:	6013      	str	r3, [r2, #0]
											SET_BIT(AFIO_EXTICR2,9);
 80017b8:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <EXTI_voidInit+0x790>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <EXTI_voidInit+0x790>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,10);
 80017c4:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <EXTI_voidInit+0x790>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a49      	ldr	r2, [pc, #292]	; (80018f0 <EXTI_voidInit+0x790>)
 80017ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,11);
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <EXTI_voidInit+0x790>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a46      	ldr	r2, [pc, #280]	; (80018f0 <EXTI_voidInit+0x790>)
 80017d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017da:	6013      	str	r3, [r2, #0]
											EXTI_voidDisableInt(6);
 80017dc:	2006      	movs	r0, #6
 80017de:	f000 f8a7 	bl	8001930 <EXTI_voidDisableInt>
											SET_BIT(EXTI->PR,6);  break;
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <EXTI_voidInit+0x794>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <EXTI_voidInit+0x794>)
 80017e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ec:	6153      	str	r3, [r2, #20]
 80017ee:	bf00      	nop
											}break;
 80017f0:	e07c      	b.n	80018ec <EXTI_voidInit+0x78c>
					case EXTI7 :
						switch(Pin_number){
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d04a      	beq.n	800188e <EXTI_voidInit+0x72e>
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	dc7d      	bgt.n	80018f8 <EXTI_voidInit+0x798>
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <EXTI_voidInit+0x6a6>
 8001800:	2b01      	cmp	r3, #1
 8001802:	d022      	beq.n	800184a <EXTI_voidInit+0x6ea>
											SET_BIT(AFIO_EXTICR2,13);
											CLR_BIT(AFIO_EXTICR2,14);
											CLR_BIT(AFIO_EXTICR2,15);
											EXTI_voidDisableInt(7);
											SET_BIT(EXTI->PR,7);  break;
										}break;
 8001804:	e078      	b.n	80018f8 <EXTI_voidInit+0x798>
								case PORTA:  CLR_BIT(AFIO_EXTICR2,12);
 8001806:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <EXTI_voidInit+0x790>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a39      	ldr	r2, [pc, #228]	; (80018f0 <EXTI_voidInit+0x790>)
 800180c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001810:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR2,13);
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <EXTI_voidInit+0x790>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a36      	ldr	r2, [pc, #216]	; (80018f0 <EXTI_voidInit+0x790>)
 8001818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800181c:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR2,14);
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <EXTI_voidInit+0x790>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a33      	ldr	r2, [pc, #204]	; (80018f0 <EXTI_voidInit+0x790>)
 8001824:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001828:	6013      	str	r3, [r2, #0]
											 CLR_BIT(AFIO_EXTICR2,15);
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <EXTI_voidInit+0x790>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <EXTI_voidInit+0x790>)
 8001830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001834:	6013      	str	r3, [r2, #0]
											 EXTI_voidDisableInt(7);
 8001836:	2007      	movs	r0, #7
 8001838:	f000 f87a 	bl	8001930 <EXTI_voidDisableInt>
											 SET_BIT(EXTI->PR,7);   break;
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <EXTI_voidInit+0x794>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <EXTI_voidInit+0x794>)
 8001842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001846:	6153      	str	r3, [r2, #20]
 8001848:	e043      	b.n	80018d2 <EXTI_voidInit+0x772>
								case PORTB:	SET_BIT(AFIO_EXTICR2,12);
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <EXTI_voidInit+0x790>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <EXTI_voidInit+0x790>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001854:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,13);
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <EXTI_voidInit+0x790>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <EXTI_voidInit+0x790>)
 800185c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001860:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,14);
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <EXTI_voidInit+0x790>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <EXTI_voidInit+0x790>)
 8001868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800186c:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,15);
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <EXTI_voidInit+0x790>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <EXTI_voidInit+0x790>)
 8001874:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001878:	6013      	str	r3, [r2, #0]
											EXTI_voidDisableInt(7);
 800187a:	2007      	movs	r0, #7
 800187c:	f000 f858 	bl	8001930 <EXTI_voidDisableInt>
											SET_BIT(EXTI->PR,7); 	  break;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <EXTI_voidInit+0x794>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <EXTI_voidInit+0x794>)
 8001886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188a:	6153      	str	r3, [r2, #20]
 800188c:	e021      	b.n	80018d2 <EXTI_voidInit+0x772>
								case PORTC: CLR_BIT(AFIO_EXTICR2,12);
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <EXTI_voidInit+0x790>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <EXTI_voidInit+0x790>)
 8001894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001898:	6013      	str	r3, [r2, #0]
											SET_BIT(AFIO_EXTICR2,13);
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <EXTI_voidInit+0x790>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <EXTI_voidInit+0x790>)
 80018a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a4:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,14);
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <EXTI_voidInit+0x790>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <EXTI_voidInit+0x790>)
 80018ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018b0:	6013      	str	r3, [r2, #0]
											CLR_BIT(AFIO_EXTICR2,15);
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <EXTI_voidInit+0x790>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <EXTI_voidInit+0x790>)
 80018b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018bc:	6013      	str	r3, [r2, #0]
											EXTI_voidDisableInt(7);
 80018be:	2007      	movs	r0, #7
 80018c0:	f000 f836 	bl	8001930 <EXTI_voidDisableInt>
											SET_BIT(EXTI->PR,7);  break;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <EXTI_voidInit+0x794>)
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <EXTI_voidInit+0x794>)
 80018ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ce:	6153      	str	r3, [r2, #20]
 80018d0:	bf00      	nop
										}break;
 80018d2:	e011      	b.n	80018f8 <EXTI_voidInit+0x798>
		}break;
 80018d4:	bf00      	nop
 80018d6:	e010      	b.n	80018fa <EXTI_voidInit+0x79a>
								}break;
 80018d8:	bf00      	nop
 80018da:	e00e      	b.n	80018fa <EXTI_voidInit+0x79a>
								}break;
 80018dc:	bf00      	nop
 80018de:	e00c      	b.n	80018fa <EXTI_voidInit+0x79a>
						}break;
 80018e0:	bf00      	nop
 80018e2:	e00a      	b.n	80018fa <EXTI_voidInit+0x79a>
							}break;
 80018e4:	bf00      	nop
 80018e6:	e008      	b.n	80018fa <EXTI_voidInit+0x79a>
												}break;
 80018e8:	bf00      	nop
 80018ea:	e006      	b.n	80018fa <EXTI_voidInit+0x79a>
											}break;
 80018ec:	bf00      	nop
 80018ee:	e004      	b.n	80018fa <EXTI_voidInit+0x79a>
 80018f0:	4001000c 	.word	0x4001000c
 80018f4:	40010400 	.word	0x40010400
										}break;
 80018f8:	bf00      	nop

	}


}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop

08001904 <EXTI_voidEnableInt>:



void		EXTI_voidEnableInt(u8 line_num)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI -> IMR,line_num);
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <EXTI_voidEnableInt+0x28>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4611      	mov	r1, r2
 800191c:	4a03      	ldr	r2, [pc, #12]	; (800192c <EXTI_voidEnableInt+0x28>)
 800191e:	430b      	orrs	r3, r1
 8001920:	6013      	str	r3, [r2, #0]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40010400 	.word	0x40010400

08001930 <EXTI_voidDisableInt>:
void		EXTI_voidDisableInt(u8 line_num)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(EXTI -> IMR,line_num);
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <EXTI_voidDisableInt+0x2c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	43d2      	mvns	r2, r2
 8001948:	4611      	mov	r1, r2
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <EXTI_voidDisableInt+0x2c>)
 800194c:	400b      	ands	r3, r1
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40010400 	.word	0x40010400

08001960 <EXTI_voidChangeSenseMode>:
void		EXTI_voidEnableSWI(u8 line_num)
{
	SET_BIT(EXTI -> SWIER,line_num);
}
void		EXTI_voidChangeSenseMode(u8 line_num, u8 Sense_Mode)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
	switch(Sense_Mode)
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d032      	beq.n	80019dc <EXTI_voidChangeSenseMode+0x7c>
 8001976:	2b02      	cmp	r3, #2
 8001978:	dc45      	bgt.n	8001a06 <EXTI_voidChangeSenseMode+0xa6>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <EXTI_voidChangeSenseMode+0x24>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d016      	beq.n	80019b0 <EXTI_voidChangeSenseMode+0x50>
 8001982:	e040      	b.n	8001a06 <EXTI_voidChangeSenseMode+0xa6>
	{
		case	RISING_EDGE		:	SET_BIT(EXTI -> RTSR,line_num);
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f202 	lsl.w	r2, r1, r2
 8001990:	4611      	mov	r1, r2
 8001992:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 8001994:	430b      	orrs	r3, r1
 8001996:	6093      	str	r3, [r2, #8]
									CLR_BIT(EXTI -> FTSR,line_num);		break;
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f202 	lsl.w	r2, r1, r2
 80019a4:	43d2      	mvns	r2, r2
 80019a6:	4611      	mov	r1, r2
 80019a8:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 80019aa:	400b      	ands	r3, r1
 80019ac:	60d3      	str	r3, [r2, #12]
 80019ae:	e02a      	b.n	8001a06 <EXTI_voidChangeSenseMode+0xa6>
		case	FALLING_EDGE	:	SET_BIT(EXTI -> FTSR,line_num);
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	4611      	mov	r1, r2
 80019be:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 80019c0:	430b      	orrs	r3, r1
 80019c2:	60d3      	str	r3, [r2, #12]
									CLR_BIT(EXTI -> RTSR,line_num);		break;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	79fa      	ldrb	r2, [r7, #7]
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	43d2      	mvns	r2, r2
 80019d2:	4611      	mov	r1, r2
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 80019d6:	400b      	ands	r3, r1
 80019d8:	6093      	str	r3, [r2, #8]
 80019da:	e014      	b.n	8001a06 <EXTI_voidChangeSenseMode+0xa6>
		case	IOC				:	SET_BIT(EXTI -> RTSR,line_num);
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	79fa      	ldrb	r2, [r7, #7]
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	4611      	mov	r1, r2
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6093      	str	r3, [r2, #8]
									SET_BIT(EXTI -> FTSR,line_num);		break;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	79fa      	ldrb	r2, [r7, #7]
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	4611      	mov	r1, r2
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 8001a00:	430b      	orrs	r3, r1
 8001a02:	60d3      	str	r3, [r2, #12]
 8001a04:	bf00      	nop
	}
	SET_BIT(EXTI -> IMR,line_num);
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	4611      	mov	r1, r2
 8001a14:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <EXTI_voidChangeSenseMode+0xc4>)
 8001a16:	430b      	orrs	r3, r1
 8001a18:	6013      	str	r3, [r2, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40010400 	.word	0x40010400

08001a28 <EXTI_voidSetCallBack>:
}*/



void		EXTI_voidSetCallBack(void (*Fptr)(void), u8 ID_EXTI)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
	if(Fptr != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <EXTI_voidSetCallBack+0x1c>
	{
		EXTI_CallBack[ID_EXTI] = Fptr;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	4904      	ldr	r1, [pc, #16]	; (8001a50 <EXTI_voidSetCallBack+0x28>)
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000028 	.word	0x20000028

08001a54 <EXTI0_IRQHandler>:

void	EXTI0_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0

	//EXTI0_CallBack();  //works if just using the single EXtio

	if(EXTI_CallBack[0] !=NULL){
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <EXTI0_IRQHandler+0x24>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <EXTI0_IRQHandler+0x1e>
	EXTI_CallBack[0]();
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <EXTI0_IRQHandler+0x24>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4798      	blx	r3
	SET_BIT(EXTI-> PR ,0 );
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <EXTI0_IRQHandler+0x28>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <EXTI0_IRQHandler+0x28>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6153      	str	r3, [r2, #20]
	}
		//Clear the Flag
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000028 	.word	0x20000028
 8001a7c:	40010400 	.word	0x40010400

08001a80 <EXTI1_IRQHandler>:

void	EXTI1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[1]!=NULL){
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <EXTI1_IRQHandler+0x24>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <EXTI1_IRQHandler+0x1e>
	EXTI_CallBack[1]();
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <EXTI1_IRQHandler+0x24>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4798      	blx	r3
	SET_BIT(EXTI-> PR ,1 );
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <EXTI1_IRQHandler+0x28>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <EXTI1_IRQHandler+0x28>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6153      	str	r3, [r2, #20]
	}
		//Clear the Flag
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000028 	.word	0x20000028
 8001aa8:	40010400 	.word	0x40010400

08001aac <EXTI2_IRQHandler>:
void	EXTI2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[2]!=NULL){
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <EXTI2_IRQHandler+0x24>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <EXTI2_IRQHandler+0x1e>
	EXTI_CallBack[2]();
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <EXTI2_IRQHandler+0x24>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4798      	blx	r3
	SET_BIT(EXTI-> PR ,2 );
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <EXTI2_IRQHandler+0x28>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <EXTI2_IRQHandler+0x28>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6153      	str	r3, [r2, #20]
	}
		//Clear the Flag
}void	EXTI3_IRQHandler(void)
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000028 	.word	0x20000028
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <EXTI3_IRQHandler>:
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[3]!=NULL){
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <EXTI3_IRQHandler+0x24>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <EXTI3_IRQHandler+0x1e>
	EXTI_CallBack[3]();
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <EXTI3_IRQHandler+0x24>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4798      	blx	r3
	SET_BIT(EXTI-> PR ,3 );
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <EXTI3_IRQHandler+0x28>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <EXTI3_IRQHandler+0x28>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6153      	str	r3, [r2, #20]
	}
		//Clear the Flag
}void	EXTI4_IRQHandler(void)
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000028 	.word	0x20000028
 8001b00:	40010400 	.word	0x40010400

08001b04 <EXTI4_IRQHandler>:
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	if(EXTI_CallBack[4]!=NULL){
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <EXTI4_IRQHandler+0x24>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <EXTI4_IRQHandler+0x1e>
	EXTI_CallBack[4]();
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <EXTI4_IRQHandler+0x24>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	4798      	blx	r3
	SET_BIT(EXTI-> PR ,4 );
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <EXTI4_IRQHandler+0x28>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <EXTI4_IRQHandler+0x28>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	6153      	str	r3, [r2, #20]
	}
		//Clear the Flag
}void	EXTI5_IRQHandler(void)
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000028 	.word	0x20000028
 8001b2c:	40010400 	.word	0x40010400

08001b30 <ADC_voidInit>:
#include "../04 ADC/ADC_interface.h"

void	ADC_voidInit(void){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

	ADC_ScanConvMode() ;  // SCAN mode enabled
 8001b34:	f000 f9e8 	bl	8001f08 <ADC_ScanConvMode>
	ADC_singOrcontainusConvMode();    // enable continuous conversion mode
 8001b38:	f000 f9f4 	bl	8001f24 <ADC_singOrcontainusConvMode>
	ADC_ExternalTrigConv();  // External Event selection pointed to SWSTART bit
 8001b3c:	f000 fa00 	bl	8001f40 <ADC_ExternalTrigConv>
	ADC_DataAligment();   // Data Alignment RIGHT
 8001b40:	f000 fa0c 	bl	8001f5c <ADC_DataAligment>
	//Set the Regular channel sequence length in ADC_SQR1
	ADC_NbrOfConversion();
 8001b44:	f000 fa18 	bl	8001f78 <ADC_NbrOfConversion>
	// Set the TSVREFE Bit to wake the sensor
	ADC_tempSenEnable();
 8001b48:	f000 fa22 	bl	8001f90 <ADC_tempSenEnable>
	// Enable or disable  DMA for ADC
	ADC_DMAenable();
 8001b4c:	f000 fa2e 	bl	8001fac <ADC_DMAenable>

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <ADC_voidEnable>:


//adc enable
void	ADC_voidEnable(void){
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
SET_BIT(ADC1->CR2,0);  // ADON =1 enable ADC1
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <ADC_voidEnable+0x30>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <ADC_voidEnable+0x30>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6093      	str	r3, [r2, #8]
	u32 delay = 10000;
 8001b66:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b6a:	607b      	str	r3, [r7, #4]
	while (delay--);
 8001b6c:	bf00      	nop
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1fa      	bne.n	8001b6e <ADC_voidEnable+0x1a>
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40012400 	.word	0x40012400

08001b88 <ADC_Start>:
//ADC_start adc
void ADC_Start(void){
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
	 // Clear Status register
	CLR_BIT(  ADC1->SR,0);
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <ADC_Start+0x60>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <ADC_Start+0x60>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6013      	str	r3, [r2, #0]
	CLR_BIT(  ADC1->SR,1);
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <ADC_Start+0x60>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <ADC_Start+0x60>)
 8001b9e:	f023 0302 	bic.w	r3, r3, #2
 8001ba2:	6013      	str	r3, [r2, #0]
	CLR_BIT(  ADC1->SR,2);
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <ADC_Start+0x60>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <ADC_Start+0x60>)
 8001baa:	f023 0304 	bic.w	r3, r3, #4
 8001bae:	6013      	str	r3, [r2, #0]
	CLR_BIT(  ADC1->SR,3);
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <ADC_Start+0x60>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <ADC_Start+0x60>)
 8001bb6:	f023 0308 	bic.w	r3, r3, #8
 8001bba:	6013      	str	r3, [r2, #0]
	CLR_BIT(  ADC1->SR,4);
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <ADC_Start+0x60>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <ADC_Start+0x60>)
 8001bc2:	f023 0310 	bic.w	r3, r3, #16
 8001bc6:	6013      	str	r3, [r2, #0]

	SET_BIT(ADC1->CR2 ,20);// Conversion on external event enabled
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <ADC_Start+0x60>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <ADC_Start+0x60>)
 8001bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bd2:	6093      	str	r3, [r2, #8]
	SET_BIT(ADC1->CR2,22);// Start conversion
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <ADC_Start+0x60>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <ADC_Start+0x60>)
 8001bda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bde:	6093      	str	r3, [r2, #8]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40012400 	.word	0x40012400

08001bec <ADC_channelSetup>:

void ADC_channelSetup(u8 channel , u8 SEQuance,u8 SamplingTime){
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	71bb      	strb	r3, [r7, #6]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	717b      	strb	r3, [r7, #5]
switch(SEQuance){
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	f200 80ad 	bhi.w	8001d60 <ADC_channelSetup+0x174>
 8001c06:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <ADC_channelSetup+0x20>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c4d 	.word	0x08001c4d
 8001c10:	08001c5b 	.word	0x08001c5b
 8001c14:	08001c6d 	.word	0x08001c6d
 8001c18:	08001c7f 	.word	0x08001c7f
 8001c1c:	08001c91 	.word	0x08001c91
 8001c20:	08001ca3 	.word	0x08001ca3
 8001c24:	08001cb5 	.word	0x08001cb5
 8001c28:	08001cc3 	.word	0x08001cc3
 8001c2c:	08001cd5 	.word	0x08001cd5
 8001c30:	08001ce7 	.word	0x08001ce7
 8001c34:	08001cf9 	.word	0x08001cf9
 8001c38:	08001d0b 	.word	0x08001d0b
 8001c3c:	08001d1d 	.word	0x08001d1d
 8001c40:	08001d2b 	.word	0x08001d2b
 8001c44:	08001d3d 	.word	0x08001d3d
 8001c48:	08001d4f 	.word	0x08001d4f
case SEQ1:	ADC1->SQR3 |= (channel<<0); 		  break;
 8001c4c:	4b9c      	ldr	r3, [pc, #624]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	499b      	ldr	r1, [pc, #620]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	634b      	str	r3, [r1, #52]	; 0x34
 8001c58:	e082      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ2:	ADC1->SQR3 |= (channel<<5); 		  break;
 8001c5a:	4b99      	ldr	r3, [pc, #612]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	0152      	lsls	r2, r2, #5
 8001c62:	4611      	mov	r1, r2
 8001c64:	4a96      	ldr	r2, [pc, #600]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c66:	430b      	orrs	r3, r1
 8001c68:	6353      	str	r3, [r2, #52]	; 0x34
 8001c6a:	e079      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ3:	ADC1->SQR3 |= (channel<<10); 		  break;
 8001c6c:	4b94      	ldr	r3, [pc, #592]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	0292      	lsls	r2, r2, #10
 8001c74:	4611      	mov	r1, r2
 8001c76:	4a92      	ldr	r2, [pc, #584]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	6353      	str	r3, [r2, #52]	; 0x34
 8001c7c:	e070      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ4:	ADC1->SQR3 |= (channel<<15); 		  break;
 8001c7e:	4b90      	ldr	r3, [pc, #576]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	79fa      	ldrb	r2, [r7, #7]
 8001c84:	03d2      	lsls	r2, r2, #15
 8001c86:	4611      	mov	r1, r2
 8001c88:	4a8d      	ldr	r2, [pc, #564]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6353      	str	r3, [r2, #52]	; 0x34
 8001c8e:	e067      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ5:	ADC1->SQR3 |= (channel<<20); 		  break;
 8001c90:	4b8b      	ldr	r3, [pc, #556]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	79fa      	ldrb	r2, [r7, #7]
 8001c96:	0512      	lsls	r2, r2, #20
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4a89      	ldr	r2, [pc, #548]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001ca0:	e05e      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ6:	ADC1->SQR3 |= (channel<<25); 		  break;
 8001ca2:	4b87      	ldr	r3, [pc, #540]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	0652      	lsls	r2, r2, #25
 8001caa:	4611      	mov	r1, r2
 8001cac:	4a84      	ldr	r2, [pc, #528]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	6353      	str	r3, [r2, #52]	; 0x34
 8001cb2:	e055      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ7:	ADC1->SQR2 |= (channel<<0); 		  break;
 8001cb4:	4b82      	ldr	r3, [pc, #520]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	4981      	ldr	r1, [pc, #516]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	630b      	str	r3, [r1, #48]	; 0x30
 8001cc0:	e04e      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ8:	ADC1->SQR2 |= (channel<<5);			  break;
 8001cc2:	4b7f      	ldr	r3, [pc, #508]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	79fa      	ldrb	r2, [r7, #7]
 8001cc8:	0152      	lsls	r2, r2, #5
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4a7c      	ldr	r2, [pc, #496]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	e045      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ9:	ADC1->SQR2 |= (channel<<10);		  break;
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	0292      	lsls	r2, r2, #10
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4a78      	ldr	r2, [pc, #480]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce4:	e03c      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ10:	ADC1->SQR2 |= (channel<<15);		  break;
 8001ce6:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	03d2      	lsls	r2, r2, #15
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4a73      	ldr	r2, [pc, #460]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	e033      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ11:	ADC1->SQR2 |= (channel<<20);		  break;
 8001cf8:	4b71      	ldr	r3, [pc, #452]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	79fa      	ldrb	r2, [r7, #7]
 8001cfe:	0512      	lsls	r2, r2, #20
 8001d00:	4611      	mov	r1, r2
 8001d02:	4a6f      	ldr	r2, [pc, #444]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6313      	str	r3, [r2, #48]	; 0x30
 8001d08:	e02a      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ12:	ADC1->SQR2 |= (channel<<25);		  break;
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
 8001d10:	0652      	lsls	r2, r2, #25
 8001d12:	4611      	mov	r1, r2
 8001d14:	4a6a      	ldr	r2, [pc, #424]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d16:	430b      	orrs	r3, r1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	e021      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ13:	ADC1->SQR1 |= (channel<<0);			  break;
 8001d1c:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4967      	ldr	r1, [pc, #412]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d28:	e01a      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ14:	ADC1->SQR1 |= (channel<<5);			  break;
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	79fa      	ldrb	r2, [r7, #7]
 8001d30:	0152      	lsls	r2, r2, #5
 8001d32:	4611      	mov	r1, r2
 8001d34:	4a62      	ldr	r2, [pc, #392]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d36:	430b      	orrs	r3, r1
 8001d38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d3a:	e011      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ15:	ADC1->SQR1 |= (channel<<10);		  break;
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	79fa      	ldrb	r2, [r7, #7]
 8001d42:	0292      	lsls	r2, r2, #10
 8001d44:	4611      	mov	r1, r2
 8001d46:	4a5e      	ldr	r2, [pc, #376]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d4c:	e008      	b.n	8001d60 <ADC_channelSetup+0x174>
case SEQ16:	ADC1->SQR1 |= (channel<<15);		  break;
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	79fa      	ldrb	r2, [r7, #7]
 8001d54:	03d2      	lsls	r2, r2, #15
 8001d56:	4611      	mov	r1, r2
 8001d58:	4a59      	ldr	r2, [pc, #356]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d5e:	bf00      	nop
}
switch (channel){
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	2b11      	cmp	r3, #17
 8001d64:	f200 80c9 	bhi.w	8001efa <ADC_channelSetup+0x30e>
 8001d68:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <ADC_channelSetup+0x184>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001db9 	.word	0x08001db9
 8001d74:	08001dc7 	.word	0x08001dc7
 8001d78:	08001dd9 	.word	0x08001dd9
 8001d7c:	08001deb 	.word	0x08001deb
 8001d80:	08001dfd 	.word	0x08001dfd
 8001d84:	08001e0f 	.word	0x08001e0f
 8001d88:	08001e21 	.word	0x08001e21
 8001d8c:	08001e33 	.word	0x08001e33
 8001d90:	08001e45 	.word	0x08001e45
 8001d94:	08001e57 	.word	0x08001e57
 8001d98:	08001e69 	.word	0x08001e69
 8001d9c:	08001e77 	.word	0x08001e77
 8001da0:	08001e89 	.word	0x08001e89
 8001da4:	08001e9b 	.word	0x08001e9b
 8001da8:	08001ead 	.word	0x08001ead
 8001dac:	08001ec5 	.word	0x08001ec5
 8001db0:	08001ed7 	.word	0x08001ed7
 8001db4:	08001ee9 	.word	0x08001ee9
case ADC_channe0: ADC1->SMPR2 |= (SamplingTime<<0);		break;
 8001db8:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	797b      	ldrb	r3, [r7, #5]
 8001dbe:	4940      	ldr	r1, [pc, #256]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	610b      	str	r3, [r1, #16]
 8001dc4:	e099      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe1: ADC1->SMPR2 |= (SamplingTime<<3);		break;
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	797a      	ldrb	r2, [r7, #5]
 8001dcc:	00d2      	lsls	r2, r2, #3
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4a3b      	ldr	r2, [pc, #236]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	6113      	str	r3, [r2, #16]
 8001dd6:	e090      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe2: ADC1->SMPR2 |= (SamplingTime<<6);		break;
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	797a      	ldrb	r2, [r7, #5]
 8001dde:	0192      	lsls	r2, r2, #6
 8001de0:	4611      	mov	r1, r2
 8001de2:	4a37      	ldr	r2, [pc, #220]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6113      	str	r3, [r2, #16]
 8001de8:	e087      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe3: ADC1->SMPR2 |= (SamplingTime<<9);		break;
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	797a      	ldrb	r2, [r7, #5]
 8001df0:	0252      	lsls	r2, r2, #9
 8001df2:	4611      	mov	r1, r2
 8001df4:	4a32      	ldr	r2, [pc, #200]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001df6:	430b      	orrs	r3, r1
 8001df8:	6113      	str	r3, [r2, #16]
 8001dfa:	e07e      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe4: ADC1->SMPR2 |= (SamplingTime<<12);		break;
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	797a      	ldrb	r2, [r7, #5]
 8001e02:	0312      	lsls	r2, r2, #12
 8001e04:	4611      	mov	r1, r2
 8001e06:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6113      	str	r3, [r2, #16]
 8001e0c:	e075      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe5: ADC1->SMPR2 |= (SamplingTime<<15);		break;
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	797a      	ldrb	r2, [r7, #5]
 8001e14:	03d2      	lsls	r2, r2, #15
 8001e16:	4611      	mov	r1, r2
 8001e18:	4a29      	ldr	r2, [pc, #164]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	6113      	str	r3, [r2, #16]
 8001e1e:	e06c      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe6: ADC1->SMPR2 |= (SamplingTime<<18);		break;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	797a      	ldrb	r2, [r7, #5]
 8001e26:	0492      	lsls	r2, r2, #18
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6113      	str	r3, [r2, #16]
 8001e30:	e063      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe7: ADC1->SMPR2 |= (SamplingTime<<21);		break;
 8001e32:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	797a      	ldrb	r2, [r7, #5]
 8001e38:	0552      	lsls	r2, r2, #21
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4a20      	ldr	r2, [pc, #128]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	6113      	str	r3, [r2, #16]
 8001e42:	e05a      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe8: ADC1->SMPR2 |= (SamplingTime<<24);		break;
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	797a      	ldrb	r2, [r7, #5]
 8001e4a:	0612      	lsls	r2, r2, #24
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6113      	str	r3, [r2, #16]
 8001e54:	e051      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe9: ADC1->SMPR2 |= (SamplingTime<<27);		break;
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	797a      	ldrb	r2, [r7, #5]
 8001e5c:	06d2      	lsls	r2, r2, #27
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e62:	430b      	orrs	r3, r1
 8001e64:	6113      	str	r3, [r2, #16]
 8001e66:	e048      	b.n	8001efa <ADC_channelSetup+0x30e>

case ADC_channe10: ADC1->SMPR1 |= (SamplingTime<<0);		break;
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	797b      	ldrb	r3, [r7, #5]
 8001e6e:	4914      	ldr	r1, [pc, #80]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
 8001e74:	e041      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe11: ADC1->SMPR1 |= (SamplingTime<<3);		break;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	797a      	ldrb	r2, [r7, #5]
 8001e7c:	00d2      	lsls	r2, r2, #3
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e82:	430b      	orrs	r3, r1
 8001e84:	60d3      	str	r3, [r2, #12]
 8001e86:	e038      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe12: ADC1->SMPR1 |= (SamplingTime<<6);		break;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	797a      	ldrb	r2, [r7, #5]
 8001e8e:	0192      	lsls	r2, r2, #6
 8001e90:	4611      	mov	r1, r2
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e94:	430b      	orrs	r3, r1
 8001e96:	60d3      	str	r3, [r2, #12]
 8001e98:	e02f      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe13: ADC1->SMPR1 |= (SamplingTime<<9);		break;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	797a      	ldrb	r2, [r7, #5]
 8001ea0:	0252      	lsls	r2, r2, #9
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	60d3      	str	r3, [r2, #12]
 8001eaa:	e026      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe14: ADC1->SMPR1 |= (SamplingTime<<12);		break;
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	797a      	ldrb	r2, [r7, #5]
 8001eb2:	0312      	lsls	r2, r2, #12
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4a02      	ldr	r2, [pc, #8]	; (8001ec0 <ADC_channelSetup+0x2d4>)
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	60d3      	str	r3, [r2, #12]
 8001ebc:	e01d      	b.n	8001efa <ADC_channelSetup+0x30e>
 8001ebe:	bf00      	nop
 8001ec0:	40012400 	.word	0x40012400
case ADC_channe15: ADC1->SMPR1 |= (SamplingTime<<15);		break;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <ADC_channelSetup+0x318>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	797a      	ldrb	r2, [r7, #5]
 8001eca:	03d2      	lsls	r2, r2, #15
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <ADC_channelSetup+0x318>)
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	60d3      	str	r3, [r2, #12]
 8001ed4:	e011      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe16: ADC1->SMPR1 |= (SamplingTime<<18);		break;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <ADC_channelSetup+0x318>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	797a      	ldrb	r2, [r7, #5]
 8001edc:	0492      	lsls	r2, r2, #18
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <ADC_channelSetup+0x318>)
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	60d3      	str	r3, [r2, #12]
 8001ee6:	e008      	b.n	8001efa <ADC_channelSetup+0x30e>
case ADC_channe17: ADC1->SMPR1 |= (SamplingTime<<21);		break;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <ADC_channelSetup+0x318>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	797a      	ldrb	r2, [r7, #5]
 8001eee:	0552      	lsls	r2, r2, #21
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <ADC_channelSetup+0x318>)
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	60d3      	str	r3, [r2, #12]
 8001ef8:	bf00      	nop

}

}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40012400 	.word	0x40012400

08001f08 <ADC_ScanConvMode>:
		}else {
			/*wrong status flag select*/
		}
}

void ADC_ScanConvMode(void){
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

	if(ADC1_ScanConvMode == ADC_ENABLE){
		SET_BIT(ADC1->CR1,8);
	}else if(ADC1_ScanConvMode == ADC_DISABLE){
		CLR_BIT(ADC1->CR1,8);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <ADC_ScanConvMode+0x18>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <ADC_ScanConvMode+0x18>)
 8001f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f16:	6053      	str	r3, [r2, #4]
	}else{
		//error in config
	}
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40012400 	.word	0x40012400

08001f24 <ADC_singOrcontainusConvMode>:

void ADC_singOrcontainusConvMode(void){
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

	if(ADC1_singOrcontainusConvMode == ADC_containusMode){
		SET_BIT(ADC1->CR2,1);
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <ADC_singOrcontainusConvMode+0x18>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <ADC_singOrcontainusConvMode+0x18>)
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	6093      	str	r3, [r2, #8]
	}else if(ADC1_singOrcontainusConvMode == ADC_singleMode){
		CLR_BIT(ADC1->CR2,1);
	}else{
		//error in config
	}
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40012400 	.word	0x40012400

08001f40 <ADC_ExternalTrigConv>:
	timer3_trgo,
	timer4_cc4,
	Ext1_line11,
	SWSTART
};*/
void ADC_ExternalTrigConv(void){
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
	}else if(ADC1_ExternalTrigConv==timer4_cc4){
		ADC1->CR2 |= (5<<17);
	}else if(ADC1_ExternalTrigConv==Ext1_line11){
		ADC1->CR2 |= (6<<17);
	}else if(ADC1_ExternalTrigConv==SWSTART){
		ADC1->CR2 |= (7<<17);
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <ADC_ExternalTrigConv+0x18>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a03      	ldr	r2, [pc, #12]	; (8001f58 <ADC_ExternalTrigConv+0x18>)
 8001f4a:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001f4e:	6093      	str	r3, [r2, #8]
	}else{
		//error selecting external trigger
	}

}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	40012400 	.word	0x40012400

08001f5c <ADC_DataAligment>:
void ADC_DataAligment(void){
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
	if(ADC1_DataAlign == ADC_DATAALIGN_Right){
		CLR_BIT(ADC1->CR2,11);
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <ADC_DataAligment+0x18>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <ADC_DataAligment+0x18>)
 8001f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f6a:	6093      	str	r3, [r2, #8]
		SET_BIT(ADC1->CR2,11);
	}else{
		//error inalligment config
	}

}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40012400 	.word	0x40012400

08001f78 <ADC_NbrOfConversion>:
void ADC_NbrOfConversion(void){
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
	ADC1->SQR1 |= ((ADC1_NbrOfConversion-1)<<20);
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <ADC_NbrOfConversion+0x14>)
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <ADC_NbrOfConversion+0x14>)
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40012400 	.word	0x40012400

08001f90 <ADC_tempSenEnable>:

void ADC_tempSenEnable(void){
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

	if(ADC1_tempSenEnable == ADC_ENABLE){
		SET_BIT(ADC1->CR2,23);
	}else if(ADC1_tempSenEnable == ADC_DISABLE){
		CLR_BIT(ADC1->CR2,23);
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <ADC_tempSenEnable+0x18>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <ADC_tempSenEnable+0x18>)
 8001f9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f9e:	6093      	str	r3, [r2, #8]
	}else{
		//error in temp config
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40012400 	.word	0x40012400

08001fac <ADC_DMAenable>:


void ADC_DMAenable (void){
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	if(ADC1_DMAenable == ADC_ENABLE){
			SET_BIT(ADC1->CR2,8);
		}else if(ADC1_DMAenable == ADC_DISABLE){
			CLR_BIT(ADC1->CR2,8);
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <ADC_DMAenable+0x18>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <ADC_DMAenable+0x18>)
 8001fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fba:	6093      	str	r3, [r2, #8]
		}else{
			//error in DMA config
		}
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40012400 	.word	0x40012400

08001fc8 <STK_voidSetBusyWait>:
		#else
			#error	"Wrong choice of SysTick Clock Source!"
		#endif
}
void	STK_voidSetBusyWait(u32	Ticks)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	/*	Load ticks to Load Register 	*/
	STK -> LOAD = Ticks;
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <STK_voidSetBusyWait+0x50>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6053      	str	r3, [r2, #4]
	/*	Start the timer 				*/
	SET_BIT(STK -> CTRL , 0);
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <STK_voidSetBusyWait+0x50>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <STK_voidSetBusyWait+0x50>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6013      	str	r3, [r2, #0]
	/*	Wait till the flag is raised 	*/
	while((GET_BIT(STK -> CTRL , 16 ))==0)
 8001fe2:	e000      	b.n	8001fe6 <STK_voidSetBusyWait+0x1e>
	{
		asm("NOP");
 8001fe4:	bf00      	nop
	while((GET_BIT(STK -> CTRL , 16 ))==0)
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <STK_voidSetBusyWait+0x50>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f7      	beq.n	8001fe4 <STK_voidSetBusyWait+0x1c>
	}
	/*	Stop the timer					*/
	CLR_BIT(STK -> CTRL , 0);
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <STK_voidSetBusyWait+0x50>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <STK_voidSetBusyWait+0x50>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6013      	str	r3, [r2, #0]
	STK ->	LOAD	=	0;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <STK_voidSetBusyWait+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
	STK ->	VAL		=	0;
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <STK_voidSetBusyWait+0x50>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <UART_init>:

#include "../06 USART/USART_config.h"
#include "../06 USART/USART_interface.h"
#include "../06 USART/USART_private.h"

void UART_init(void) {
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	// set Baud rate
	USART1 -> BRR = USART1_BAUDRATE;
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <UART_init+0x40>)
 8002022:	f240 3241 	movw	r2, #833	; 0x341
 8002026:	609a      	str	r2, [r3, #8]
	//USART1 -> CR1 = 1 << RXNEIE;
	// enable transmission complete interrupt
	//USART1 -> CR1 = 1 << TCIE;
	// USART1 -> CR1 = 1 << TXEIE;
#if USART1_PARITY == PARITY_NO
	USART1 -> CR1 |= 1 << PCE;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <UART_init+0x40>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <UART_init+0x40>)
 800202e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002032:	60d3      	str	r3, [r2, #12]
#if USART1_PARITY_TYPE == PARITY_ODD
	USART1 -> CR1 |= 1 << PS;
#endif
#endif
	USART1 -> CR1 |= USART1_DATA_LENGTH << M;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <UART_init+0x40>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a08      	ldr	r2, [pc, #32]	; (800205c <UART_init+0x40>)
 800203a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800203e:	60d3      	str	r3, [r2, #12]
	USART1 -> CR2 |= USART1_STOP_LENGTH << STOP;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <UART_init+0x40>)
 8002042:	4a06      	ldr	r2, [pc, #24]	; (800205c <UART_init+0x40>)
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	6113      	str	r3, [r2, #16]
	USART1 -> CR1 |= 1 << UE;
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <UART_init+0x40>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <UART_init+0x40>)
 800204e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	40013800 	.word	0x40013800

08002060 <UART_enableTX>:

//enable transmitter
void UART_enableTX(void) {
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
	USART1 -> CR1 |= 1 << TE;
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <UART_enableTX+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a03      	ldr	r2, [pc, #12]	; (8002078 <UART_enableTX+0x18>)
 800206a:	f043 0308 	orr.w	r3, r3, #8
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	40013800 	.word	0x40013800

0800207c <UART_enableRX>:
//enable receiver
void UART_enableRX(void) {
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	USART1 -> CR1 |= 1 << RE;
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <UART_enableRX+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a03      	ldr	r2, [pc, #12]	; (8002094 <UART_enableRX+0x18>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	40013800 	.word	0x40013800

08002098 <UART_RXdata>:
	while(!GET_BIT(USART1->SR,7));
	USART1->DR = data ;
	while (!GET_BIT(USART1->SR,6));
}
//receive data
u32 UART_RXdata (void) {
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
//	while(!get_bit(UCSRA ,UCSRA_RXC)) ;
//	*data = UDR ;
	u32 data = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
	//while (!GET_BIT(USART1 -> SR , 5));
	if (GET_BIT(USART1 -> SR, 5))
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <UART_RXdata+0x30>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <UART_RXdata+0x1e>
	{
			data = USART1 -> DR;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <UART_RXdata+0x30>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	607b      	str	r3, [r7, #4]
	}
	USART1 -> DR = 0;
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <UART_RXdata+0x30>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
	return data;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40013800 	.word	0x40013800

080020cc <SPI1_voidInit>:

#include "SPI_interface.h"


void SPI1_voidInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
	// Select Clock Polarity (default 1 in idle)
#if CLOCK_POARITY == TRANSITION_SECOND
	SPI1 -> CR1 |= (1 << CR1_CPOL);
#endif
#if CLOCK_PHASE == IDLE_HIGH
	SPI1 -> CR1 |= (1 << CR1_CPHA);
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <SPI1_voidInit+0x60>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a15      	ldr	r2, [pc, #84]	; (800212c <SPI1_voidInit+0x60>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]
#endif
	// Master Slave Select
#if M_S == MASTER
	SPI1 -> CR1 |= (1 << CR1_MSTR);
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <SPI1_voidInit+0x60>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <SPI1_voidInit+0x60>)
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6013      	str	r3, [r2, #0]
	// Baud Rate Select
	SPI1 -> CR1 |= (BAUD_RATE << CR1_BR);
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <SPI1_voidInit+0x60>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0f      	ldr	r2, [pc, #60]	; (800212c <SPI1_voidInit+0x60>)
 80020ee:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80020f2:	6013      	str	r3, [r2, #0]
	// 8Bit data
	SPI1 -> CR1 |= (DATA_LEN << CR1_DFF);
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <SPI1_voidInit+0x60>)
 80020f6:	4a0d      	ldr	r2, [pc, #52]	; (800212c <SPI1_voidInit+0x60>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6013      	str	r3, [r2, #0]
	// Enable Slave Select
	SET_BIT(SPI1->CR1,9);
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <SPI1_voidInit+0x60>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SPI1_voidInit+0x60>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002106:	6013      	str	r3, [r2, #0]
	SET_BIT(SPI1->CR1,8);
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <SPI1_voidInit+0x60>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <SPI1_voidInit+0x60>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]
#endif
	// Enable SPI
	SPI1 -> CR1 |= (1 << CR1_SPE);
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SPI1_voidInit+0x60>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <SPI1_voidInit+0x60>)
 800211a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211e:	6013      	str	r3, [r2, #0]
	asm("NOP");
 8002120:	bf00      	nop
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40013000 	.word	0x40013000

08002130 <SPI_voidSend>:
void SPI_voidSend(u8 data)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
	while(!GET_BIT(SPI1 -> SR,SR_TXE))
 800213a:	e000      	b.n	800213e <SPI_voidSend+0xe>
	{
		asm("NOP");
 800213c:	bf00      	nop
	while(!GET_BIT(SPI1 -> SR,SR_TXE))
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <SPI_voidSend+0x2c>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f7      	beq.n	800213c <SPI_voidSend+0xc>
	}
	SPI1 -> DR = data;
 800214c:	4a03      	ldr	r2, [pc, #12]	; (800215c <SPI_voidSend+0x2c>)
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	60d3      	str	r3, [r2, #12]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40013000 	.word	0x40013000

08002160 <LED_int>:

//led intialize
//input:led port and led pins
//output: void
//function:this function intalize the pin to be output
void LED_int (u8 ledport ,u8 ledpin){
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	460a      	mov	r2, r1
 800216a:	71fb      	strb	r3, [r7, #7]
 800216c:	4613      	mov	r3, r2
 800216e:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinDirection(ledport,ledpin,GPIO_OUTPUT_2MHZ_PP);
 8002170:	79b9      	ldrb	r1, [r7, #6]
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	2202      	movs	r2, #2
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fde2 	bl	8000d40 <DIO_voidSetPinDirection>
	LED_off ( ledport , ledpin);
 800217c:	79ba      	ldrb	r2, [r7, #6]
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f816 	bl	80021b4 <LED_off>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <LED_on>:
//led on
//input led port and led pin
//output:void
//function :this function writes high on that pin
void LED_on (u8 ledport ,u8 ledpin){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	460a      	mov	r2, r1
 800219a:	71fb      	strb	r3, [r7, #7]
 800219c:	4613      	mov	r3, r2
 800219e:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinValue(ledport,ledpin,GPIO_HIGH);
 80021a0:	79b9      	ldrb	r1, [r7, #6]
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fe9c 	bl	8000ee4 <DIO_voidSetPinValue>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <LED_off>:
//led off
//input:led port and led pins
//output: void
//function :this function writes low on that pin
void LED_off (u8 ledport ,u8 ledpin){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	460a      	mov	r2, r1
 80021be:	71fb      	strb	r3, [r7, #7]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinValue(ledport,ledpin,GPIO_LOW);
 80021c4:	79b9      	ldrb	r1, [r7, #6]
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	2200      	movs	r2, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fe8a 	bl	8000ee4 <DIO_voidSetPinValue>
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <LED_toogle>:
//led toogle
//input:led port and led pins
//output: void
//function :this function toggles that pin
void LED_toogle (u8 ledport ,u8 ledpin){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	460a      	mov	r2, r1
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	4613      	mov	r3, r2
 80021e6:	71bb      	strb	r3, [r7, #6]
	DIO_voidtogglepin(ledport,ledpin);
 80021e8:	79ba      	ldrb	r2, [r7, #6]
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fed8 	bl	8000fa4 <DIO_voidtogglepin>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <BUTTON_init>:

//button intalize
//input:buttonport and button pin
//output:void
//function: this will make the button port to an input
void BUTTON_init(u8 buttonport ,u8 buttonpin,button_state state){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	460b      	mov	r3, r1
 8002208:	71bb      	strb	r3, [r7, #6]
 800220a:	4613      	mov	r3, r2
 800220c:	717b      	strb	r3, [r7, #5]
	DIO_voidSetPinDirection(buttonport,buttonpin,GPIO_INPUT_PULL_UP_DOWN);
 800220e:	79b9      	ldrb	r1, [r7, #6]
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2208      	movs	r2, #8
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd93 	bl	8000d40 <DIO_voidSetPinDirection>

	switch (state){
 800221a:	797b      	ldrb	r3, [r7, #5]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <BUTTON_init+0x2a>
 8002220:	2b01      	cmp	r3, #1
 8002222:	d007      	beq.n	8002234 <BUTTON_init+0x38>
	case Button_pullup :  DIO_voidSetPinValue(buttonport, buttonpin, GPIO_HIGH);  break;
	case Button_Pulldown:   DIO_voidSetPinValue(buttonport, buttonpin, GPIO_LOW);  break;
	}
}
 8002224:	e00d      	b.n	8002242 <BUTTON_init+0x46>
	case Button_pullup :  DIO_voidSetPinValue(buttonport, buttonpin, GPIO_HIGH);  break;
 8002226:	79b9      	ldrb	r1, [r7, #6]
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2201      	movs	r2, #1
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fe59 	bl	8000ee4 <DIO_voidSetPinValue>
 8002232:	e006      	b.n	8002242 <BUTTON_init+0x46>
	case Button_Pulldown:   DIO_voidSetPinValue(buttonport, buttonpin, GPIO_LOW);  break;
 8002234:	79b9      	ldrb	r1, [r7, #6]
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2200      	movs	r2, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fe52 	bl	8000ee4 <DIO_voidSetPinValue>
 8002240:	bf00      	nop
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <Buzzer_int>:

//Buzzer intialize
//input:Buzzer port and Buzzer pins
//output: void
//function:this function intalize the pin to be output
void Buzzer_int (u8 Buzzerport ,u8 Buzzerpin){
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	460a      	mov	r2, r1
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	4613      	mov	r3, r2
 8002258:	71bb      	strb	r3, [r7, #6]
	
	DIO_voidSetPinDirection(Buzzerport,Buzzerpin,GPIO_OUTPUT_2MHZ_PP);
 800225a:	79b9      	ldrb	r1, [r7, #6]
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2202      	movs	r2, #2
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fd6d 	bl	8000d40 <DIO_voidSetPinDirection>
	Buzzer_off(Buzzerport,Buzzerpin);
 8002266:	79ba      	ldrb	r2, [r7, #6]
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f816 	bl	800229e <Buzzer_off>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <Buzzer_on>:
//Buzzer on
//input led port and Buzzer pin
//output:void
//function :this function writes high on that pin
void Buzzer_on (u8 Buzzerport ,u8 Buzzerpin){
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	460a      	mov	r2, r1
 8002284:	71fb      	strb	r3, [r7, #7]
 8002286:	4613      	mov	r3, r2
 8002288:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinValue(Buzzerport,Buzzerpin,GPIO_HIGH);
 800228a:	79b9      	ldrb	r1, [r7, #6]
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	2201      	movs	r2, #1
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fe27 	bl	8000ee4 <DIO_voidSetPinValue>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <Buzzer_off>:
//Buzzer off
//input:Buzzer port and Buzzer pins
//output: void
//function :this function writes low on that pin
void Buzzer_off (u8 Buzzerport ,u8 Buzzerpin){
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	460a      	mov	r2, r1
 80022a8:	71fb      	strb	r3, [r7, #7]
 80022aa:	4613      	mov	r3, r2
 80022ac:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinValue(Buzzerport,Buzzerpin,GPIO_LOW);
 80022ae:	79b9      	ldrb	r1, [r7, #6]
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2200      	movs	r2, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fe15 	bl	8000ee4 <DIO_voidSetPinValue>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <BLUETOOTH_voidinit>:

#include "../../01 MCAL/06 USART/USART_interface.h"

#include "../04 BLUETOOTH/BLUETOOTH_interface.h"
void BLUETOOTH_voidinit(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
	UART_init();
 80022c6:	f7ff fea9 	bl	800201c <UART_init>
	UART_enableTX();
 80022ca:	f7ff fec9 	bl	8002060 <UART_enableTX>
	UART_enableRX();
 80022ce:	f7ff fed5 	bl	800207c <UART_enableRX>
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <BLUETOOTH_u8RecieveData>:
void BLUETOOTH_voidSendData(u8 data)
{
	UART_TXdata(data);
}
u8 BLUETOOTH_u8RecieveData(void)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
	u8 data = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	71fb      	strb	r3, [r7, #7]
	data =  UART_RXdata();
 80022e0:	f7ff feda 	bl	8002098 <UART_RXdata>
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
	return data;
 80022e8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <Segment7_voidSetValue>:
		DIO_voidSetPinDirection(Port, i, GPIO_OUTPUT_2MHZ_PP);
	}
}

void Segment7_voidSetValue(u8 port,u8 start,u8 data)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	460b      	mov	r3, r1
 8002300:	71bb      	strb	r3, [r7, #6]
 8002302:	4613      	mov	r3, r2
 8002304:	717b      	strb	r3, [r7, #5]
	if (data < 11)
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	2b0a      	cmp	r3, #10
 800230a:	d80d      	bhi.n	8002328 <Segment7_voidSetValue+0x34>
	{
		DIO_voidWriteValue(port, start, NUM[data]);
 800230c:	797b      	ldrb	r3, [r7, #5]
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <Segment7_voidSetValue+0x3c>)
 8002310:	5cd2      	ldrb	r2, [r2, r3]
 8002312:	79b9      	ldrb	r1, [r7, #6]
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fece 	bl	80010b8 <DIO_voidWriteValue>
		Segment7_voidDisplayOFF(port,start);
 800231c:	79ba      	ldrb	r2, [r7, #6]
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 f81a 	bl	800235c <Segment7_voidDisplayOFF>
	}
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000000 	.word	0x20000000

08002334 <Segment7_voidDisplayON>:
void Segment7_voidDisplayON(u8 Port,u8 startpin)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	460a      	mov	r2, r1
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	4613      	mov	r3, r2
 8002342:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinValue(Port, startpin+7, GPIO_LOW);
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	3307      	adds	r3, #7
 8002348:	b2d9      	uxtb	r1, r3
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2200      	movs	r2, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fdc8 	bl	8000ee4 <DIO_voidSetPinValue>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <Segment7_voidDisplayOFF>:
void Segment7_voidDisplayOFF(u8 Port,u8 startpin)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	460a      	mov	r2, r1
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	4613      	mov	r3, r2
 800236a:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinValue(Port, startpin+7, GPIO_HIGH);
 800236c:	79bb      	ldrb	r3, [r7, #6]
 800236e:	3307      	adds	r3, #7
 8002370:	b2d9      	uxtb	r1, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2201      	movs	r2, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fdb4 	bl	8000ee4 <DIO_voidSetPinValue>
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <Segment7_voidDualModeInit>:
/***************Dual Mode******/
void Segment7_voidDualModeInit(u8 Port,u8 startpin)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	460a      	mov	r2, r1
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	4613      	mov	r3, r2
 8002392:	71bb      	strb	r3, [r7, #6]
	u8 i;
	for (i = startpin; i < startpin+9;i++)
 8002394:	79bb      	ldrb	r3, [r7, #6]
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e008      	b.n	80023ac <Segment7_voidDualModeInit+0x28>
	{
		DIO_voidSetPinDirection(Port, i, GPIO_OUTPUT_2MHZ_PP);
 800239a:	7bf9      	ldrb	r1, [r7, #15]
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2202      	movs	r2, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fccd 	bl	8000d40 <DIO_voidSetPinDirection>
	for (i = startpin; i < startpin+9;i++)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	3301      	adds	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	f103 0208 	add.w	r2, r3, #8
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	daf0      	bge.n	800239a <Segment7_voidDualModeInit+0x16>
	}
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <Segment7_voidDualModeSetValue>:

void Segment7_voidDualModeSetValue(u8 port,u8 start,u8 data)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
 80023ce:	460b      	mov	r3, r1
 80023d0:	71bb      	strb	r3, [r7, #6]
 80023d2:	4613      	mov	r3, r2
 80023d4:	717b      	strb	r3, [r7, #5]
	u8 segR = data%10;
 80023d6:	797a      	ldrb	r2, [r7, #5]
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <Segment7_voidDualModeSetValue+0xb4>)
 80023da:	fba3 1302 	umull	r1, r3, r3, r2
 80023de:	08d9      	lsrs	r1, r3, #3
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	73fb      	strb	r3, [r7, #15]
	u8 segL = (data-segR)/10;
 80023ec:	797a      	ldrb	r2, [r7, #5]
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	4a22      	ldr	r2, [pc, #136]	; (800247c <Segment7_voidDualModeSetValue+0xb8>)
 80023f4:	fb82 1203 	smull	r1, r2, r2, r3
 80023f8:	1092      	asrs	r2, r2, #2
 80023fa:	17db      	asrs	r3, r3, #31
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	73bb      	strb	r3, [r7, #14]
	// Seg Right digit
	Segment7_voidSetValue(port,start,segR);
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	79b9      	ldrb	r1, [r7, #6]
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff74 	bl	80022f4 <Segment7_voidSetValue>
	Segment7_voidDisplayOFF(port,start+1);
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	3301      	adds	r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ffa0 	bl	800235c <Segment7_voidDisplayOFF>
	Segment7_voidDisplayON(port,start);
 800241c:	79ba      	ldrb	r2, [r7, #6]
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff86 	bl	8002334 <Segment7_voidDisplayON>
	STK_voidSetBusyWait(1000);
 8002428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800242c:	f7ff fdcc 	bl	8001fc8 <STK_voidSetBusyWait>
    Segment7_voidDisplayOFF(port,start);
 8002430:	79ba      	ldrb	r2, [r7, #6]
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff90 	bl	800235c <Segment7_voidDisplayOFF>

    // Seg Left Value
	Segment7_voidSetValue(port,start,segL);
 800243c:	7bba      	ldrb	r2, [r7, #14]
 800243e:	79b9      	ldrb	r1, [r7, #6]
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff56 	bl	80022f4 <Segment7_voidSetValue>
	Segment7_voidDisplayON(port,start+1);
 8002448:	79bb      	ldrb	r3, [r7, #6]
 800244a:	3301      	adds	r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff6e 	bl	8002334 <Segment7_voidDisplayON>
	STK_voidSetBusyWait(1000);
 8002458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800245c:	f7ff fdb4 	bl	8001fc8 <STK_voidSetBusyWait>
    Segment7_voidDisplayOFF(port,start+1);
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	3301      	adds	r3, #1
 8002464:	b2da      	uxtb	r2, r3
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff76 	bl	800235c <Segment7_voidDisplayOFF>
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	cccccccd 	.word	0xcccccccd
 800247c:	66666667 	.word	0x66666667

08002480 <Heater_systemint>:
//interrupt functions declaration
void calibration_ISR(void);
void Button_up_ISR(void);
void Button_down_ISR(void);

void Heater_systemint(void){
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0

	//clock intalizing
		RCC_voidSysClkInt();  //intalize clock
 8002484:	f7fe fb7a 	bl	8000b7c <RCC_voidSysClkInt>
		RCC_voidEnablePerClk(RCC_APB2, RCC_APB2_AFIO); //intalize clock to Alternate functio
 8002488:	2100      	movs	r1, #0
 800248a:	2002      	movs	r0, #2
 800248c:	f7fe fb84 	bl	8000b98 <RCC_voidEnablePerClk>
		RCC_voidEnablePerClk(RCC_APB2, RCC_APB2_DIOA); //intalize clock for GPIOA
 8002490:	2102      	movs	r1, #2
 8002492:	2002      	movs	r0, #2
 8002494:	f7fe fb80 	bl	8000b98 <RCC_voidEnablePerClk>
		RCC_voidEnablePerClk(RCC_APB2, RCC_APB2_DIOB); //intalize clock for GPIOb
 8002498:	2103      	movs	r1, #3
 800249a:	2002      	movs	r0, #2
 800249c:	f7fe fb7c 	bl	8000b98 <RCC_voidEnablePerClk>
		RCC_voidEnablePerClk(RCC_APB2, RCC_APB2_DIOC); //intalize clock for GPIOC
 80024a0:	2104      	movs	r1, #4
 80024a2:	2002      	movs	r0, #2
 80024a4:	f7fe fb78 	bl	8000b98 <RCC_voidEnablePerClk>
		RCC_voidEnablePerClk(RCC_APB2,RCC_APB2_ADC1);
 80024a8:	2109      	movs	r1, #9
 80024aa:	2002      	movs	r0, #2
 80024ac:	f7fe fb74 	bl	8000b98 <RCC_voidEnablePerClk>
		RCC_voidEnablePerClk(RCC_APB2, RCC_APB2_USART1);
 80024b0:	210e      	movs	r1, #14
 80024b2:	2002      	movs	r0, #2
 80024b4:	f7fe fb70 	bl	8000b98 <RCC_voidEnablePerClk>
		RCC_voidEnablePerClk(RCC_APB2, RCC_APB2_SPI1); //rcc clock for spi1
 80024b8:	210c      	movs	r1, #12
 80024ba:	2002      	movs	r0, #2
 80024bc:	f7fe fb6c 	bl	8000b98 <RCC_voidEnablePerClk>

		//uart pins intalize
		DIO_voidSetPinDirection(PORTA, PIN9, GPIO_OUTPUT_10MHZ_AFPP);//uart pint tx
 80024c0:	2209      	movs	r2, #9
 80024c2:	2109      	movs	r1, #9
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fc3b 	bl	8000d40 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(PORTA, PIN10, GPIO_INPUT_FLOAT);//uart pin rx
 80024ca:	2204      	movs	r2, #4
 80024cc:	210a      	movs	r1, #10
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe fc36 	bl	8000d40 <DIO_voidSetPinDirection>

		//spi pins intalize
		DIO_voidSetPinDirection(PORTA, PIN5, GPIO_OUTPUT_10MHZ_AFPP); //clk
 80024d4:	2209      	movs	r2, #9
 80024d6:	2105      	movs	r1, #5
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fc31 	bl	8000d40 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTA, PIN6, GPIO_INPUT_FLOAT);		//MISO
 80024de:	2204      	movs	r2, #4
 80024e0:	2106      	movs	r1, #6
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7fe fc2c 	bl	8000d40 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTA, PIN7, GPIO_OUTPUT_10MHZ_AFPP);//MOSI
 80024e8:	2209      	movs	r2, #9
 80024ea:	2107      	movs	r1, #7
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fc27 	bl	8000d40 <DIO_voidSetPinDirection>
			DIO_voidSetPinDirection(PORTA, PIN4, GPIO_OUTPUT_10MHZ_PP); //ss
 80024f2:	2201      	movs	r2, #1
 80024f4:	2104      	movs	r1, #4
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fe fc22 	bl	8000d40 <DIO_voidSetPinDirection>
			SPI1_voidInit();
 80024fc:	f7ff fde6 	bl	80020cc <SPI1_voidInit>
			SET_BIT(SPI1->CR1,8)	; //value of this bit forced on the NSS pin
 8002500:	4b52      	ldr	r3, [pc, #328]	; (800264c <Heater_systemint+0x1cc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a51      	ldr	r2, [pc, #324]	; (800264c <Heater_systemint+0x1cc>)
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	6013      	str	r3, [r2, #0]
			//DISABLE ALL INTERRUPT
			SPI1->CR2=0;
 800250c:	4b4f      	ldr	r3, [pc, #316]	; (800264c <Heater_systemint+0x1cc>)
 800250e:	2200      	movs	r2, #0
 8002510:	605a      	str	r2, [r3, #4]
		//buttons intalizer
		BUTTON_init(PORTA, PIN0, Button_pullup);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff fe70 	bl	80021fc <BUTTON_init>
		BUTTON_init(PORTA, PIN1, Button_pullup);
 800251c:	2200      	movs	r2, #0
 800251e:	2101      	movs	r1, #1
 8002520:	2000      	movs	r0, #0
 8002522:	f7ff fe6b 	bl	80021fc <BUTTON_init>
		BUTTON_init(PORTA, PIN2, Button_pullup);
 8002526:	2200      	movs	r2, #0
 8002528:	2102      	movs	r1, #2
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff fe66 	bl	80021fc <BUTTON_init>

		//buzzer inalize
		Buzzer_int(PORTB, PIN0);
 8002530:	2100      	movs	r1, #0
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff fe89 	bl	800224a <Buzzer_int>

		//ADC intalizing

		DIO_voidSetPinDirection(PORTB, PIN1, GPIO_INPUT_ANALOG);
 8002538:	2200      	movs	r2, #0
 800253a:	2101      	movs	r1, #1
 800253c:	2001      	movs	r0, #1
 800253e:	f7fe fbff 	bl	8000d40 <DIO_voidSetPinDirection>
	    RCC_voidEnablePerClk(RCC_APB2, RCC_APB2_ADC1); // enable ADC1 clock
 8002542:	2109      	movs	r1, #9
 8002544:	2002      	movs	r0, #2
 8002546:	f7fe fb27 	bl	8000b98 <RCC_voidEnablePerClk>
	    RCC_ADC_SETprescaler(divided4);
 800254a:	2001      	movs	r0, #1
 800254c:	f7fe fb66 	bl	8000c1c <RCC_ADC_SETprescaler>
	   //temp sensor channel config
		 ADC_channelSetup(ADC_channe9,SEQ1,cycles_239_5);
 8002550:	2207      	movs	r2, #7
 8002552:	2100      	movs	r1, #0
 8002554:	2009      	movs	r0, #9
 8002556:	f7ff fb49 	bl	8001bec <ADC_channelSetup>
		 ADC_voidInit();
 800255a:	f7ff fae9 	bl	8001b30 <ADC_voidInit>
		 ADC_voidEnable();
 800255e:	f7ff faf9 	bl	8001b54 <ADC_voidEnable>
		 ADC_Start();
 8002562:	f7ff fb11 	bl	8001b88 <ADC_Start>

	//set the inerupt function
		EXTI_voidSetCallBack(calibration_ISR,EXTI0);//A0
 8002566:	2100      	movs	r1, #0
 8002568:	4839      	ldr	r0, [pc, #228]	; (8002650 <Heater_systemint+0x1d0>)
 800256a:	f7ff fa5d 	bl	8001a28 <EXTI_voidSetCallBack>
		EXTI_voidSetCallBack(Button_up_ISR,EXTI1);//A1
 800256e:	2101      	movs	r1, #1
 8002570:	4838      	ldr	r0, [pc, #224]	; (8002654 <Heater_systemint+0x1d4>)
 8002572:	f7ff fa59 	bl	8001a28 <EXTI_voidSetCallBack>
		EXTI_voidSetCallBack(Button_down_ISR,EXTI2);//A2
 8002576:	2102      	movs	r1, #2
 8002578:	4837      	ldr	r0, [pc, #220]	; (8002658 <Heater_systemint+0x1d8>)
 800257a:	f7ff fa55 	bl	8001a28 <EXTI_voidSetCallBack>

	//External interupt intalizer
		EXTI_voidInit(EXTI0,PORTA);
 800257e:	2100      	movs	r1, #0
 8002580:	2000      	movs	r0, #0
 8002582:	f7fe fded 	bl	8001160 <EXTI_voidInit>
		EXTI_voidInit(EXTI1,PORTA);
 8002586:	2100      	movs	r1, #0
 8002588:	2001      	movs	r0, #1
 800258a:	f7fe fde9 	bl	8001160 <EXTI_voidInit>
		EXTI_voidInit(EXTI2,PORTA);
 800258e:	2100      	movs	r1, #0
 8002590:	2002      	movs	r0, #2
 8002592:	f7fe fde5 	bl	8001160 <EXTI_voidInit>

		EXTI_voidEnableInt(EXTI0);
 8002596:	2000      	movs	r0, #0
 8002598:	f7ff f9b4 	bl	8001904 <EXTI_voidEnableInt>
		EXTI_voidEnableInt(EXTI1);
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff f9b1 	bl	8001904 <EXTI_voidEnableInt>
		EXTI_voidEnableInt(EXTI2);
 80025a2:	2002      	movs	r0, #2
 80025a4:	f7ff f9ae 	bl	8001904 <EXTI_voidEnableInt>

		EXTI_voidChangeSenseMode(EXTI0,FALLING_EDGE);
 80025a8:	2101      	movs	r1, #1
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7ff f9d8 	bl	8001960 <EXTI_voidChangeSenseMode>
		EXTI_voidChangeSenseMode(EXTI1,FALLING_EDGE);
 80025b0:	2101      	movs	r1, #1
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7ff f9d4 	bl	8001960 <EXTI_voidChangeSenseMode>
		EXTI_voidChangeSenseMode(EXTI2,FALLING_EDGE);
 80025b8:	2101      	movs	r1, #1
 80025ba:	2002      	movs	r0, #2
 80025bc:	f7ff f9d0 	bl	8001960 <EXTI_voidChangeSenseMode>


		//nvic enabler
		NVIC_voidEnablePerInt(6);
 80025c0:	2006      	movs	r0, #6
 80025c2:	f7fe fdab 	bl	800111c <NVIC_voidEnablePerInt>
		NVIC_voidEnablePerInt(7);
 80025c6:	2007      	movs	r0, #7
 80025c8:	f7fe fda8 	bl	800111c <NVIC_voidEnablePerInt>
		NVIC_voidEnablePerInt(8);
 80025cc:	2008      	movs	r0, #8
 80025ce:	f7fe fda5 	bl	800111c <NVIC_voidEnablePerInt>
		 //segment and bluetooth intalize
		Segment7_voidDualModeInit(PORTB, PIN6);
 80025d2:	2106      	movs	r1, #6
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7ff fed5 	bl	8002384 <Segment7_voidDualModeInit>

		BLUETOOTH_voidinit();
 80025da:	f7ff fe72 	bl	80022c2 <BLUETOOTH_voidinit>
//#######################wter level intliztion
		//level 1 ...//green led
		DIO_voidSetPinDirection(PORTA, PIN3, GPIO_INPUT_PULL_UP_DOWN);
 80025de:	2208      	movs	r2, #8
 80025e0:	2103      	movs	r1, #3
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fbac 	bl	8000d40 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTA, PIN3, GPIO_LOW);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2103      	movs	r1, #3
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe fc79 	bl	8000ee4 <DIO_voidSetPinValue>
		//level 2 ...//red led
		DIO_voidSetPinDirection(PORTA, PIN8, GPIO_INPUT_PULL_UP_DOWN);
 80025f2:	2208      	movs	r2, #8
 80025f4:	2108      	movs	r1, #8
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe fba2 	bl	8000d40 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTA, PIN8, GPIO_LOW);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2108      	movs	r1, #8
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fc6f 	bl	8000ee4 <DIO_voidSetPinValue>

		//level 3 ...//blue led // buzzer on
		DIO_voidSetPinDirection(PORTA, PIN12, GPIO_INPUT_PULL_UP_DOWN);
 8002606:	2208      	movs	r2, #8
 8002608:	210c      	movs	r1, #12
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe fb98 	bl	8000d40 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTA, PIN12, GPIO_LOW);
 8002610:	2200      	movs	r2, #0
 8002612:	210c      	movs	r1, #12
 8002614:	2000      	movs	r0, #0
 8002616:	f7fe fc65 	bl	8000ee4 <DIO_voidSetPinValue>
//####################spi intalization##################################################3
		SPI1_voidInit();
 800261a:	f7ff fd57 	bl	80020cc <SPI1_voidInit>
//######################################################################################################
		//test led
		LED_int(PORTC, PIN13);
 800261e:	210d      	movs	r1, #13
 8002620:	2002      	movs	r0, #2
 8002622:	f7ff fd9d 	bl	8002160 <LED_int>
		//test ledds adc
		LED_int(PORTB, PIN3);//heating element
 8002626:	2103      	movs	r1, #3
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fd99 	bl	8002160 <LED_int>
		LED_int(PORTB, PIN4);//cooling elemnt
 800262e:	2104      	movs	r1, #4
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fd95 	bl	8002160 <LED_int>
		LED_int(PORTB, PIN5);
 8002636:	2105      	movs	r1, #5
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff fd91 	bl	8002160 <LED_int>
		LED_int(PORTA, PIN11);
 800263e:	210b      	movs	r1, #11
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff fd8d 	bl	8002160 <LED_int>
//######################################################################################################

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40013000 	.word	0x40013000
 8002650:	08002a65 	.word	0x08002a65
 8002654:	08002b6d 	.word	0x08002b6d
 8002658:	08002ba5 	.word	0x08002ba5
 800265c:	00000000 	.word	0x00000000

08002660 <main>:

#define levelup
#define leveldown

int main(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0

	Heater_systemint();
 8002664:	f7ff ff0c 	bl	8002480 <Heater_systemint>
	ADC_Value	= ADC1->DR &0x0000FFFF;
 8002668:	4ba1      	ldr	r3, [pc, #644]	; (80028f0 <main+0x290>)
 800266a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266c:	b29a      	uxth	r2, r3
 800266e:	4ba1      	ldr	r3, [pc, #644]	; (80028f4 <main+0x294>)
 8002670:	801a      	strh	r2, [r3, #0]
	temperature=ADC_Value/39.6;
 8002672:	4ba0      	ldr	r3, [pc, #640]	; (80028f4 <main+0x294>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd fecc 	bl	8000414 <__aeabi_i2d>
 800267c:	a39a      	add	r3, pc, #616	; (adr r3, 80028e8 <main+0x288>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f7fe f85b 	bl	800073c <__aeabi_ddiv>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe f93d 	bl	800090c <__aeabi_d2f>
 8002692:	4603      	mov	r3, r0
 8002694:	4a98      	ldr	r2, [pc, #608]	; (80028f8 <main+0x298>)
 8002696:	6013      	str	r3, [r2, #0]
	calibration_ISR();
 8002698:	f000 f9e4 	bl	8002a64 <calibration_ISR>


	while (1)
	{
		DIO_voidSetPinValue(PORTA, PIN12, GPIO_LOW);
 800269c:	2200      	movs	r2, #0
 800269e:	210c      	movs	r1, #12
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe fc1f 	bl	8000ee4 <DIO_voidSetPinValue>
		INBUT_Value = BLUETOOTH_u8RecieveData();
 80026a6:	f7ff fe16 	bl	80022d6 <BLUETOOTH_u8RecieveData>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b93      	ldr	r3, [pc, #588]	; (80028fc <main+0x29c>)
 80026b0:	701a      	strb	r2, [r3, #0]
		ADC_Value	= ADC1->DR &0x0000FFFF;
 80026b2:	4b8f      	ldr	r3, [pc, #572]	; (80028f0 <main+0x290>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <main+0x294>)
 80026ba:	801a      	strh	r2, [r3, #0]
		temperature=ADC_Value/39.6;
 80026bc:	4b8d      	ldr	r3, [pc, #564]	; (80028f4 <main+0x294>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fea7 	bl	8000414 <__aeabi_i2d>
 80026c6:	a388      	add	r3, pc, #544	; (adr r3, 80028e8 <main+0x288>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fe f836 	bl	800073c <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7fe f918 	bl	800090c <__aeabi_d2f>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a86      	ldr	r2, [pc, #536]	; (80028f8 <main+0x298>)
 80026e0:	6013      	str	r3, [r2, #0]
		Segment7_voidDualModeSetValue(PORTB, PIN6, (u8)temperature);
 80026e2:	4b85      	ldr	r3, [pc, #532]	; (80028f8 <main+0x298>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe f9d6 	bl	8000a98 <__aeabi_f2uiz>
 80026ec:	4603      	mov	r3, r0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	2106      	movs	r1, #6
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff fe65 	bl	80023c4 <Segment7_voidDualModeSetValue>
		//####################Bluetooth vlue check
		if (INBUT_Value!=0){
 80026fa:	4b80      	ldr	r3, [pc, #512]	; (80028fc <main+0x29c>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d013      	beq.n	800272a <main+0xca>
			if(INBUT_Value=='u'){
 8002702:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <main+0x29c>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b75      	cmp	r3, #117	; 0x75
 8002708:	d102      	bne.n	8002710 <main+0xb0>
				Button_down_ISR();
 800270a:	f000 fa4b 	bl	8002ba4 <Button_down_ISR>
 800270e:	e00c      	b.n	800272a <main+0xca>
			}else if (INBUT_Value=='d'){
 8002710:	4b7a      	ldr	r3, [pc, #488]	; (80028fc <main+0x29c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b64      	cmp	r3, #100	; 0x64
 8002716:	d102      	bne.n	800271e <main+0xbe>
				Button_up_ISR();
 8002718:	f000 fa28 	bl	8002b6c <Button_up_ISR>
 800271c:	e005      	b.n	800272a <main+0xca>
			}else if (INBUT_Value=='c'){
 800271e:	4b77      	ldr	r3, [pc, #476]	; (80028fc <main+0x29c>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b63      	cmp	r3, #99	; 0x63
 8002724:	d101      	bne.n	800272a <main+0xca>
				calibration_ISR();
 8002726:	f000 f99d 	bl	8002a64 <calibration_ISR>
			}
		}
		//############temperature checking
		if(temperature<20)//level1
 800272a:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <main+0x298>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4974      	ldr	r1, [pc, #464]	; (8002900 <main+0x2a0>)
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe f989 	bl	8000a48 <__aeabi_fcmplt>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01d      	beq.n	8002778 <main+0x118>
		{
			if(indicator>level1){
 800273c:	4b71      	ldr	r3, [pc, #452]	; (8002904 <main+0x2a4>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <main+0xf6>
				//####################work heting element
				LED_on(PORTB, PIN3);//heating element
 8002744:	2103      	movs	r1, #3
 8002746:	2001      	movs	r0, #1
 8002748:	f7ff fd22 	bl	8002190 <LED_on>
				LED_off(PORTB, PIN4);//cooling elemnt
 800274c:	2104      	movs	r1, #4
 800274e:	2001      	movs	r0, #1
 8002750:	f7ff fd30 	bl	80021b4 <LED_off>
 8002754:	e11f      	b.n	8002996 <main+0x336>
			}else if (indicator==level1){
 8002756:	4b6b      	ldr	r3, [pc, #428]	; (8002904 <main+0x2a4>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 811b 	bne.w	8002996 <main+0x336>
				//send stble state
				LED_off(PORTB, PIN3);//heating element
 8002760:	2103      	movs	r1, #3
 8002762:	2001      	movs	r0, #1
 8002764:	f7ff fd26 	bl	80021b4 <LED_off>
				LED_off(PORTB, PIN4);//cooling elemnt
 8002768:	2104      	movs	r1, #4
 800276a:	2001      	movs	r0, #1
 800276c:	f7ff fd22 	bl	80021b4 <LED_off>
				SPI_voidSend('1');
 8002770:	2031      	movs	r0, #49	; 0x31
 8002772:	f7ff fcdd 	bl	8002130 <SPI_voidSend>
 8002776:	e10e      	b.n	8002996 <main+0x336>
			}

		}else if (temperature>20 &&temperature<40) //level 2
 8002778:	4b5f      	ldr	r3, [pc, #380]	; (80028f8 <main+0x298>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4960      	ldr	r1, [pc, #384]	; (8002900 <main+0x2a0>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe f980 	bl	8000a84 <__aeabi_fcmpgt>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d033      	beq.n	80027f2 <main+0x192>
 800278a:	4b5b      	ldr	r3, [pc, #364]	; (80028f8 <main+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	495e      	ldr	r1, [pc, #376]	; (8002908 <main+0x2a8>)
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe f959 	bl	8000a48 <__aeabi_fcmplt>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02a      	beq.n	80027f2 <main+0x192>
		{
			if(indicator>level2){
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <main+0x2a4>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d908      	bls.n	80027b6 <main+0x156>
				//####################work heating element
				LED_on(PORTB, PIN3);//heating element
 80027a4:	2103      	movs	r1, #3
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7ff fcf2 	bl	8002190 <LED_on>
				LED_off(PORTB, PIN4);//cooling elemnt
 80027ac:	2104      	movs	r1, #4
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff fd00 	bl	80021b4 <LED_off>
			if(indicator>level2){
 80027b4:	e0ea      	b.n	800298c <main+0x32c>
			}
			else if(indicator<level2){
 80027b6:	4b53      	ldr	r3, [pc, #332]	; (8002904 <main+0x2a4>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <main+0x170>
				//######################## work cooling element
				LED_off(PORTB, PIN3);//heating element
 80027be:	2103      	movs	r1, #3
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7ff fcf7 	bl	80021b4 <LED_off>
				LED_on(PORTB, PIN4);//cooling elemnt
 80027c6:	2104      	movs	r1, #4
 80027c8:	2001      	movs	r0, #1
 80027ca:	f7ff fce1 	bl	8002190 <LED_on>
			if(indicator>level2){
 80027ce:	e0dd      	b.n	800298c <main+0x32c>

			}else if (indicator==level2){
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <main+0x2a4>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	f040 80d9 	bne.w	800298c <main+0x32c>
				//send stble state
				LED_off(PORTB, PIN3);//heating element
 80027da:	2103      	movs	r1, #3
 80027dc:	2001      	movs	r0, #1
 80027de:	f7ff fce9 	bl	80021b4 <LED_off>
				LED_off(PORTB, PIN4);//cooling elemnt
 80027e2:	2104      	movs	r1, #4
 80027e4:	2001      	movs	r0, #1
 80027e6:	f7ff fce5 	bl	80021b4 <LED_off>
				SPI_voidSend('2');
 80027ea:	2032      	movs	r0, #50	; 0x32
 80027ec:	f7ff fca0 	bl	8002130 <SPI_voidSend>
			if(indicator>level2){
 80027f0:	e0cc      	b.n	800298c <main+0x32c>
			}
		}else if (temperature>40 &&temperature<60) //level 3
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <main+0x298>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4944      	ldr	r1, [pc, #272]	; (8002908 <main+0x2a8>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe f943 	bl	8000a84 <__aeabi_fcmpgt>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d033      	beq.n	800286c <main+0x20c>
 8002804:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <main+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4940      	ldr	r1, [pc, #256]	; (800290c <main+0x2ac>)
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe f91c 	bl	8000a48 <__aeabi_fcmplt>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d02a      	beq.n	800286c <main+0x20c>
		{
			if(indicator>level3){
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <main+0x2a4>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d908      	bls.n	8002830 <main+0x1d0>
				//####################work heating element
				LED_on(PORTB, PIN3);//heating element
 800281e:	2103      	movs	r1, #3
 8002820:	2001      	movs	r0, #1
 8002822:	f7ff fcb5 	bl	8002190 <LED_on>
				LED_off(PORTB, PIN4);//cooling elemnt
 8002826:	2104      	movs	r1, #4
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff fcc3 	bl	80021b4 <LED_off>
			if(indicator>level3){
 800282e:	e0af      	b.n	8002990 <main+0x330>
			}else if(indicator<level3){
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <main+0x2a4>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d808      	bhi.n	800284a <main+0x1ea>
				//######################## work cooling element
				LED_off(PORTB, PIN3);//heating element
 8002838:	2103      	movs	r1, #3
 800283a:	2001      	movs	r0, #1
 800283c:	f7ff fcba 	bl	80021b4 <LED_off>
				LED_on(PORTB, PIN4);//cooling elemnt
 8002840:	2104      	movs	r1, #4
 8002842:	2001      	movs	r0, #1
 8002844:	f7ff fca4 	bl	8002190 <LED_on>
			if(indicator>level3){
 8002848:	e0a2      	b.n	8002990 <main+0x330>

			}else if (indicator==level3){
 800284a:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <main+0x2a4>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b02      	cmp	r3, #2
 8002850:	f040 809e 	bne.w	8002990 <main+0x330>
				//send stble state
				LED_off(PORTB, PIN3);//heating element
 8002854:	2103      	movs	r1, #3
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff fcac 	bl	80021b4 <LED_off>
				LED_off(PORTB, PIN4);//cooling elemnt
 800285c:	2104      	movs	r1, #4
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff fca8 	bl	80021b4 <LED_off>
				SPI_voidSend('3');
 8002864:	2033      	movs	r0, #51	; 0x33
 8002866:	f7ff fc63 	bl	8002130 <SPI_voidSend>
			if(indicator>level3){
 800286a:	e091      	b.n	8002990 <main+0x330>
			}


		}else if (temperature>60 &&temperature<80) //level 4
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <main+0x298>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4926      	ldr	r1, [pc, #152]	; (800290c <main+0x2ac>)
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe f906 	bl	8000a84 <__aeabi_fcmpgt>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04a      	beq.n	8002914 <main+0x2b4>
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <main+0x298>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4923      	ldr	r1, [pc, #140]	; (8002910 <main+0x2b0>)
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe f8df 	bl	8000a48 <__aeabi_fcmplt>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d041      	beq.n	8002914 <main+0x2b4>
		{
			if(indicator>level4){
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <main+0x2a4>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d908      	bls.n	80028aa <main+0x24a>
				//####################work heting element
				LED_on(PORTB, PIN3);//heating element
 8002898:	2103      	movs	r1, #3
 800289a:	2001      	movs	r0, #1
 800289c:	f7ff fc78 	bl	8002190 <LED_on>
				LED_off(PORTB, PIN4);//cooling elemnt
 80028a0:	2104      	movs	r1, #4
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7ff fc86 	bl	80021b4 <LED_off>
			if(indicator>level4){
 80028a8:	e074      	b.n	8002994 <main+0x334>
			}else if(indicator<level4){
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <main+0x2a4>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d808      	bhi.n	80028c4 <main+0x264>
				//######################## work cooling element
				LED_off(PORTB, PIN3);//heating element
 80028b2:	2103      	movs	r1, #3
 80028b4:	2001      	movs	r0, #1
 80028b6:	f7ff fc7d 	bl	80021b4 <LED_off>
				LED_on(PORTB, PIN4);//cooling elemnt
 80028ba:	2104      	movs	r1, #4
 80028bc:	2001      	movs	r0, #1
 80028be:	f7ff fc67 	bl	8002190 <LED_on>
			if(indicator>level4){
 80028c2:	e067      	b.n	8002994 <main+0x334>

			}else if (indicator==level4){
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <main+0x2a4>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d163      	bne.n	8002994 <main+0x334>
				//send stble state
				LED_off(PORTB, PIN3);//heating element
 80028cc:	2103      	movs	r1, #3
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7ff fc70 	bl	80021b4 <LED_off>
				LED_off(PORTB, PIN4);//cooling elemnt
 80028d4:	2104      	movs	r1, #4
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7ff fc6c 	bl	80021b4 <LED_off>
				SPI_voidSend('4');
 80028dc:	2034      	movs	r0, #52	; 0x34
 80028de:	f7ff fc27 	bl	8002130 <SPI_voidSend>
			if(indicator>level4){
 80028e2:	e057      	b.n	8002994 <main+0x334>
 80028e4:	f3af 8000 	nop.w
 80028e8:	cccccccd 	.word	0xcccccccd
 80028ec:	4043cccc 	.word	0x4043cccc
 80028f0:	40012400 	.word	0x40012400
 80028f4:	20000068 	.word	0x20000068
 80028f8:	2000006c 	.word	0x2000006c
 80028fc:	2000006a 	.word	0x2000006a
 8002900:	41a00000 	.word	0x41a00000
 8002904:	20000070 	.word	0x20000070
 8002908:	42200000 	.word	0x42200000
 800290c:	42700000 	.word	0x42700000
 8002910:	42a00000 	.word	0x42a00000
			}
		}else if (temperature>80 &&temperature<100) //level 5
 8002914:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <main+0x3f4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	494f      	ldr	r1, [pc, #316]	; (8002a58 <main+0x3f8>)
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f8b2 	bl	8000a84 <__aeabi_fcmpgt>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d037      	beq.n	8002996 <main+0x336>
 8002926:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <main+0x3f4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	494c      	ldr	r1, [pc, #304]	; (8002a5c <main+0x3fc>)
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f88b 	bl	8000a48 <__aeabi_fcmplt>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d02e      	beq.n	8002996 <main+0x336>
		{

			if(indicator>level5){
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <main+0x400>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d908      	bls.n	8002952 <main+0x2f2>
				//####################work heting element
				LED_on(PORTB, PIN3);//heating element
 8002940:	2103      	movs	r1, #3
 8002942:	2001      	movs	r0, #1
 8002944:	f7ff fc24 	bl	8002190 <LED_on>
				LED_off(PORTB, PIN4);//cooling elemnt
 8002948:	2104      	movs	r1, #4
 800294a:	2001      	movs	r0, #1
 800294c:	f7ff fc32 	bl	80021b4 <LED_off>
 8002950:	e021      	b.n	8002996 <main+0x336>
			}else if(indicator<level5){
 8002952:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <main+0x400>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d808      	bhi.n	800296c <main+0x30c>
				//######################## work cooling element
				LED_off(PORTB, PIN3);//heating element
 800295a:	2103      	movs	r1, #3
 800295c:	2001      	movs	r0, #1
 800295e:	f7ff fc29 	bl	80021b4 <LED_off>
				LED_on(PORTB, PIN4);//cooling elemnt
 8002962:	2104      	movs	r1, #4
 8002964:	2001      	movs	r0, #1
 8002966:	f7ff fc13 	bl	8002190 <LED_on>
 800296a:	e014      	b.n	8002996 <main+0x336>
			}else if (indicator==level5){
 800296c:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <main+0x400>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d110      	bne.n	8002996 <main+0x336>
				//send stble state
				LED_off(PORTB, PIN3);//heating element
 8002974:	2103      	movs	r1, #3
 8002976:	2001      	movs	r0, #1
 8002978:	f7ff fc1c 	bl	80021b4 <LED_off>
				LED_off(PORTB, PIN4);//cooling elemnt
 800297c:	2104      	movs	r1, #4
 800297e:	2001      	movs	r0, #1
 8002980:	f7ff fc18 	bl	80021b4 <LED_off>
				SPI_voidSend('5');
 8002984:	2035      	movs	r0, #53	; 0x35
 8002986:	f7ff fbd3 	bl	8002130 <SPI_voidSend>
 800298a:	e004      	b.n	8002996 <main+0x336>
			if(indicator>level2){
 800298c:	bf00      	nop
 800298e:	e002      	b.n	8002996 <main+0x336>
			if(indicator>level3){
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <main+0x336>
			if(indicator>level4){
 8002994:	bf00      	nop
		}
		//######################################################################
		//#######################water level checking#############################3


				if(DIO_u8GetPinValue(PORTA,PIN12)==1)//level 3 // buzzer off //full tnk
 8002996:	210c      	movs	r1, #12
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe fb49 	bl	8001030 <DIO_u8GetPinValue>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10f      	bne.n	80029c4 <main+0x364>
				{
					//full tank
					LED_off(PORTA, PIN11);
 80029a4:	210b      	movs	r1, #11
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7ff fc04 	bl	80021b4 <LED_off>
					LED_off(PORTB, PIN5);
 80029ac:	2105      	movs	r1, #5
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7ff fc00 	bl	80021b4 <LED_off>
					Buzzer_off(PORTB,PIN0);
 80029b4:	2100      	movs	r1, #0
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff fc71 	bl	800229e <Buzzer_off>
					SPI_voidSend('f');
 80029bc:	2066      	movs	r0, #102	; 0x66
 80029be:	f7ff fbb7 	bl	8002130 <SPI_voidSend>
 80029c2:	e66b      	b.n	800269c <main+0x3c>

				}else if(DIO_u8GetPinValue(PORTA,PIN8)==1)//level 2 //water level medium
 80029c4:	2108      	movs	r1, #8
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe fb32 	bl	8001030 <DIO_u8GetPinValue>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d114      	bne.n	80029fc <main+0x39c>
				{
					//medium tank sate
					LED_on(PORTA, PIN11);//medium tank led
 80029d2:	210b      	movs	r1, #11
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7ff fbdb 	bl	8002190 <LED_on>
					LED_off(PORTB, PIN5);
 80029da:	2105      	movs	r1, #5
 80029dc:	2001      	movs	r0, #1
 80029de:	f7ff fbe9 	bl	80021b4 <LED_off>
					Buzzer_off(PORTB,PIN0);
 80029e2:	2100      	movs	r1, #0
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7ff fc5a 	bl	800229e <Buzzer_off>
					SPI_voidSend('m');
 80029ea:	206d      	movs	r0, #109	; 0x6d
 80029ec:	f7ff fba0 	bl	8002130 <SPI_voidSend>
					DIO_voidSetPinValue(PORTA, PIN8, GPIO_LOW);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2108      	movs	r1, #8
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fe fa75 	bl	8000ee4 <DIO_voidSetPinValue>
 80029fa:	e64f      	b.n	800269c <main+0x3c>
				}else if(DIO_u8GetPinValue(PORTA,PIN3)==1)//level 1 //water level very low
 80029fc:	2103      	movs	r1, #3
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7fe fb16 	bl	8001030 <DIO_u8GetPinValue>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d114      	bne.n	8002a34 <main+0x3d4>
				{
					//very low tank state
					LED_on(PORTA, PIN11);//medium tank led
 8002a0a:	210b      	movs	r1, #11
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff fbbf 	bl	8002190 <LED_on>
					LED_on(PORTB, PIN5);// low tank led
 8002a12:	2105      	movs	r1, #5
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7ff fbbb 	bl	8002190 <LED_on>
					Buzzer_off(PORTB,PIN0);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7ff fc3e 	bl	800229e <Buzzer_off>
					SPI_voidSend('l');
 8002a22:	206c      	movs	r0, #108	; 0x6c
 8002a24:	f7ff fb84 	bl	8002130 <SPI_voidSend>
					DIO_voidSetPinValue(PORTA, PIN3, GPIO_LOW);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2103      	movs	r1, #3
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe fa59 	bl	8000ee4 <DIO_voidSetPinValue>
 8002a32:	e633      	b.n	800269c <main+0x3c>
				}else{
					//emty tank state
					LED_toogle(PORTA, PIN11);//medium tank led
 8002a34:	210b      	movs	r1, #11
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7ff fbce 	bl	80021d8 <LED_toogle>
					LED_toogle(PORTB, PIN5);// low tank led
 8002a3c:	2105      	movs	r1, #5
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7ff fbca 	bl	80021d8 <LED_toogle>
					Buzzer_on(PORTB,PIN0);
 8002a44:	2100      	movs	r1, #0
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7ff fc17 	bl	800227a <Buzzer_on>
					SPI_voidSend('v');
 8002a4c:	2076      	movs	r0, #118	; 0x76
 8002a4e:	f7ff fb6f 	bl	8002130 <SPI_voidSend>
		DIO_voidSetPinValue(PORTA, PIN12, GPIO_LOW);
 8002a52:	e623      	b.n	800269c <main+0x3c>
 8002a54:	2000006c 	.word	0x2000006c
 8002a58:	42a00000 	.word	0x42a00000
 8002a5c:	42c80000 	.word	0x42c80000
 8002a60:	20000070 	.word	0x20000070

08002a64 <calibration_ISR>:

	}

}

void calibration_ISR(void){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0

	LED_off(PORTC, PIN13);
 8002a68:	210d      	movs	r1, #13
 8002a6a:	2002      	movs	r0, #2
 8002a6c:	f7ff fba2 	bl	80021b4 <LED_off>
	_delay_ms(100);
 8002a70:	2064      	movs	r0, #100	; 0x64
 8002a72:	f7fe f831 	bl	8000ad8 <_delay_ms>
	LED_on(PORTC, PIN13);
 8002a76:	210d      	movs	r1, #13
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f7ff fb89 	bl	8002190 <LED_on>

	if(temperature<20)//level1
 8002a7e:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <calibration_ISR+0xec>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4934      	ldr	r1, [pc, #208]	; (8002b54 <calibration_ISR+0xf0>)
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd ffdf 	bl	8000a48 <__aeabi_fcmplt>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <calibration_ISR+0x34>
	{
		indicator = level1;
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <calibration_ISR+0xf4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
	}else if (temperature>80 &&temperature<100) //level 5
	{
		indicator = level5;
	}

}
 8002a96:	e059      	b.n	8002b4c <calibration_ISR+0xe8>
	}else if (temperature>20 &&temperature<40) //level 2
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <calibration_ISR+0xec>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	492d      	ldr	r1, [pc, #180]	; (8002b54 <calibration_ISR+0xf0>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fff0 	bl	8000a84 <__aeabi_fcmpgt>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <calibration_ISR+0x60>
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <calibration_ISR+0xec>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	492b      	ldr	r1, [pc, #172]	; (8002b5c <calibration_ISR+0xf8>)
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd ffc9 	bl	8000a48 <__aeabi_fcmplt>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <calibration_ISR+0x60>
		indicator = level2;
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <calibration_ISR+0xf4>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e043      	b.n	8002b4c <calibration_ISR+0xe8>
	}else if (temperature>40 &&temperature<60) //level 3
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <calibration_ISR+0xec>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4924      	ldr	r1, [pc, #144]	; (8002b5c <calibration_ISR+0xf8>)
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd ffda 	bl	8000a84 <__aeabi_fcmpgt>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00c      	beq.n	8002af0 <calibration_ISR+0x8c>
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <calibration_ISR+0xec>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4921      	ldr	r1, [pc, #132]	; (8002b60 <calibration_ISR+0xfc>)
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd ffb3 	bl	8000a48 <__aeabi_fcmplt>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <calibration_ISR+0x8c>
		indicator = level3;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <calibration_ISR+0xf4>)
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e02d      	b.n	8002b4c <calibration_ISR+0xe8>
	}else if (temperature>60 &&temperature<80) //level 4
 8002af0:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <calibration_ISR+0xec>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	491a      	ldr	r1, [pc, #104]	; (8002b60 <calibration_ISR+0xfc>)
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd ffc4 	bl	8000a84 <__aeabi_fcmpgt>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <calibration_ISR+0xb8>
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <calibration_ISR+0xec>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4917      	ldr	r1, [pc, #92]	; (8002b64 <calibration_ISR+0x100>)
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd ff9d 	bl	8000a48 <__aeabi_fcmplt>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <calibration_ISR+0xb8>
		indicator = level4;
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <calibration_ISR+0xf4>)
 8002b16:	2203      	movs	r2, #3
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	e017      	b.n	8002b4c <calibration_ISR+0xe8>
	}else if (temperature>80 &&temperature<100) //level 5
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <calibration_ISR+0xec>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4910      	ldr	r1, [pc, #64]	; (8002b64 <calibration_ISR+0x100>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd ffae 	bl	8000a84 <__aeabi_fcmpgt>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d100      	bne.n	8002b30 <calibration_ISR+0xcc>
}
 8002b2e:	e00d      	b.n	8002b4c <calibration_ISR+0xe8>
	}else if (temperature>80 &&temperature<100) //level 5
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <calibration_ISR+0xec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <calibration_ISR+0x104>)
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd ff86 	bl	8000a48 <__aeabi_fcmplt>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d100      	bne.n	8002b44 <calibration_ISR+0xe0>
}
 8002b42:	e003      	b.n	8002b4c <calibration_ISR+0xe8>
		indicator = level5;
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <calibration_ISR+0xf4>)
 8002b46:	2204      	movs	r2, #4
 8002b48:	701a      	strb	r2, [r3, #0]
}
 8002b4a:	e7ff      	b.n	8002b4c <calibration_ISR+0xe8>
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	2000006c 	.word	0x2000006c
 8002b54:	41a00000 	.word	0x41a00000
 8002b58:	20000070 	.word	0x20000070
 8002b5c:	42200000 	.word	0x42200000
 8002b60:	42700000 	.word	0x42700000
 8002b64:	42a00000 	.word	0x42a00000
 8002b68:	42c80000 	.word	0x42c80000

08002b6c <Button_up_ISR>:

void Button_up_ISR(void){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0

	LED_off(PORTC, PIN13);
 8002b70:	210d      	movs	r1, #13
 8002b72:	2002      	movs	r0, #2
 8002b74:	f7ff fb1e 	bl	80021b4 <LED_off>
	_delay_ms(100);
 8002b78:	2064      	movs	r0, #100	; 0x64
 8002b7a:	f7fd ffad 	bl	8000ad8 <_delay_ms>
	LED_on(PORTC, PIN13);
 8002b7e:	210d      	movs	r1, #13
 8002b80:	2002      	movs	r0, #2
 8002b82:	f7ff fb05 	bl	8002190 <LED_on>
	if(indicator !=4){
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <Button_up_ISR+0x34>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d005      	beq.n	8002b9a <Button_up_ISR+0x2e>
		indicator++;
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <Button_up_ISR+0x34>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <Button_up_ISR+0x34>)
 8002b98:	701a      	strb	r2, [r3, #0]
	}


}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000070 	.word	0x20000070

08002ba4 <Button_down_ISR>:
void Button_down_ISR(void){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0

	LED_off(PORTC, PIN13);
 8002ba8:	210d      	movs	r1, #13
 8002baa:	2002      	movs	r0, #2
 8002bac:	f7ff fb02 	bl	80021b4 <LED_off>
	_delay_ms(100);
 8002bb0:	2064      	movs	r0, #100	; 0x64
 8002bb2:	f7fd ff91 	bl	8000ad8 <_delay_ms>
	LED_on(PORTC, PIN13);
 8002bb6:	210d      	movs	r1, #13
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f7ff fae9 	bl	8002190 <LED_on>
	if(indicator !=0){
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <Button_down_ISR+0x34>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <Button_down_ISR+0x2e>
		indicator--;
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <Button_down_ISR+0x34>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <Button_down_ISR+0x34>)
 8002bd0:	701a      	strb	r2, [r3, #0]
	}
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000070 	.word	0x20000070

08002bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bdc:	480d      	ldr	r0, [pc, #52]	; (8002c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002be0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be4:	480c      	ldr	r0, [pc, #48]	; (8002c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002be6:	490d      	ldr	r1, [pc, #52]	; (8002c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <LoopForever+0xe>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bec:	e002      	b.n	8002bf4 <LoopCopyDataInit>

08002bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf2:	3304      	adds	r3, #4

08002bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf8:	d3f9      	bcc.n	8002bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	; (8002c28 <LoopForever+0x16>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c00:	e001      	b.n	8002c06 <LoopFillZerobss>

08002c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c04:	3204      	adds	r2, #4

08002c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c08:	d3fb      	bcc.n	8002c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c0a:	f000 f811 	bl	8002c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c0e:	f7ff fd27 	bl	8002660 <main>

08002c12 <LoopForever>:

LoopForever:
  b LoopForever
 8002c12:	e7fe      	b.n	8002c12 <LoopForever>
  ldr   r0, =_estack
 8002c14:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002c20:	08002c98 	.word	0x08002c98
  ldr r2, =_sbss
 8002c24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002c28:	20000074 	.word	0x20000074

08002c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c2c:	e7fe      	b.n	8002c2c <ADC1_2_IRQHandler>
	...

08002c30 <__libc_init_array>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	2600      	movs	r6, #0
 8002c34:	4d0c      	ldr	r5, [pc, #48]	; (8002c68 <__libc_init_array+0x38>)
 8002c36:	4c0d      	ldr	r4, [pc, #52]	; (8002c6c <__libc_init_array+0x3c>)
 8002c38:	1b64      	subs	r4, r4, r5
 8002c3a:	10a4      	asrs	r4, r4, #2
 8002c3c:	42a6      	cmp	r6, r4
 8002c3e:	d109      	bne.n	8002c54 <__libc_init_array+0x24>
 8002c40:	f000 f81a 	bl	8002c78 <_init>
 8002c44:	2600      	movs	r6, #0
 8002c46:	4d0a      	ldr	r5, [pc, #40]	; (8002c70 <__libc_init_array+0x40>)
 8002c48:	4c0a      	ldr	r4, [pc, #40]	; (8002c74 <__libc_init_array+0x44>)
 8002c4a:	1b64      	subs	r4, r4, r5
 8002c4c:	10a4      	asrs	r4, r4, #2
 8002c4e:	42a6      	cmp	r6, r4
 8002c50:	d105      	bne.n	8002c5e <__libc_init_array+0x2e>
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c58:	4798      	blx	r3
 8002c5a:	3601      	adds	r6, #1
 8002c5c:	e7ee      	b.n	8002c3c <__libc_init_array+0xc>
 8002c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c62:	4798      	blx	r3
 8002c64:	3601      	adds	r6, #1
 8002c66:	e7f2      	b.n	8002c4e <__libc_init_array+0x1e>
 8002c68:	08002c90 	.word	0x08002c90
 8002c6c:	08002c90 	.word	0x08002c90
 8002c70:	08002c90 	.word	0x08002c90
 8002c74:	08002c94 	.word	0x08002c94

08002c78 <_init>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr

08002c84 <_fini>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr
