#include	"Std_Types.h"
#include	"Bit_Math.h"

#include	"RCC_interface.h"
#include	"RCC_private.h"
#include	"RCC_config.h"

void		RCC_voidSysClkInt(void)
{
	
	// SET Configurations
	RCC_CFGR = RCC_CFGR | SW;
	while (!((SW) == (RCC_CFGR & SW)));
	RCC_CFGR = RCC_CFGR | HPRE;
	RCC_CFGR = RCC_CFGR | PPRE1;
	RCC_CFGR = RCC_CFGR | PPRE2;
	RCC_CFGR = RCC_CFGR | ADCPRE;
    RCC_CFGR = RCC_CFGR | PLLSRC;
    RCC_CFGR = RCC_CFGR | PLLXTPRE;
    RCC_CFGR = RCC_CFGR | PLLMUL;
    RCC_CFGR = RCC_CFGR | USBPRE;
    RCC_CFGR = RCC_CFGR | MCO;
	
	//Select Source of clock
#if (CLK_Sourc == RCC_HSI)
    SET_BIT(RCC_CR,HSION);
	while(!HSIRDY);
#elif (CLK_Sourc == RCC_HSE)
	SET_BIT(RCC_CR,HSEON);
	while(!HSERDY);
#elif  (CLK_Sourc == RCC_PLL_HSI)
	SET_BIT(RCC_CR,HSION);
	while(!HSIRDY);
	SET_BIT(RCC_CR,PLLON);
	while(!PLLRDY);
#elif  (CLK_Sourc == RCC_PLL_HSE)
	SET_BIT(RCC_CR,HSEON);
	while(!HSERDY);
	SET_BIT(RCC_CR,HSEBYP);
	SET_BIT(RCC_CR,PLLON);
	while(!PLLRDY);
#else
	#error "Wrong selection of RCC"
#endif
}

void		RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
	/*		Range Check							*/
	if(PerId < 32)
	{
		switch(BusId)
		{
			case	RCC_AHB		:	SET_BIT(RCC_AHBENR,PerId) ;	break;
			case	RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);	break;
			case	RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);	break;
		}
		
	}
	else{	/*	Return Error "Out Of The Range"		*/	}
	
}
void		RCC_voidDisablePerClk(u8 BusId , u8 PerId)
{
	/*		Range Check							*/
	if(PerId < 32)
	{
		switch(BusId)
		{
			case	RCC_AHB		:	CLR_BIT(RCC_AHBENR,PerId) ;	break;
			case	RCC_APB1	:	CLR_BIT(RCC_APB1ENR,PerId);	break;
			case	RCC_APB2	:	CLR_BIT(RCC_APB2ENR,PerId);	break;
		}
		
	}
	else{	/*	Return Error "Out Of The Range"		*/	}	
}
