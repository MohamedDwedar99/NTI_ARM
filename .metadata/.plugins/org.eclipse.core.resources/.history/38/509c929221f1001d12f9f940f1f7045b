/*
 * ADC_program.c
 *
 *  Created on: May 10, 2023
 *      Author: es-MohamedHAbdelAziz
 */

#include "Std_Types.h"
#include "Bit_Math.h"

#include "ADC_config.h"
#include "ADC_private.h"
#include "ADC_interface.h"


#define CHANNEL_0 0
#define CHANNEL_1 1
#define CHANNEL_2 2
#define CHANNEL_3 3
#define CHANNEL_4 4
#define CHANNEL_5 5
#define CHANNEL_6 6
#define CHANNEL_7 7
#define CHANNEL_8 8
#define CHANNEL_9 9





void ADC_voidInit(void)
{
	// Enable Scan Mode
	ADC1 -> CR1   |= (1 << SCAN);
	// Continous mode, Enable Temp
	ADC1 -> CR2 |=  (1 << ADON);
	//ADC1 -> CR2 |=  (1 << CONT);
	ADC1 -> CR2 |=  (1 << CAL);
	ADC1 -> CR2 |=   0b111 << 17;
	ADC1 -> CR2 &= ~(1 << ALIGN);

}

void   ADC_u16_read(u32 channed)
{
	//	u32 Local_u32Reading;   //	ADC->DR &= 0x00000000;
// Set Channel
if(channed <= CHANNEL_9)
{

	//ADC->SQR3 &= 0xfffffff0; // Clear 0 -> 4 bits
	//ADC->SQR3 |= Copy_enuChannel;
	CLR_BIT(ADC1->SQR3 , 0);
	CLR_BIT(ADC1->SQR3 , 1);
	CLR_BIT(ADC1->SQR3 , 2);
	CLR_BIT(ADC1->SQR3 , 3);
	CLR_BIT(ADC1->SQR3 , 4);

}
// Set Single conversion mode -> CONT -> 0
CLR_BIT(ADC->CR2 , 1);
// Start conversion of regular channels -> SWSTART -> 1
SET_BIT(ADC->CR2 , 22);
// Wait until the end of conversion -> SWSTART -> 0
//while(GET_BIT(ADC->CR2 , 22) == 1);

while(GET_BIT(ADC->SR , 1) != 1);

/*
    	// Start conversion of regular channels -> SWSTART -> 1
    	SET_BIT(ADC->CR2 , 0);
    	// Wait until the end of conversion -> SWSTART -> 0
    	while(GET_BIT(ADC->SR , 1) != 1);
    */
// Get data -> 0 -> 15
//	Local_u32Reading = (ADC->DR) & 0x0000ffff;
// Return Data
return ADC->DR;
}
