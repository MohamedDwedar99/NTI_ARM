
NTI_Layerd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000674  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007a4  080007ac  000107ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007a4  080007a4  000107ac  2**0
                  CONTENTS
  4 .ARM          00000000  080007a4  080007a4  000107ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a4  080007ac  000107ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a4  080007a4  000107a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007a8  080007a8  000107a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007ac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007ac  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008b1  00000000  00000000  000107d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c2  00000000  00000000  00011086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00011548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  000116c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000745  00000000  00000000  000117d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000cab  00000000  00000000  00011f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004287  00000000  00000000  00012bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00016e47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000404  00000000  00000000  00016e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800078c 	.word	0x0800078c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800078c 	.word	0x0800078c

08000170 <RCC_voidSysClkInt>:
#include	"RCC_interface.h"
#include	"RCC_private.h"
#include	"RCC_config.h"

void		RCC_voidSysClkInt(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	
	// SET Configurations
	RCC_CFGR = RCC_CFGR | SW;
 8000174:	4b20      	ldr	r3, [pc, #128]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a1f      	ldr	r2, [pc, #124]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 800017a:	f043 0302 	orr.w	r3, r3, #2
 800017e:	6013      	str	r3, [r2, #0]
	while (!((SW) == (RCC_CFGR & SW)));
 8000180:	bf00      	nop
 8000182:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f003 0302 	and.w	r3, r3, #2
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <RCC_voidSysClkInt+0x12>
	RCC_CFGR = RCC_CFGR | HPRE;
 800018e:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000190:	4a19      	ldr	r2, [pc, #100]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | PPRE1;
 8000196:	4b18      	ldr	r3, [pc, #96]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000198:	4a17      	ldr	r2, [pc, #92]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | PPRE2;
 800019e:	4b16      	ldr	r3, [pc, #88]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a0:	4a15      	ldr	r2, [pc, #84]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | ADCPRE;
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a8:	4a13      	ldr	r2, [pc, #76]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLSRC;
 80001ae:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b0:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLXTPRE;
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a0f      	ldr	r2, [pc, #60]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001c0:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLMUL;
 80001c2:	4b0d      	ldr	r3, [pc, #52]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a0c      	ldr	r2, [pc, #48]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001c8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80001cc:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | USBPRE;
 80001ce:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a09      	ldr	r2, [pc, #36]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001d8:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | MCO;
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6013      	str	r3, [r2, #0]
	
	//Select Source of clock
#if (CLK_Sourc == RCC_HSI)
    SET_BIT(RCC_CR,HSION);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <RCC_voidSysClkInt+0x8c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a05      	ldr	r2, [pc, #20]	; (80001fc <RCC_voidSysClkInt+0x8c>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6013      	str	r3, [r2, #0]
	while(!HSIRDY);
 80001ee:	bf00      	nop
	SET_BIT(RCC_CR,PLLON);
	while(!PLLRDY);
#else
	#error "Wrong selection of RCC"
#endif
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40021004 	.word	0x40021004
 80001fc:	40021000 	.word	0x40021000

08000200 <RCC_voidEnablePerClk>:

void		RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	/*		Range Check							*/
	if(PerId < 32)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b1f      	cmp	r3, #31
 8000214:	d82a      	bhi.n	800026c <RCC_voidEnablePerClk+0x6c>
	{
		switch(BusId)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b02      	cmp	r3, #2
 800021a:	d01c      	beq.n	8000256 <RCC_voidEnablePerClk+0x56>
 800021c:	2b02      	cmp	r3, #2
 800021e:	dc25      	bgt.n	800026c <RCC_voidEnablePerClk+0x6c>
 8000220:	2b00      	cmp	r3, #0
 8000222:	d002      	beq.n	800022a <RCC_voidEnablePerClk+0x2a>
 8000224:	2b01      	cmp	r3, #1
 8000226:	d00b      	beq.n	8000240 <RCC_voidEnablePerClk+0x40>
		}
		
	}
	else{	/*	Return Error "Out Of The Range"		*/	}
	
}
 8000228:	e020      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_AHB		:	SET_BIT(RCC_AHBENR,PerId) ;	break;
 800022a:	4b13      	ldr	r3, [pc, #76]	; (8000278 <RCC_voidEnablePerClk+0x78>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	79ba      	ldrb	r2, [r7, #6]
 8000230:	2101      	movs	r1, #1
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	4611      	mov	r1, r2
 8000238:	4a0f      	ldr	r2, [pc, #60]	; (8000278 <RCC_voidEnablePerClk+0x78>)
 800023a:	430b      	orrs	r3, r1
 800023c:	6013      	str	r3, [r2, #0]
 800023e:	e015      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);	break;
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <RCC_voidEnablePerClk+0x7c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	79ba      	ldrb	r2, [r7, #6]
 8000246:	2101      	movs	r1, #1
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <RCC_voidEnablePerClk+0x7c>)
 8000250:	430b      	orrs	r3, r1
 8000252:	6013      	str	r3, [r2, #0]
 8000254:	e00a      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);	break;
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <RCC_voidEnablePerClk+0x80>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	79ba      	ldrb	r2, [r7, #6]
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a06      	ldr	r2, [pc, #24]	; (8000280 <RCC_voidEnablePerClk+0x80>)
 8000266:	430b      	orrs	r3, r1
 8000268:	6013      	str	r3, [r2, #0]
 800026a:	bf00      	nop
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021014 	.word	0x40021014
 800027c:	4002101c 	.word	0x4002101c
 8000280:	40021018 	.word	0x40021018

08000284 <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 port, u8 PIN, u8 Direction)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	460b      	mov	r3, r1
 8000290:	71bb      	strb	r3, [r7, #6]
 8000292:	4613      	mov	r3, r2
 8000294:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && PIN < 16)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b02      	cmp	r3, #2
 800029a:	f200 80b3 	bhi.w	8000404 <DIO_voidSetPinDirection+0x180>
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	f200 80af 	bhi.w	8000404 <DIO_voidSetPinDirection+0x180>
	{
		if(PIN<8)	/*		Low	(PIN0:PIN7) CRL	*/
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	2b07      	cmp	r3, #7
 80002aa:	d852      	bhi.n	8000352 <DIO_voidSetPinDirection+0xce>
		{
			switch(port)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d037      	beq.n	8000322 <DIO_voidSetPinDirection+0x9e>
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	f300 80a6 	bgt.w	8000404 <DIO_voidSetPinDirection+0x180>
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <DIO_voidSetPinDirection+0x3e>
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d018      	beq.n	80002f2 <DIO_voidSetPinDirection+0x6e>
				break;
			}

		}
	}else{/*	Return Error	*/}
}
 80002c0:	e0a0      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRL &= ~((0b1111)<<(PIN * 4));
 80002c2:	4b53      	ldr	r3, [pc, #332]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79ba      	ldrb	r2, [r7, #6]
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	210f      	movs	r1, #15
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	43d2      	mvns	r2, r2
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a4e      	ldr	r2, [pc, #312]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002d6:	400b      	ands	r3, r1
 80002d8:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |=  ((Direction)<<(PIN * 4));
 80002da:	4b4d      	ldr	r3, [pc, #308]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	7979      	ldrb	r1, [r7, #5]
 80002e0:	79ba      	ldrb	r2, [r7, #6]
 80002e2:	0092      	lsls	r2, r2, #2
 80002e4:	fa01 f202 	lsl.w	r2, r1, r2
 80002e8:	4611      	mov	r1, r2
 80002ea:	4a49      	ldr	r2, [pc, #292]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002ec:	430b      	orrs	r3, r1
 80002ee:	6013      	str	r3, [r2, #0]
				break;
 80002f0:	e088      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRL &= ~((0b1111)<<(PIN * 4));
 80002f2:	4b48      	ldr	r3, [pc, #288]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a43      	ldr	r2, [pc, #268]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 8000306:	400b      	ands	r3, r1
 8000308:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |=  ((Direction)<<(PIN * 4));
 800030a:	4b42      	ldr	r3, [pc, #264]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	7979      	ldrb	r1, [r7, #5]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a3e      	ldr	r2, [pc, #248]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
				break;
 8000320:	e070      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRL &= ~((0b1111)<<(PIN * 4));
 8000322:	4b3d      	ldr	r3, [pc, #244]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	79ba      	ldrb	r2, [r7, #6]
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	4611      	mov	r1, r2
 8000334:	4a38      	ldr	r2, [pc, #224]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 8000336:	400b      	ands	r3, r1
 8000338:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |=  ((Direction)<<(PIN * 4));
 800033a:	4b37      	ldr	r3, [pc, #220]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	7979      	ldrb	r1, [r7, #5]
 8000340:	79ba      	ldrb	r2, [r7, #6]
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	4611      	mov	r1, r2
 800034a:	4a33      	ldr	r2, [pc, #204]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6013      	str	r3, [r2, #0]
				break;
 8000350:	e058      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
		}else if(PIN<16)	/*		Low	(PIN8:PIN15) CRL	*/
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	d854      	bhi.n	8000402 <DIO_voidSetPinDirection+0x17e>
			PIN -= 8;
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	3b08      	subs	r3, #8
 800035c:	71bb      	strb	r3, [r7, #6]
			switch(port)
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2b02      	cmp	r3, #2
 8000362:	d036      	beq.n	80003d2 <DIO_voidSetPinDirection+0x14e>
 8000364:	2b02      	cmp	r3, #2
 8000366:	dc4d      	bgt.n	8000404 <DIO_voidSetPinDirection+0x180>
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <DIO_voidSetPinDirection+0xee>
 800036c:	2b01      	cmp	r3, #1
 800036e:	d018      	beq.n	80003a2 <DIO_voidSetPinDirection+0x11e>
}
 8000370:	e048      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRH &= ~((0b1111)<<(PIN * 4));
 8000372:	4b2a      	ldr	r3, [pc, #168]	; (800041c <DIO_voidSetPinDirection+0x198>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	79ba      	ldrb	r2, [r7, #6]
 8000378:	0092      	lsls	r2, r2, #2
 800037a:	210f      	movs	r1, #15
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	43d2      	mvns	r2, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a25      	ldr	r2, [pc, #148]	; (800041c <DIO_voidSetPinDirection+0x198>)
 8000386:	400b      	ands	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |=  ((Direction)<<(PIN * 4));
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <DIO_voidSetPinDirection+0x198>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	7979      	ldrb	r1, [r7, #5]
 8000390:	79ba      	ldrb	r2, [r7, #6]
 8000392:	0092      	lsls	r2, r2, #2
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a20      	ldr	r2, [pc, #128]	; (800041c <DIO_voidSetPinDirection+0x198>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6013      	str	r3, [r2, #0]
				break;
 80003a0:	e030      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRH &= ~((0b1111)<<(PIN * 4));
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	79ba      	ldrb	r2, [r7, #6]
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	210f      	movs	r1, #15
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	43d2      	mvns	r2, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003b6:	400b      	ands	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |=  ((Direction)<<(PIN * 4));
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	7979      	ldrb	r1, [r7, #5]
 80003c0:	79ba      	ldrb	r2, [r7, #6]
 80003c2:	0092      	lsls	r2, r2, #2
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	6013      	str	r3, [r2, #0]
				break;
 80003d0:	e018      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRH &= ~((0b1111)<<(PIN * 4));
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	79ba      	ldrb	r2, [r7, #6]
 80003d8:	0092      	lsls	r2, r2, #2
 80003da:	210f      	movs	r1, #15
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003e6:	400b      	ands	r3, r1
 80003e8:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |=  ((Direction)<<(PIN * 4));
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	7979      	ldrb	r1, [r7, #5]
 80003f0:	79ba      	ldrb	r2, [r7, #6]
 80003f2:	0092      	lsls	r2, r2, #2
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003fc:	430b      	orrs	r3, r1
 80003fe:	6013      	str	r3, [r2, #0]
				break;
 8000400:	e000      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
		}
 8000402:	bf00      	nop
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00
 8000418:	40011000 	.word	0x40011000
 800041c:	40010804 	.word	0x40010804
 8000420:	40010c04 	.word	0x40010c04
 8000424:	40011004 	.word	0x40011004

08000428 <DIO_voidTogPinValue>:
}



void	DIO_voidTogPinValue(u8 port, u8 pin)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d82d      	bhi.n	800049a <DIO_voidTogPinValue+0x72>
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	2b0f      	cmp	r3, #15
 8000442:	d82a      	bhi.n	800049a <DIO_voidTogPinValue+0x72>
	{
		switch(port)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d01c      	beq.n	8000484 <DIO_voidTogPinValue+0x5c>
 800044a:	2b02      	cmp	r3, #2
 800044c:	dc26      	bgt.n	800049c <DIO_voidTogPinValue+0x74>
 800044e:	2b00      	cmp	r3, #0
 8000450:	d002      	beq.n	8000458 <DIO_voidTogPinValue+0x30>
 8000452:	2b01      	cmp	r3, #1
 8000454:	d00b      	beq.n	800046e <DIO_voidTogPinValue+0x46>
		case	PORTA	:	TOG_BIT(GPIOA_ODR,pin);	break;
		case	PORTB	:	TOG_BIT(GPIOB_ODR,pin);	break;
		case	PORTC	:	TOG_BIT(GPIOC_ODR,pin);	break;
		}
	}
}
 8000456:	e021      	b.n	800049c <DIO_voidTogPinValue+0x74>
		case	PORTA	:	TOG_BIT(GPIOA_ODR,pin);	break;
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <DIO_voidTogPinValue+0x80>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	79ba      	ldrb	r2, [r7, #6]
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f202 	lsl.w	r2, r1, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <DIO_voidTogPinValue+0x80>)
 8000468:	404b      	eors	r3, r1
 800046a:	6013      	str	r3, [r2, #0]
 800046c:	e016      	b.n	800049c <DIO_voidTogPinValue+0x74>
		case	PORTB	:	TOG_BIT(GPIOB_ODR,pin);	break;
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DIO_voidTogPinValue+0x84>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	79ba      	ldrb	r2, [r7, #6]
 8000474:	2101      	movs	r1, #1
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	4611      	mov	r1, r2
 800047c:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <DIO_voidTogPinValue+0x84>)
 800047e:	404b      	eors	r3, r1
 8000480:	6013      	str	r3, [r2, #0]
 8000482:	e00b      	b.n	800049c <DIO_voidTogPinValue+0x74>
		case	PORTC	:	TOG_BIT(GPIOC_ODR,pin);	break;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <DIO_voidTogPinValue+0x88>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	79ba      	ldrb	r2, [r7, #6]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	4611      	mov	r1, r2
 8000492:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <DIO_voidTogPinValue+0x88>)
 8000494:	404b      	eors	r3, r1
 8000496:	6013      	str	r3, [r2, #0]
 8000498:	e000      	b.n	800049c <DIO_voidTogPinValue+0x74>
	}
 800049a:	bf00      	nop
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	4001080c 	.word	0x4001080c
 80004ac:	40010c0c 	.word	0x40010c0c
 80004b0:	4001100c 	.word	0x4001100c

080004b4 <EXTI0_IRQHandler>:
		Fptr = EXTI0_CallBack;
	}
}

void	EXTI0_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,0);
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <EXTI0_IRQHandler+0x24>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <EXTI0_IRQHandler+0x24>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6153      	str	r3, [r2, #20]
	DIO_voidTogPinValue(PORTA, PIN5);
 80004c4:	2105      	movs	r1, #5
 80004c6:	2000      	movs	r0, #0
 80004c8:	f7ff ffae 	bl	8000428 <DIO_voidTogPinValue>
	_delay_ms(25);
 80004cc:	2019      	movs	r0, #25
 80004ce:	f000 f805 	bl	80004dc <_delay_ms>
	/*	Clear the Flag			*/
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40010400 	.word	0x40010400

080004dc <_delay_ms>:
#include "Bit_Math.h"
#include "Std_Types.h"


void	_delay_ms(u32 ticks)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	u32 i;
	for( i = 0; i < (ticks * 500) ; i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	e003      	b.n	80004f2 <_delay_ms+0x16>
	{
		asm("NOP");
 80004ea:	bf00      	nop
	for( i = 0; i < (ticks * 500) ; i++)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004f8:	fb02 f303 	mul.w	r3, r2, r3
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3f3      	bcc.n	80004ea <_delay_ms+0xe>
	}
}
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <Reset>:
#include "I2C_config.h"
#include "I2C_private.h"
#include "I2C_Interface.h"
void static Reset(void);
void static Reset(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	I2C1 -> CR1  |= (1 << CR1_SWRST);
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <Reset+0x24>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <Reset+0x24>)
 800051a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800051e:	6013      	str	r3, [r2, #0]
	CLR_BIT(I2C1 -> CR1, CR1_SWRST);
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <Reset+0x24>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a03      	ldr	r2, [pc, #12]	; (8000534 <Reset+0x24>)
 8000526:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40005400 	.word	0x40005400

08000538 <I2C1_voidMasterInit>:

void I2C1_voidMasterInit(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	// Reset I2C
	Reset();
 800053c:	f7ff ffe8 	bl	8000510 <Reset>
	// Select Frequency
	I2C1 -> CR2   |= (8  << CR2_FREQ);
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <I2C1_voidMasterInit+0x3c>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <I2C1_voidMasterInit+0x3c>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	6053      	str	r3, [r2, #4]
	I2C1 -> CCR   |= (40 << CCR_CCR);
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <I2C1_voidMasterInit+0x3c>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	4a08      	ldr	r2, [pc, #32]	; (8000574 <I2C1_voidMasterInit+0x3c>)
 8000552:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000556:	61d3      	str	r3, [r2, #28]
	I2C1 -> TRISE |= 9;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <I2C1_voidMasterInit+0x3c>)
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	4a05      	ldr	r2, [pc, #20]	; (8000574 <I2C1_voidMasterInit+0x3c>)
 800055e:	f043 0309 	orr.w	r3, r3, #9
 8000562:	6213      	str	r3, [r2, #32]
	// Enable I2C
	I2C1 -> CR1   |= (1 << CR1_PE);
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <I2C1_voidMasterInit+0x3c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a02      	ldr	r2, [pc, #8]	; (8000574 <I2C1_voidMasterInit+0x3c>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	6013      	str	r3, [r2, #0]
	// Enable Ack
	//I2C1 -> CR1   |= (1 << CR1_ACK);
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40005400 	.word	0x40005400

08000578 <I2C1_voidStart>:

void I2C1_voidStart(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	I2C1 -> CR1 |= (1 << CR1_START);
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <I2C1_voidStart+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <I2C1_voidStart+0x28>)
 8000582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000586:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(I2C1 -> SR1,SR1_SB));
 8000588:	bf00      	nop
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <I2C1_voidStart+0x28>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <I2C1_voidStart+0x12>
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40005400 	.word	0x40005400

080005a4 <I2C1_voidSendAddress>:

void I2C1_voidSendAddress(u8 address_copy)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	I2C1 -> DR  = (u32)address_copy;
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <I2C1_voidSendAddress+0x2c>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<<1)));
 80005b4:	bf00      	nop
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <I2C1_voidSendAddress+0x2c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <I2C1_voidSendAddress+0x12>
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40005400 	.word	0x40005400

080005d4 <I2C1_voidSendData>:

void I2C1_voidSendData(u8 data_copy)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	while(!GET_BIT(I2C1 -> SR1 ,SR1_TXE));
 80005de:	bf00      	nop
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <I2C1_voidSendData+0x3c>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	09db      	lsrs	r3, r3, #7
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f8      	beq.n	80005e0 <I2C1_voidSendData+0xc>
	I2C1 -> DR  = data_copy;
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <I2C1_voidSendData+0x3c>)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	6113      	str	r3, [r2, #16]
	while(!GET_BIT(I2C1 -> SR1,SR1_BTF));
 80005f4:	bf00      	nop
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <I2C1_voidSendData+0x3c>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	089b      	lsrs	r3, r3, #2
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0f8      	beq.n	80005f6 <I2C1_voidSendData+0x22>
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40005400 	.word	0x40005400

08000614 <I2C1_voidRecieveData>:

u8   I2C1_voidRecieveData(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
	u8 data = 0xff;
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	71fb      	strb	r3, [r7, #7]
	while(!GET_BIT(I2C1 -> SR1 ,SR1_RXEN));
 800061e:	bf00      	nop
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <I2C1_voidRecieveData+0x2c>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	099b      	lsrs	r3, r3, #6
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f8      	beq.n	8000620 <I2C1_voidRecieveData+0xc>
	data = I2C1 -> DR;
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <I2C1_voidRecieveData+0x2c>)
 8000630:	691b      	ldr	r3, [r3, #16]
 8000632:	71fb      	strb	r3, [r7, #7]
	return data;
 8000634:	79fb      	ldrb	r3, [r7, #7]
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	40005400 	.word	0x40005400

08000644 <I2C1_voidStop>:

void I2C1_voidStop(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	CLR_BIT(I2C1 -> CR1, CR1_STOP);
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <I2C1_voidStop+0x18>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <I2C1_voidStop+0x18>)
 800064e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40005400 	.word	0x40005400

08000660 <main>:
#include    "LED_interface.h"
#include    "SPI_interface.h"
#include    "I2C_Interface.h"

int main (void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
    RCC_voidSysClkInt();
 8000666:	f7ff fd83 	bl	8000170 <RCC_voidSysClkInt>
	RCC_voidEnablePerClk(RCC_APB2, 2);
 800066a:	2102      	movs	r1, #2
 800066c:	2002      	movs	r0, #2
 800066e:	f7ff fdc7 	bl	8000200 <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB2, 3);
 8000672:	2103      	movs	r1, #3
 8000674:	2002      	movs	r0, #2
 8000676:	f7ff fdc3 	bl	8000200 <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB2, 4);
 800067a:	2104      	movs	r1, #4
 800067c:	2002      	movs	r0, #2
 800067e:	f7ff fdbf 	bl	8000200 <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB2, 0);
 8000682:	2100      	movs	r1, #0
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff fdbb 	bl	8000200 <RCC_voidEnablePerClk>
	RCC_voidEnablePerClk(RCC_APB1, 21);
 800068a:	2115      	movs	r1, #21
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fdb7 	bl	8000200 <RCC_voidEnablePerClk>
	DIO_voidSetPinDirection(PORTB, PIN6, GPIO_OUTPUT_10MHZ_AFOD);
 8000692:	220d      	movs	r2, #13
 8000694:	2106      	movs	r1, #6
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff fdf4 	bl	8000284 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB, PIN7, GPIO_OUTPUT_10MHZ_AFOD);
 800069c:	220d      	movs	r2, #13
 800069e:	2107      	movs	r1, #7
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff fdef 	bl	8000284 <DIO_voidSetPinDirection>
	I2C1_voidMasterInit();
 80006a6:	f7ff ff47 	bl	8000538 <I2C1_voidMasterInit>
	// write A to eeprom
	I2C1_voidStart();
 80006aa:	f7ff ff65 	bl	8000578 <I2C1_voidStart>
	I2C1_voidSendAddress(10100100);
 80006ae:	2084      	movs	r0, #132	; 0x84
 80006b0:	f7ff ff78 	bl	80005a4 <I2C1_voidSendAddress>
	I2C1_voidSendAddress(00000001);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f7ff ff75 	bl	80005a4 <I2C1_voidSendAddress>
	I2C1_voidSendData('A');
 80006ba:	2041      	movs	r0, #65	; 0x41
 80006bc:	f7ff ff8a 	bl	80005d4 <I2C1_voidSendData>
	I2C1_voidStop();
 80006c0:	f7ff ffc0 	bl	8000644 <I2C1_voidStop>
	int readI2C = '\0';
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
	while (1)
	{
		//read from eeprom
		I2C1_voidStart();
 80006c8:	f7ff ff56 	bl	8000578 <I2C1_voidStart>
		I2C1_voidSendAddress(10100100);
 80006cc:	2084      	movs	r0, #132	; 0x84
 80006ce:	f7ff ff69 	bl	80005a4 <I2C1_voidSendAddress>
		I2C1_voidSendAddress(00000001);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff66 	bl	80005a4 <I2C1_voidSendAddress>
		I2C1_voidStart();
 80006d8:	f7ff ff4e 	bl	8000578 <I2C1_voidStart>
		I2C1_voidSendAddress(10100100);
 80006dc:	2084      	movs	r0, #132	; 0x84
 80006de:	f7ff ff61 	bl	80005a4 <I2C1_voidSendAddress>
		readI2C = I2C1_voidRecieveData();
 80006e2:	f7ff ff97 	bl	8000614 <I2C1_voidRecieveData>
 80006e6:	4603      	mov	r3, r0
 80006e8:	607b      	str	r3, [r7, #4]
		I2C1_voidStop();
 80006ea:	f7ff ffab 	bl	8000644 <I2C1_voidStop>
		I2C1_voidStart();
 80006ee:	e7eb      	b.n	80006c8 <main+0x68>

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopForever+0x16>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071e:	f000 f811 	bl	8000744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff ff9d 	bl	8000660 <main>

08000726 <LoopForever>:

LoopForever:
  b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000734:	080007ac 	.word	0x080007ac
  ldr r2, =_sbss
 8000738:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800073c:	2000001c 	.word	0x2000001c

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <__libc_init_array>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	2600      	movs	r6, #0
 8000748:	4d0c      	ldr	r5, [pc, #48]	; (800077c <__libc_init_array+0x38>)
 800074a:	4c0d      	ldr	r4, [pc, #52]	; (8000780 <__libc_init_array+0x3c>)
 800074c:	1b64      	subs	r4, r4, r5
 800074e:	10a4      	asrs	r4, r4, #2
 8000750:	42a6      	cmp	r6, r4
 8000752:	d109      	bne.n	8000768 <__libc_init_array+0x24>
 8000754:	f000 f81a 	bl	800078c <_init>
 8000758:	2600      	movs	r6, #0
 800075a:	4d0a      	ldr	r5, [pc, #40]	; (8000784 <__libc_init_array+0x40>)
 800075c:	4c0a      	ldr	r4, [pc, #40]	; (8000788 <__libc_init_array+0x44>)
 800075e:	1b64      	subs	r4, r4, r5
 8000760:	10a4      	asrs	r4, r4, #2
 8000762:	42a6      	cmp	r6, r4
 8000764:	d105      	bne.n	8000772 <__libc_init_array+0x2e>
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f855 3b04 	ldr.w	r3, [r5], #4
 800076c:	4798      	blx	r3
 800076e:	3601      	adds	r6, #1
 8000770:	e7ee      	b.n	8000750 <__libc_init_array+0xc>
 8000772:	f855 3b04 	ldr.w	r3, [r5], #4
 8000776:	4798      	blx	r3
 8000778:	3601      	adds	r6, #1
 800077a:	e7f2      	b.n	8000762 <__libc_init_array+0x1e>
 800077c:	080007a4 	.word	0x080007a4
 8000780:	080007a4 	.word	0x080007a4
 8000784:	080007a4 	.word	0x080007a4
 8000788:	080007a8 	.word	0x080007a8

0800078c <_init>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr

08000798 <_fini>:
 8000798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079a:	bf00      	nop
 800079c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079e:	bc08      	pop	{r3}
 80007a0:	469e      	mov	lr, r3
 80007a2:	4770      	bx	lr
