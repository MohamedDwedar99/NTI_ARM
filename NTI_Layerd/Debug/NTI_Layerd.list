
NTI_Layerd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000788  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008b8  080008c0  000108c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008b8  080008b8  000108c0  2**0
                  CONTENTS
  4 .ARM          00000000  080008b8  080008b8  000108c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008b8  080008c0  000108c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008b8  080008b8  000108b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008bc  080008bc  000108bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000000  080008c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080008c0  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000108c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d24  00000000  00000000  000108e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000702  00000000  00000000  0001160d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00011d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00011f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000693  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f21  00000000  00000000  0001274b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000420c  00000000  00000000  0001366c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00017878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000061c  00000000  00000000  000178c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080008a0 	.word	0x080008a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080008a0 	.word	0x080008a0

08000170 <RCC_voidSysClkInt>:
#include	"RCC_interface.h"
#include	"RCC_private.h"
#include	"RCC_config.h"

void		RCC_voidSysClkInt(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	
	// SET Configurations
	RCC_CFGR = RCC_CFGR | SW;
 8000174:	4b20      	ldr	r3, [pc, #128]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a1f      	ldr	r2, [pc, #124]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 800017a:	f043 0302 	orr.w	r3, r3, #2
 800017e:	6013      	str	r3, [r2, #0]
	while (!((SW) == (RCC_CFGR & SW)));
 8000180:	bf00      	nop
 8000182:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f003 0302 	and.w	r3, r3, #2
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <RCC_voidSysClkInt+0x12>
	RCC_CFGR = RCC_CFGR | HPRE;
 800018e:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000190:	4a19      	ldr	r2, [pc, #100]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | PPRE1;
 8000196:	4b18      	ldr	r3, [pc, #96]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000198:	4a17      	ldr	r2, [pc, #92]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | PPRE2;
 800019e:	4b16      	ldr	r3, [pc, #88]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a0:	4a15      	ldr	r2, [pc, #84]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | ADCPRE;
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a8:	4a13      	ldr	r2, [pc, #76]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLSRC;
 80001ae:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b0:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLXTPRE;
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a0f      	ldr	r2, [pc, #60]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001c0:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLMUL;
 80001c2:	4b0d      	ldr	r3, [pc, #52]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a0c      	ldr	r2, [pc, #48]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001c8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80001cc:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | USBPRE;
 80001ce:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a09      	ldr	r2, [pc, #36]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001d8:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | MCO;
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6013      	str	r3, [r2, #0]
	
	//Select Source of clock
#if (CLK_Sourc == RCC_HSI)
    SET_BIT(RCC_CR,HSION);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <RCC_voidSysClkInt+0x8c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a05      	ldr	r2, [pc, #20]	; (80001fc <RCC_voidSysClkInt+0x8c>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6013      	str	r3, [r2, #0]
	while(!HSIRDY);
 80001ee:	bf00      	nop
	SET_BIT(RCC_CR,PLLON);
	while(!PLLRDY);
#else
	#error "Wrong selection of RCC"
#endif
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40021004 	.word	0x40021004
 80001fc:	40021000 	.word	0x40021000

08000200 <RCC_voidEnablePerClk>:

void		RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	/*		Range Check							*/
	if(PerId < 32)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b1f      	cmp	r3, #31
 8000214:	d82a      	bhi.n	800026c <RCC_voidEnablePerClk+0x6c>
	{
		switch(BusId)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b02      	cmp	r3, #2
 800021a:	d01c      	beq.n	8000256 <RCC_voidEnablePerClk+0x56>
 800021c:	2b02      	cmp	r3, #2
 800021e:	dc25      	bgt.n	800026c <RCC_voidEnablePerClk+0x6c>
 8000220:	2b00      	cmp	r3, #0
 8000222:	d002      	beq.n	800022a <RCC_voidEnablePerClk+0x2a>
 8000224:	2b01      	cmp	r3, #1
 8000226:	d00b      	beq.n	8000240 <RCC_voidEnablePerClk+0x40>
		}
		
	}
	else{	/*	Return Error "Out Of The Range"		*/	}
	
}
 8000228:	e020      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_AHB		:	SET_BIT(RCC_AHBENR,PerId) ;	break;
 800022a:	4b13      	ldr	r3, [pc, #76]	; (8000278 <RCC_voidEnablePerClk+0x78>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	79ba      	ldrb	r2, [r7, #6]
 8000230:	2101      	movs	r1, #1
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	4611      	mov	r1, r2
 8000238:	4a0f      	ldr	r2, [pc, #60]	; (8000278 <RCC_voidEnablePerClk+0x78>)
 800023a:	430b      	orrs	r3, r1
 800023c:	6013      	str	r3, [r2, #0]
 800023e:	e015      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);	break;
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <RCC_voidEnablePerClk+0x7c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	79ba      	ldrb	r2, [r7, #6]
 8000246:	2101      	movs	r1, #1
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <RCC_voidEnablePerClk+0x7c>)
 8000250:	430b      	orrs	r3, r1
 8000252:	6013      	str	r3, [r2, #0]
 8000254:	e00a      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);	break;
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <RCC_voidEnablePerClk+0x80>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	79ba      	ldrb	r2, [r7, #6]
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a06      	ldr	r2, [pc, #24]	; (8000280 <RCC_voidEnablePerClk+0x80>)
 8000266:	430b      	orrs	r3, r1
 8000268:	6013      	str	r3, [r2, #0]
 800026a:	bf00      	nop
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021014 	.word	0x40021014
 800027c:	4002101c 	.word	0x4002101c
 8000280:	40021018 	.word	0x40021018

08000284 <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 port, u8 PIN, u8 Direction)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	460b      	mov	r3, r1
 8000290:	71bb      	strb	r3, [r7, #6]
 8000292:	4613      	mov	r3, r2
 8000294:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && PIN < 16)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b02      	cmp	r3, #2
 800029a:	f200 80b3 	bhi.w	8000404 <DIO_voidSetPinDirection+0x180>
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	f200 80af 	bhi.w	8000404 <DIO_voidSetPinDirection+0x180>
	{
		if(PIN<8)	/*		Low	(PIN0:PIN7) CRL	*/
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	2b07      	cmp	r3, #7
 80002aa:	d852      	bhi.n	8000352 <DIO_voidSetPinDirection+0xce>
		{
			switch(port)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d037      	beq.n	8000322 <DIO_voidSetPinDirection+0x9e>
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	f300 80a6 	bgt.w	8000404 <DIO_voidSetPinDirection+0x180>
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <DIO_voidSetPinDirection+0x3e>
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d018      	beq.n	80002f2 <DIO_voidSetPinDirection+0x6e>
				break;
			}

		}
	}else{/*	Return Error	*/}
}
 80002c0:	e0a0      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRL &= ~((0b1111)<<(PIN * 4));
 80002c2:	4b53      	ldr	r3, [pc, #332]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79ba      	ldrb	r2, [r7, #6]
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	210f      	movs	r1, #15
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	43d2      	mvns	r2, r2
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a4e      	ldr	r2, [pc, #312]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002d6:	400b      	ands	r3, r1
 80002d8:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |=  ((Direction)<<(PIN * 4));
 80002da:	4b4d      	ldr	r3, [pc, #308]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	7979      	ldrb	r1, [r7, #5]
 80002e0:	79ba      	ldrb	r2, [r7, #6]
 80002e2:	0092      	lsls	r2, r2, #2
 80002e4:	fa01 f202 	lsl.w	r2, r1, r2
 80002e8:	4611      	mov	r1, r2
 80002ea:	4a49      	ldr	r2, [pc, #292]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002ec:	430b      	orrs	r3, r1
 80002ee:	6013      	str	r3, [r2, #0]
				break;
 80002f0:	e088      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRL &= ~((0b1111)<<(PIN * 4));
 80002f2:	4b48      	ldr	r3, [pc, #288]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a43      	ldr	r2, [pc, #268]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 8000306:	400b      	ands	r3, r1
 8000308:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |=  ((Direction)<<(PIN * 4));
 800030a:	4b42      	ldr	r3, [pc, #264]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	7979      	ldrb	r1, [r7, #5]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a3e      	ldr	r2, [pc, #248]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
				break;
 8000320:	e070      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRL &= ~((0b1111)<<(PIN * 4));
 8000322:	4b3d      	ldr	r3, [pc, #244]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	79ba      	ldrb	r2, [r7, #6]
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	4611      	mov	r1, r2
 8000334:	4a38      	ldr	r2, [pc, #224]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 8000336:	400b      	ands	r3, r1
 8000338:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |=  ((Direction)<<(PIN * 4));
 800033a:	4b37      	ldr	r3, [pc, #220]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	7979      	ldrb	r1, [r7, #5]
 8000340:	79ba      	ldrb	r2, [r7, #6]
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	4611      	mov	r1, r2
 800034a:	4a33      	ldr	r2, [pc, #204]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6013      	str	r3, [r2, #0]
				break;
 8000350:	e058      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
		}else if(PIN<16)	/*		Low	(PIN8:PIN15) CRL	*/
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	d854      	bhi.n	8000402 <DIO_voidSetPinDirection+0x17e>
			PIN -= 8;
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	3b08      	subs	r3, #8
 800035c:	71bb      	strb	r3, [r7, #6]
			switch(port)
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2b02      	cmp	r3, #2
 8000362:	d036      	beq.n	80003d2 <DIO_voidSetPinDirection+0x14e>
 8000364:	2b02      	cmp	r3, #2
 8000366:	dc4d      	bgt.n	8000404 <DIO_voidSetPinDirection+0x180>
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <DIO_voidSetPinDirection+0xee>
 800036c:	2b01      	cmp	r3, #1
 800036e:	d018      	beq.n	80003a2 <DIO_voidSetPinDirection+0x11e>
}
 8000370:	e048      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRH &= ~((0b1111)<<(PIN * 4));
 8000372:	4b2a      	ldr	r3, [pc, #168]	; (800041c <DIO_voidSetPinDirection+0x198>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	79ba      	ldrb	r2, [r7, #6]
 8000378:	0092      	lsls	r2, r2, #2
 800037a:	210f      	movs	r1, #15
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	43d2      	mvns	r2, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a25      	ldr	r2, [pc, #148]	; (800041c <DIO_voidSetPinDirection+0x198>)
 8000386:	400b      	ands	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |=  ((Direction)<<(PIN * 4));
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <DIO_voidSetPinDirection+0x198>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	7979      	ldrb	r1, [r7, #5]
 8000390:	79ba      	ldrb	r2, [r7, #6]
 8000392:	0092      	lsls	r2, r2, #2
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a20      	ldr	r2, [pc, #128]	; (800041c <DIO_voidSetPinDirection+0x198>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6013      	str	r3, [r2, #0]
				break;
 80003a0:	e030      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRH &= ~((0b1111)<<(PIN * 4));
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	79ba      	ldrb	r2, [r7, #6]
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	210f      	movs	r1, #15
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	43d2      	mvns	r2, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003b6:	400b      	ands	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |=  ((Direction)<<(PIN * 4));
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	7979      	ldrb	r1, [r7, #5]
 80003c0:	79ba      	ldrb	r2, [r7, #6]
 80003c2:	0092      	lsls	r2, r2, #2
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	6013      	str	r3, [r2, #0]
				break;
 80003d0:	e018      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRH &= ~((0b1111)<<(PIN * 4));
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	79ba      	ldrb	r2, [r7, #6]
 80003d8:	0092      	lsls	r2, r2, #2
 80003da:	210f      	movs	r1, #15
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003e6:	400b      	ands	r3, r1
 80003e8:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |=  ((Direction)<<(PIN * 4));
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	7979      	ldrb	r1, [r7, #5]
 80003f0:	79ba      	ldrb	r2, [r7, #6]
 80003f2:	0092      	lsls	r2, r2, #2
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003fc:	430b      	orrs	r3, r1
 80003fe:	6013      	str	r3, [r2, #0]
				break;
 8000400:	e000      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
		}
 8000402:	bf00      	nop
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00
 8000418:	40011000 	.word	0x40011000
 800041c:	40010804 	.word	0x40010804
 8000420:	40010c04 	.word	0x40010c04
 8000424:	40011004 	.word	0x40011004

08000428 <DIO_voidTogPinValue>:
}



void	DIO_voidTogPinValue(u8 port, u8 pin)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d82d      	bhi.n	800049a <DIO_voidTogPinValue+0x72>
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	2b0f      	cmp	r3, #15
 8000442:	d82a      	bhi.n	800049a <DIO_voidTogPinValue+0x72>
	{
		switch(port)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d01c      	beq.n	8000484 <DIO_voidTogPinValue+0x5c>
 800044a:	2b02      	cmp	r3, #2
 800044c:	dc26      	bgt.n	800049c <DIO_voidTogPinValue+0x74>
 800044e:	2b00      	cmp	r3, #0
 8000450:	d002      	beq.n	8000458 <DIO_voidTogPinValue+0x30>
 8000452:	2b01      	cmp	r3, #1
 8000454:	d00b      	beq.n	800046e <DIO_voidTogPinValue+0x46>
		case	PORTA	:	TOG_BIT(GPIOA_ODR,pin);	break;
		case	PORTB	:	TOG_BIT(GPIOB_ODR,pin);	break;
		case	PORTC	:	TOG_BIT(GPIOC_ODR,pin);	break;
		}
	}
}
 8000456:	e021      	b.n	800049c <DIO_voidTogPinValue+0x74>
		case	PORTA	:	TOG_BIT(GPIOA_ODR,pin);	break;
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <DIO_voidTogPinValue+0x80>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	79ba      	ldrb	r2, [r7, #6]
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f202 	lsl.w	r2, r1, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <DIO_voidTogPinValue+0x80>)
 8000468:	404b      	eors	r3, r1
 800046a:	6013      	str	r3, [r2, #0]
 800046c:	e016      	b.n	800049c <DIO_voidTogPinValue+0x74>
		case	PORTB	:	TOG_BIT(GPIOB_ODR,pin);	break;
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DIO_voidTogPinValue+0x84>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	79ba      	ldrb	r2, [r7, #6]
 8000474:	2101      	movs	r1, #1
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	4611      	mov	r1, r2
 800047c:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <DIO_voidTogPinValue+0x84>)
 800047e:	404b      	eors	r3, r1
 8000480:	6013      	str	r3, [r2, #0]
 8000482:	e00b      	b.n	800049c <DIO_voidTogPinValue+0x74>
		case	PORTC	:	TOG_BIT(GPIOC_ODR,pin);	break;
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <DIO_voidTogPinValue+0x88>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	79ba      	ldrb	r2, [r7, #6]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	4611      	mov	r1, r2
 8000492:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <DIO_voidTogPinValue+0x88>)
 8000494:	404b      	eors	r3, r1
 8000496:	6013      	str	r3, [r2, #0]
 8000498:	e000      	b.n	800049c <DIO_voidTogPinValue+0x74>
	}
 800049a:	bf00      	nop
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	4001080c 	.word	0x4001080c
 80004ac:	40010c0c 	.word	0x40010c0c
 80004b0:	4001100c 	.word	0x4001100c

080004b4 <EXTI0_IRQHandler>:
		Fptr = EXTI0_CallBack;
	}
}

void	EXTI0_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR,0);
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <EXTI0_IRQHandler+0x24>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <EXTI0_IRQHandler+0x24>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6153      	str	r3, [r2, #20]
	DIO_voidTogPinValue(PORTA, PIN5);
 80004c4:	2105      	movs	r1, #5
 80004c6:	2000      	movs	r0, #0
 80004c8:	f7ff ffae 	bl	8000428 <DIO_voidTogPinValue>
	_delay_ms(25);
 80004cc:	2019      	movs	r0, #25
 80004ce:	f000 f805 	bl	80004dc <_delay_ms>
	/*	Clear the Flag			*/
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40010400 	.word	0x40010400

080004dc <_delay_ms>:
#include "Bit_Math.h"
#include "Std_Types.h"


void	_delay_ms(u32 ticks)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	u32 i;
	for( i = 0; i < (ticks * 500) ; i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	e003      	b.n	80004f2 <_delay_ms+0x16>
	{
		asm("NOP");
 80004ea:	bf00      	nop
	for( i = 0; i < (ticks * 500) ; i++)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004f8:	fb02 f303 	mul.w	r3, r2, r3
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d3f3      	bcc.n	80004ea <_delay_ms+0xe>
	}
}
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <STK_voidInit>:

static	void	(*STK_CallBack)	(void)	=	NULL;
static	u8		STK_u8ModeOfInterval;

void	STK_voidInit()
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
		/*		RCC == HSI		*/
		#if		STK_CLK_SRC	==	STK_AHB_DIV_8
			STK -> CTRL = 0x00000000;
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <STK_voidInit+0x14>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
		#elif	STK_CLK_SRC	==	STK_AHB
			STK -> CTRL = 0x00000004;
		#else
			#error	"Wrong choice of SysTick Clock Source!"
		#endif
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e010 	.word	0xe000e010

08000528 <STK_voidSetBusyWait>:
void	STK_voidSetBusyWait(u32	Ticks)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	/*	Load ticks to Load Register 	*/
	STK -> LOAD = Ticks;
 8000530:	4a11      	ldr	r2, [pc, #68]	; (8000578 <STK_voidSetBusyWait+0x50>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6053      	str	r3, [r2, #4]
	/*	Start the timer 				*/
	SET_BIT(STK -> CTRL , 0);
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <STK_voidSetBusyWait+0x50>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <STK_voidSetBusyWait+0x50>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6013      	str	r3, [r2, #0]
	/*	Wait till the flag is raised 	*/
	while((GET_BIT(STK -> CTRL , 16 ))==0)
 8000542:	e000      	b.n	8000546 <STK_voidSetBusyWait+0x1e>
	{
		asm("NOP");
 8000544:	bf00      	nop
	while((GET_BIT(STK -> CTRL , 16 ))==0)
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <STK_voidSetBusyWait+0x50>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f7      	beq.n	8000544 <STK_voidSetBusyWait+0x1c>
	}
	/*	Stop the timer					*/
	CLR_BIT(STK -> CTRL , 0);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <STK_voidSetBusyWait+0x50>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <STK_voidSetBusyWait+0x50>)
 800055a:	f023 0301 	bic.w	r3, r3, #1
 800055e:	6013      	str	r3, [r2, #0]
	STK ->	LOAD	=	0;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <STK_voidSetBusyWait+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
	STK ->	VAL		=	0;
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <STK_voidSetBusyWait+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e010 	.word	0xe000e010

0800057c <SysTick_Handler>:
	return	Local_u32Remaining;
}


void	SysTick_Handler()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	u8 Local_u8Temp;
	if(STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <SysTick_Handler+0x50>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d111      	bne.n	80005ae <SysTick_Handler+0x32>
	{	
		/*	Disable The Interrupt			*/
		CLR_BIT(STK -> CTRL , 1);
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <SysTick_Handler+0x54>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <SysTick_Handler+0x54>)
 8000590:	f023 0302 	bic.w	r3, r3, #2
 8000594:	6013      	str	r3, [r2, #0]
		/*	Stop the timer					*/
		CLR_BIT(STK -> CTRL , 0);
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <SysTick_Handler+0x54>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <SysTick_Handler+0x54>)
 800059c:	f023 0301 	bic.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]
		STK ->	LOAD	=	0;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <SysTick_Handler+0x54>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
		STK ->	VAL		=	0;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <SysTick_Handler+0x54>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	}
	STK_CallBack();
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <SysTick_Handler+0x58>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4798      	blx	r3
	/*	to clear the timer flsg just read it */
	Local_u8Temp	=	GET_BIT(STK -> CTRL,16);
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <SysTick_Handler+0x54>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	0c1b      	lsrs	r3, r3, #16
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	71fb      	strb	r3, [r7, #7]
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000020 	.word	0x20000020
 80005d0:	e000e010 	.word	0xe000e010
 80005d4:	2000001c 	.word	0x2000001c

080005d8 <LED_voidInit>:

#include "../../02 ECU/LED/LED_interface.h"


void LED_voidInit(u8 port,u8 pin)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
	DIO_voidSetPinDirection(port, pin, GPIO_OUTPUT_2MHZ_PP);
 80005e8:	79b9      	ldrb	r1, [r7, #6]
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2202      	movs	r2, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe48 	bl	8000284 <DIO_voidSetPinDirection>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LED_voidToggle>:
{
	DIO_voidSetPinValue(port, pin, GPIO_LOW);
}

void LED_voidToggle(u8 port,u8 pin)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
	DIO_voidTogPinValue(port, pin);
 800060c:	79ba      	ldrb	r2, [r7, #6]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff08 	bl	8000428 <DIO_voidTogPinValue>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <RTOS_CreateTask>:

task_st task[20] ={0};
u8 tick = 0;

void RTOS_CreateTask(u8 priority,u16 priodicity,void (*func_Task)(void),u8 first_delay)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	603a      	str	r2, [r7, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	460b      	mov	r3, r1
 8000630:	80bb      	strh	r3, [r7, #4]
 8000632:	4613      	mov	r3, r2
 8000634:	71bb      	strb	r3, [r7, #6]
	task[priority].priodicity = priodicity;
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	4916      	ldr	r1, [pc, #88]	; (8000694 <RTOS_CreateTask+0x74>)
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	88ba      	ldrh	r2, [r7, #4]
 8000646:	801a      	strh	r2, [r3, #0]
	task[priority].func_Task = func_Task;
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	4912      	ldr	r1, [pc, #72]	; (8000694 <RTOS_CreateTask+0x74>)
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	3304      	adds	r3, #4
 8000658:	683a      	ldr	r2, [r7, #0]
 800065a:	601a      	str	r2, [r3, #0]
	task[priority].state = ready;
 800065c:	79fa      	ldrb	r2, [r7, #7]
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <RTOS_CreateTask+0x74>)
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	3308      	adds	r3, #8
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
	task[priority].firstdelay = first_delay;
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	b298      	uxth	r0, r3
 8000676:	4907      	ldr	r1, [pc, #28]	; (8000694 <RTOS_CreateTask+0x74>)
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	440b      	add	r3, r1
 8000682:	330a      	adds	r3, #10
 8000684:	4602      	mov	r2, r0
 8000686:	801a      	strh	r2, [r3, #0]

}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000024 	.word	0x20000024

08000698 <RTOS_Scheduler>:

void RTOS_Scheduler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	for (int i =0; i < 3;i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e04e      	b.n	8000742 <RTOS_Scheduler+0xaa>
	{
		if (task[i].state == susbend)
 80006a4:	492b      	ldr	r1, [pc, #172]	; (8000754 <RTOS_Scheduler+0xbc>)
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	3308      	adds	r3, #8
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d03f      	beq.n	800073a <RTOS_Scheduler+0xa2>
		{
			continue;
		}
		if (task[i].firstdelay == 0)
 80006ba:	4926      	ldr	r1, [pc, #152]	; (8000754 <RTOS_Scheduler+0xbc>)
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	440b      	add	r3, r1
 80006c8:	330a      	adds	r3, #10
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d11e      	bne.n	800070e <RTOS_Scheduler+0x76>
		{
			task[i].func_Task();
 80006d0:	4920      	ldr	r1, [pc, #128]	; (8000754 <RTOS_Scheduler+0xbc>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	3304      	adds	r3, #4
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4798      	blx	r3
			task[i].firstdelay = task[i].priodicity - 1;
 80006e4:	491b      	ldr	r1, [pc, #108]	; (8000754 <RTOS_Scheduler+0xbc>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b298      	uxth	r0, r3
 80006f8:	4916      	ldr	r1, [pc, #88]	; (8000754 <RTOS_Scheduler+0xbc>)
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	440b      	add	r3, r1
 8000706:	330a      	adds	r3, #10
 8000708:	4602      	mov	r2, r0
 800070a:	801a      	strh	r2, [r3, #0]
 800070c:	e016      	b.n	800073c <RTOS_Scheduler+0xa4>
		}
		else
		{
			task[i].firstdelay--;
 800070e:	4911      	ldr	r1, [pc, #68]	; (8000754 <RTOS_Scheduler+0xbc>)
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	330a      	adds	r3, #10
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	b298      	uxth	r0, r3
 8000724:	490b      	ldr	r1, [pc, #44]	; (8000754 <RTOS_Scheduler+0xbc>)
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	330a      	adds	r3, #10
 8000734:	4602      	mov	r2, r0
 8000736:	801a      	strh	r2, [r3, #0]
 8000738:	e000      	b.n	800073c <RTOS_Scheduler+0xa4>
			continue;
 800073a:	bf00      	nop
	for (int i =0; i < 3;i++)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b02      	cmp	r3, #2
 8000746:	ddad      	ble.n	80006a4 <RTOS_Scheduler+0xc>
//		else
//		{
//			task[counter].firstdelay--;
//		}
//	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000024 	.word	0x20000024

08000758 <RTOS_Start>:
void RTOS_Start(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	RTOS_Scheduler();
 800075c:	f7ff ff9c 	bl	8000698 <RTOS_Scheduler>
	STK_voidSetBusyWait(1000000);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <RTOS_Start+0x14>)
 8000762:	f7ff fee1 	bl	8000528 <STK_voidSetBusyWait>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	000f4240 	.word	0x000f4240

08000770 <main>:
void task1(void);
void task2(void);
void task3(void);

int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	RCC_voidSysClkInt();
 8000774:	f7ff fcfc 	bl	8000170 <RCC_voidSysClkInt>
	RCC_voidEnablePerClk(RCC_APB2, 2);
 8000778:	2102      	movs	r1, #2
 800077a:	2002      	movs	r0, #2
 800077c:	f7ff fd40 	bl	8000200 <RCC_voidEnablePerClk>
	LED_voidInit(PORTA, PIN0);
 8000780:	2100      	movs	r1, #0
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff ff28 	bl	80005d8 <LED_voidInit>
	LED_voidInit(PORTA, PIN1);
 8000788:	2101      	movs	r1, #1
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff24 	bl	80005d8 <LED_voidInit>
	LED_voidInit(PORTA, PIN2);
 8000790:	2102      	movs	r1, #2
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff20 	bl	80005d8 <LED_voidInit>
	STK_voidInit();
 8000798:	f7ff feba 	bl	8000510 <STK_voidInit>
	RTOS_CreateTask(0, 3, task1,0);
 800079c:	2300      	movs	r3, #0
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <main+0x58>)
 80007a0:	2103      	movs	r1, #3
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff3c 	bl	8000620 <RTOS_CreateTask>
	RTOS_CreateTask(1, 5, task2,1);
 80007a8:	2301      	movs	r3, #1
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <main+0x5c>)
 80007ac:	2105      	movs	r1, #5
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ff36 	bl	8000620 <RTOS_CreateTask>
	RTOS_CreateTask(2, 2, task3,2);
 80007b4:	2302      	movs	r3, #2
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <main+0x60>)
 80007b8:	2102      	movs	r1, #2
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff ff30 	bl	8000620 <RTOS_CreateTask>
	while(1)
	{
		RTOS_Start();
 80007c0:	f7ff ffca 	bl	8000758 <RTOS_Start>
 80007c4:	e7fc      	b.n	80007c0 <main+0x50>
 80007c6:	bf00      	nop
 80007c8:	080007d5 	.word	0x080007d5
 80007cc:	080007e5 	.word	0x080007e5
 80007d0:	080007f5 	.word	0x080007f5

080007d4 <task1>:
	return 0;
}


void task1(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	LED_voidToggle(PORTA, PIN0);
 80007d8:	2100      	movs	r1, #0
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff0e 	bl	80005fc <LED_voidToggle>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <task2>:
void task2(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	LED_voidToggle(PORTA, PIN1);
 80007e8:	2101      	movs	r1, #1
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff06 	bl	80005fc <LED_voidToggle>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <task3>:
void task3(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	LED_voidToggle(PORTA, PIN2);
 80007f8:	2102      	movs	r1, #2
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fefe 	bl	80005fc <LED_voidToggle>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000806:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000808:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000832:	f000 f811 	bl	8000858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff ff9b 	bl	8000770 <main>

0800083a <LoopForever>:

LoopForever:
  b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   r0, =_estack
 800083c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000848:	080008c0 	.word	0x080008c0
  ldr r2, =_sbss
 800084c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000850:	20000114 	.word	0x20000114

08000854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_2_IRQHandler>
	...

08000858 <__libc_init_array>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	2600      	movs	r6, #0
 800085c:	4d0c      	ldr	r5, [pc, #48]	; (8000890 <__libc_init_array+0x38>)
 800085e:	4c0d      	ldr	r4, [pc, #52]	; (8000894 <__libc_init_array+0x3c>)
 8000860:	1b64      	subs	r4, r4, r5
 8000862:	10a4      	asrs	r4, r4, #2
 8000864:	42a6      	cmp	r6, r4
 8000866:	d109      	bne.n	800087c <__libc_init_array+0x24>
 8000868:	f000 f81a 	bl	80008a0 <_init>
 800086c:	2600      	movs	r6, #0
 800086e:	4d0a      	ldr	r5, [pc, #40]	; (8000898 <__libc_init_array+0x40>)
 8000870:	4c0a      	ldr	r4, [pc, #40]	; (800089c <__libc_init_array+0x44>)
 8000872:	1b64      	subs	r4, r4, r5
 8000874:	10a4      	asrs	r4, r4, #2
 8000876:	42a6      	cmp	r6, r4
 8000878:	d105      	bne.n	8000886 <__libc_init_array+0x2e>
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000880:	4798      	blx	r3
 8000882:	3601      	adds	r6, #1
 8000884:	e7ee      	b.n	8000864 <__libc_init_array+0xc>
 8000886:	f855 3b04 	ldr.w	r3, [r5], #4
 800088a:	4798      	blx	r3
 800088c:	3601      	adds	r6, #1
 800088e:	e7f2      	b.n	8000876 <__libc_init_array+0x1e>
 8000890:	080008b8 	.word	0x080008b8
 8000894:	080008b8 	.word	0x080008b8
 8000898:	080008b8 	.word	0x080008b8
 800089c:	080008bc 	.word	0x080008bc

080008a0 <_init>:
 80008a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a2:	bf00      	nop
 80008a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008a6:	bc08      	pop	{r3}
 80008a8:	469e      	mov	lr, r3
 80008aa:	4770      	bx	lr

080008ac <_fini>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	bf00      	nop
 80008b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b2:	bc08      	pop	{r3}
 80008b4:	469e      	mov	lr, r3
 80008b6:	4770      	bx	lr
