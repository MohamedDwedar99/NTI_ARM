
NTI_Layerd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000063c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800076c  08000774  00010774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800076c  0800076c  00010774  2**0
                  CONTENTS
  4 .ARM          00000000  0800076c  0800076c  00010774  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800076c  08000774  00010774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800076c  0800076c  0001076c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000770  08000770  00010770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000774  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000774  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010774  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000071b  00000000  00000000  0001079d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d1  00000000  00000000  00010eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00011290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  000113c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000055a  00000000  00000000  000114a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000098d  00000000  00000000  00011a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003f08  00000000  00000000  0001238f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00016297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000340  00000000  00000000  000162e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000754 	.word	0x08000754

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000754 	.word	0x08000754

08000170 <RCC_voidSysClkInt>:
#include	"RCC_interface.h"
#include	"RCC_private.h"
#include	"RCC_config.h"

void		RCC_voidSysClkInt(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	
	// SET Configurations
	RCC_CFGR = RCC_CFGR | SW;
 8000174:	4b20      	ldr	r3, [pc, #128]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a1f      	ldr	r2, [pc, #124]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 800017a:	f043 0302 	orr.w	r3, r3, #2
 800017e:	6013      	str	r3, [r2, #0]
	while (!((SW) == (RCC_CFGR & SW)));
 8000180:	bf00      	nop
 8000182:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f003 0302 	and.w	r3, r3, #2
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <RCC_voidSysClkInt+0x12>
	RCC_CFGR = RCC_CFGR | HPRE;
 800018e:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000190:	4a19      	ldr	r2, [pc, #100]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | PPRE1;
 8000196:	4b18      	ldr	r3, [pc, #96]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 8000198:	4a17      	ldr	r2, [pc, #92]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | PPRE2;
 800019e:	4b16      	ldr	r3, [pc, #88]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a0:	4a15      	ldr	r2, [pc, #84]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	6013      	str	r3, [r2, #0]
	RCC_CFGR = RCC_CFGR | ADCPRE;
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001a8:	4a13      	ldr	r2, [pc, #76]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLSRC;
 80001ae:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b0:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLXTPRE;
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a0f      	ldr	r2, [pc, #60]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001c0:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | PLLMUL;
 80001c2:	4b0d      	ldr	r3, [pc, #52]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a0c      	ldr	r2, [pc, #48]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001c8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80001cc:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | USBPRE;
 80001ce:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a09      	ldr	r2, [pc, #36]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001d8:	6013      	str	r3, [r2, #0]
    RCC_CFGR = RCC_CFGR | MCO;
 80001da:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <RCC_voidSysClkInt+0x88>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	6013      	str	r3, [r2, #0]
	
	//Select Source of clock
#if (CLK_Sourc == RCC_HSI)
    SET_BIT(RCC_CR,HSION);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <RCC_voidSysClkInt+0x8c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a05      	ldr	r2, [pc, #20]	; (80001fc <RCC_voidSysClkInt+0x8c>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6013      	str	r3, [r2, #0]
	while(!HSIRDY);
 80001ee:	bf00      	nop
	SET_BIT(RCC_CR,PLLON);
	while(!PLLRDY);
#else
	#error "Wrong selection of RCC"
#endif
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40021004 	.word	0x40021004
 80001fc:	40021000 	.word	0x40021000

08000200 <RCC_voidEnablePerClk>:

void		RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	/*		Range Check							*/
	if(PerId < 32)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b1f      	cmp	r3, #31
 8000214:	d82a      	bhi.n	800026c <RCC_voidEnablePerClk+0x6c>
	{
		switch(BusId)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b02      	cmp	r3, #2
 800021a:	d01c      	beq.n	8000256 <RCC_voidEnablePerClk+0x56>
 800021c:	2b02      	cmp	r3, #2
 800021e:	dc25      	bgt.n	800026c <RCC_voidEnablePerClk+0x6c>
 8000220:	2b00      	cmp	r3, #0
 8000222:	d002      	beq.n	800022a <RCC_voidEnablePerClk+0x2a>
 8000224:	2b01      	cmp	r3, #1
 8000226:	d00b      	beq.n	8000240 <RCC_voidEnablePerClk+0x40>
		}
		
	}
	else{	/*	Return Error "Out Of The Range"		*/	}
	
}
 8000228:	e020      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_AHB		:	SET_BIT(RCC_AHBENR,PerId) ;	break;
 800022a:	4b13      	ldr	r3, [pc, #76]	; (8000278 <RCC_voidEnablePerClk+0x78>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	79ba      	ldrb	r2, [r7, #6]
 8000230:	2101      	movs	r1, #1
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	4611      	mov	r1, r2
 8000238:	4a0f      	ldr	r2, [pc, #60]	; (8000278 <RCC_voidEnablePerClk+0x78>)
 800023a:	430b      	orrs	r3, r1
 800023c:	6013      	str	r3, [r2, #0]
 800023e:	e015      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerId);	break;
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <RCC_voidEnablePerClk+0x7c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	79ba      	ldrb	r2, [r7, #6]
 8000246:	2101      	movs	r1, #1
 8000248:	fa01 f202 	lsl.w	r2, r1, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <RCC_voidEnablePerClk+0x7c>)
 8000250:	430b      	orrs	r3, r1
 8000252:	6013      	str	r3, [r2, #0]
 8000254:	e00a      	b.n	800026c <RCC_voidEnablePerClk+0x6c>
			case	RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerId);	break;
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <RCC_voidEnablePerClk+0x80>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	79ba      	ldrb	r2, [r7, #6]
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a06      	ldr	r2, [pc, #24]	; (8000280 <RCC_voidEnablePerClk+0x80>)
 8000266:	430b      	orrs	r3, r1
 8000268:	6013      	str	r3, [r2, #0]
 800026a:	bf00      	nop
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021014 	.word	0x40021014
 800027c:	4002101c 	.word	0x4002101c
 8000280:	40021018 	.word	0x40021018

08000284 <DIO_voidSetPinDirection>:




void	DIO_voidSetPinDirection(u8 port, u8 PIN, u8 Direction)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	460b      	mov	r3, r1
 8000290:	71bb      	strb	r3, [r7, #6]
 8000292:	4613      	mov	r3, r2
 8000294:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && PIN < 16)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b02      	cmp	r3, #2
 800029a:	f200 80b3 	bhi.w	8000404 <DIO_voidSetPinDirection+0x180>
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	f200 80af 	bhi.w	8000404 <DIO_voidSetPinDirection+0x180>
	{
		if(PIN<8)	/*		Low	(PIN0:PIN7) CRL	*/
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	2b07      	cmp	r3, #7
 80002aa:	d852      	bhi.n	8000352 <DIO_voidSetPinDirection+0xce>
		{
			switch(port)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d037      	beq.n	8000322 <DIO_voidSetPinDirection+0x9e>
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	f300 80a6 	bgt.w	8000404 <DIO_voidSetPinDirection+0x180>
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <DIO_voidSetPinDirection+0x3e>
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d018      	beq.n	80002f2 <DIO_voidSetPinDirection+0x6e>
				break;
			}

		}
	}else{/*	Return Error	*/}
}
 80002c0:	e0a0      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRL &= ~((0b1111)<<(PIN * 4));
 80002c2:	4b53      	ldr	r3, [pc, #332]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79ba      	ldrb	r2, [r7, #6]
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	210f      	movs	r1, #15
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	43d2      	mvns	r2, r2
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a4e      	ldr	r2, [pc, #312]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002d6:	400b      	ands	r3, r1
 80002d8:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |=  ((Direction)<<(PIN * 4));
 80002da:	4b4d      	ldr	r3, [pc, #308]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	7979      	ldrb	r1, [r7, #5]
 80002e0:	79ba      	ldrb	r2, [r7, #6]
 80002e2:	0092      	lsls	r2, r2, #2
 80002e4:	fa01 f202 	lsl.w	r2, r1, r2
 80002e8:	4611      	mov	r1, r2
 80002ea:	4a49      	ldr	r2, [pc, #292]	; (8000410 <DIO_voidSetPinDirection+0x18c>)
 80002ec:	430b      	orrs	r3, r1
 80002ee:	6013      	str	r3, [r2, #0]
				break;
 80002f0:	e088      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRL &= ~((0b1111)<<(PIN * 4));
 80002f2:	4b48      	ldr	r3, [pc, #288]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a43      	ldr	r2, [pc, #268]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 8000306:	400b      	ands	r3, r1
 8000308:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |=  ((Direction)<<(PIN * 4));
 800030a:	4b42      	ldr	r3, [pc, #264]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	7979      	ldrb	r1, [r7, #5]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a3e      	ldr	r2, [pc, #248]	; (8000414 <DIO_voidSetPinDirection+0x190>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
				break;
 8000320:	e070      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRL &= ~((0b1111)<<(PIN * 4));
 8000322:	4b3d      	ldr	r3, [pc, #244]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	79ba      	ldrb	r2, [r7, #6]
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	43d2      	mvns	r2, r2
 8000332:	4611      	mov	r1, r2
 8000334:	4a38      	ldr	r2, [pc, #224]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 8000336:	400b      	ands	r3, r1
 8000338:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |=  ((Direction)<<(PIN * 4));
 800033a:	4b37      	ldr	r3, [pc, #220]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	7979      	ldrb	r1, [r7, #5]
 8000340:	79ba      	ldrb	r2, [r7, #6]
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	4611      	mov	r1, r2
 800034a:	4a33      	ldr	r2, [pc, #204]	; (8000418 <DIO_voidSetPinDirection+0x194>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6013      	str	r3, [r2, #0]
				break;
 8000350:	e058      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
		}else if(PIN<16)	/*		Low	(PIN8:PIN15) CRL	*/
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	d854      	bhi.n	8000402 <DIO_voidSetPinDirection+0x17e>
			PIN -= 8;
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	3b08      	subs	r3, #8
 800035c:	71bb      	strb	r3, [r7, #6]
			switch(port)
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	2b02      	cmp	r3, #2
 8000362:	d036      	beq.n	80003d2 <DIO_voidSetPinDirection+0x14e>
 8000364:	2b02      	cmp	r3, #2
 8000366:	dc4d      	bgt.n	8000404 <DIO_voidSetPinDirection+0x180>
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <DIO_voidSetPinDirection+0xee>
 800036c:	2b01      	cmp	r3, #1
 800036e:	d018      	beq.n	80003a2 <DIO_voidSetPinDirection+0x11e>
}
 8000370:	e048      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOA_CRH &= ~((0b1111)<<(PIN * 4));
 8000372:	4b2a      	ldr	r3, [pc, #168]	; (800041c <DIO_voidSetPinDirection+0x198>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	79ba      	ldrb	r2, [r7, #6]
 8000378:	0092      	lsls	r2, r2, #2
 800037a:	210f      	movs	r1, #15
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	43d2      	mvns	r2, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a25      	ldr	r2, [pc, #148]	; (800041c <DIO_voidSetPinDirection+0x198>)
 8000386:	400b      	ands	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |=  ((Direction)<<(PIN * 4));
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <DIO_voidSetPinDirection+0x198>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	7979      	ldrb	r1, [r7, #5]
 8000390:	79ba      	ldrb	r2, [r7, #6]
 8000392:	0092      	lsls	r2, r2, #2
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a20      	ldr	r2, [pc, #128]	; (800041c <DIO_voidSetPinDirection+0x198>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6013      	str	r3, [r2, #0]
				break;
 80003a0:	e030      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOB_CRH &= ~((0b1111)<<(PIN * 4));
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	79ba      	ldrb	r2, [r7, #6]
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	210f      	movs	r1, #15
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	43d2      	mvns	r2, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003b6:	400b      	ands	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |=  ((Direction)<<(PIN * 4));
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	7979      	ldrb	r1, [r7, #5]
 80003c0:	79ba      	ldrb	r2, [r7, #6]
 80003c2:	0092      	lsls	r2, r2, #2
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a15      	ldr	r2, [pc, #84]	; (8000420 <DIO_voidSetPinDirection+0x19c>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	6013      	str	r3, [r2, #0]
				break;
 80003d0:	e018      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
				GPIOC_CRH &= ~((0b1111)<<(PIN * 4));
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	79ba      	ldrb	r2, [r7, #6]
 80003d8:	0092      	lsls	r2, r2, #2
 80003da:	210f      	movs	r1, #15
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a0f      	ldr	r2, [pc, #60]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003e6:	400b      	ands	r3, r1
 80003e8:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |=  ((Direction)<<(PIN * 4));
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	7979      	ldrb	r1, [r7, #5]
 80003f0:	79ba      	ldrb	r2, [r7, #6]
 80003f2:	0092      	lsls	r2, r2, #2
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <DIO_voidSetPinDirection+0x1a0>)
 80003fc:	430b      	orrs	r3, r1
 80003fe:	6013      	str	r3, [r2, #0]
				break;
 8000400:	e000      	b.n	8000404 <DIO_voidSetPinDirection+0x180>
		}
 8000402:	bf00      	nop
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00
 8000418:	40011000 	.word	0x40011000
 800041c:	40010804 	.word	0x40010804
 8000420:	40010c04 	.word	0x40010c04
 8000424:	40011004 	.word	0x40011004

08000428 <DIO_voidSetPinValue>:
void	DIO_voidSetPinValue(u8 port, u8 pin, u8 Value)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
 8000432:	460b      	mov	r3, r1
 8000434:	71bb      	strb	r3, [r7, #6]
 8000436:	4613      	mov	r3, r2
 8000438:	717b      	strb	r3, [r7, #5]
	/*		Range Check 		*/
	if(port < 3 && pin < 16)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d85f      	bhi.n	8000500 <DIO_voidSetPinValue+0xd8>
 8000440:	79bb      	ldrb	r3, [r7, #6]
 8000442:	2b0f      	cmp	r3, #15
 8000444:	d85c      	bhi.n	8000500 <DIO_voidSetPinValue+0xd8>
	{
		if(Value == GPIO_HIGH)
 8000446:	797b      	ldrb	r3, [r7, #5]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d12a      	bne.n	80004a2 <DIO_voidSetPinValue+0x7a>
		{
			switch(port)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b02      	cmp	r3, #2
 8000450:	d01c      	beq.n	800048c <DIO_voidSetPinValue+0x64>
 8000452:	2b02      	cmp	r3, #2
 8000454:	dc54      	bgt.n	8000500 <DIO_voidSetPinValue+0xd8>
 8000456:	2b00      	cmp	r3, #0
 8000458:	d002      	beq.n	8000460 <DIO_voidSetPinValue+0x38>
 800045a:	2b01      	cmp	r3, #1
 800045c:	d00b      	beq.n	8000476 <DIO_voidSetPinValue+0x4e>
			}			
		}
		
	}else{/*	Return Error	*/}
	
}
 800045e:	e04f      	b.n	8000500 <DIO_voidSetPinValue+0xd8>
				case	PORTA	:	SET_BIT(GPIOA_BSRR,pin);	break;
 8000460:	4b2a      	ldr	r3, [pc, #168]	; (800050c <DIO_voidSetPinValue+0xe4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	79ba      	ldrb	r2, [r7, #6]
 8000466:	2101      	movs	r1, #1
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a27      	ldr	r2, [pc, #156]	; (800050c <DIO_voidSetPinValue+0xe4>)
 8000470:	430b      	orrs	r3, r1
 8000472:	6013      	str	r3, [r2, #0]
 8000474:	e044      	b.n	8000500 <DIO_voidSetPinValue+0xd8>
				case	PORTB	:	SET_BIT(GPIOB_BSRR,pin);	break;
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <DIO_voidSetPinValue+0xe8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	79ba      	ldrb	r2, [r7, #6]
 800047c:	2101      	movs	r1, #1
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	4611      	mov	r1, r2
 8000484:	4a22      	ldr	r2, [pc, #136]	; (8000510 <DIO_voidSetPinValue+0xe8>)
 8000486:	430b      	orrs	r3, r1
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	e039      	b.n	8000500 <DIO_voidSetPinValue+0xd8>
				case	PORTC	:	SET_BIT(GPIOC_BSRR,pin);	break;
 800048c:	4b21      	ldr	r3, [pc, #132]	; (8000514 <DIO_voidSetPinValue+0xec>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	79ba      	ldrb	r2, [r7, #6]
 8000492:	2101      	movs	r1, #1
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	4611      	mov	r1, r2
 800049a:	4a1e      	ldr	r2, [pc, #120]	; (8000514 <DIO_voidSetPinValue+0xec>)
 800049c:	430b      	orrs	r3, r1
 800049e:	6013      	str	r3, [r2, #0]
 80004a0:	e02e      	b.n	8000500 <DIO_voidSetPinValue+0xd8>
		else if(Value == GPIO_LOW)
 80004a2:	797b      	ldrb	r3, [r7, #5]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d12a      	bne.n	80004fe <DIO_voidSetPinValue+0xd6>
			switch(port)
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d01c      	beq.n	80004e8 <DIO_voidSetPinValue+0xc0>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	dc26      	bgt.n	8000500 <DIO_voidSetPinValue+0xd8>
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d002      	beq.n	80004bc <DIO_voidSetPinValue+0x94>
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d00b      	beq.n	80004d2 <DIO_voidSetPinValue+0xaa>
}
 80004ba:	e021      	b.n	8000500 <DIO_voidSetPinValue+0xd8>
				case	PORTA	:	SET_BIT(GPIOA_BRR,pin);	break;
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <DIO_voidSetPinValue+0xf0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	79ba      	ldrb	r2, [r7, #6]
 80004c2:	2101      	movs	r1, #1
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a13      	ldr	r2, [pc, #76]	; (8000518 <DIO_voidSetPinValue+0xf0>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6013      	str	r3, [r2, #0]
 80004d0:	e016      	b.n	8000500 <DIO_voidSetPinValue+0xd8>
				case	PORTB	:	SET_BIT(GPIOB_BRR,pin);	break;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <DIO_voidSetPinValue+0xf4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	79ba      	ldrb	r2, [r7, #6]
 80004d8:	2101      	movs	r1, #1
 80004da:	fa01 f202 	lsl.w	r2, r1, r2
 80004de:	4611      	mov	r1, r2
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <DIO_voidSetPinValue+0xf4>)
 80004e2:	430b      	orrs	r3, r1
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	e00b      	b.n	8000500 <DIO_voidSetPinValue+0xd8>
				case	PORTC	:	SET_BIT(GPIOC_BRR,pin);	break;
 80004e8:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <DIO_voidSetPinValue+0xf8>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	79ba      	ldrb	r2, [r7, #6]
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f202 	lsl.w	r2, r1, r2
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <DIO_voidSetPinValue+0xf8>)
 80004f8:	430b      	orrs	r3, r1
 80004fa:	6013      	str	r3, [r2, #0]
 80004fc:	e000      	b.n	8000500 <DIO_voidSetPinValue+0xd8>
		}
 80004fe:	bf00      	nop
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40010810 	.word	0x40010810
 8000510:	40010c10 	.word	0x40010c10
 8000514:	40011010 	.word	0x40011010
 8000518:	40010814 	.word	0x40010814
 800051c:	40010c14 	.word	0x40010c14
 8000520:	40011014 	.word	0x40011014

08000524 <_delay_ms>:
#include "Bit_Math.h"
#include "Std_Types.h"


void	_delay_ms(u32 ticks)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	u32 i;
	for( i = 0; i < (ticks * 500) ; i++)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <_delay_ms+0x16>
	{
		asm("NOP");
 8000532:	bf00      	nop
	for( i = 0; i < (ticks * 500) ; i++)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	429a      	cmp	r2, r3
 8000548:	d3f3      	bcc.n	8000532 <_delay_ms+0xe>
	}
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
	...

08000558 <STK_voidInit>:

static	void	(*STK_CallBack)	(void)	=	NULL;
static	u8		STK_u8ModeOfInterval;

void	STK_voidInit()
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
		/*		RCC == HSI		*/
		#if		STK_CLK_SRC	==	STK_AHB_DIV_8
			STK -> CTRL = 0x00000000;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <STK_voidInit+0x14>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
		#elif	STK_CLK_SRC	==	STK_AHB
			STK -> CTRL = 0x00000004;
		#else
			#error	"Wrong choice of SysTick Clock Source!"
		#endif
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000e010 	.word	0xe000e010

08000570 <STK_voidSetIntervalSingle>:
	CLR_BIT(STK -> CTRL , 0);
	STK ->	LOAD	=	0;
	STK ->	VAL		=	0;
}
void	STK_voidSetIntervalSingle(u32	Ticks, void (*Pf)(void))
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	/*	Load ticks to Load Register 	*/
	STK -> LOAD = Ticks;
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <STK_voidSetIntervalSingle+0x40>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6053      	str	r3, [r2, #4]
	/*	Start the timer 				*/
	SET_BIT(STK -> CTRL , 0);
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <STK_voidSetIntervalSingle+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <STK_voidSetIntervalSingle+0x40>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6013      	str	r3, [r2, #0]
	/*	Save Call Back Function		 	*/
	STK_CallBack =	Pf;
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <STK_voidSetIntervalSingle+0x44>)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	6013      	str	r3, [r2, #0]
	/*	Enable STK Interrupt		 	*/
	SET_BIT(STK -> CTRL , 1);
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <STK_voidSetIntervalSingle+0x40>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <STK_voidSetIntervalSingle+0x40>)
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	6013      	str	r3, [r2, #0]
	/*	Set the mode single Intervale	*/
	STK_u8ModeOfInterval = STK_SINGLE_INTERVAL;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <STK_voidSetIntervalSingle+0x48>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000e010 	.word	0xe000e010
 80005b4:	2000001c 	.word	0x2000001c
 80005b8:	20000020 	.word	0x20000020

080005bc <SysTick_Handler>:
	return	Local_u32Remaining;
}


void	SysTick_Handler()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	u8 Local_u8Temp;
	if(STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <SysTick_Handler+0x50>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d111      	bne.n	80005ee <SysTick_Handler+0x32>
	{	
		/*	Disable The Interrupt			*/
		CLR_BIT(STK -> CTRL , 1);
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <SysTick_Handler+0x54>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <SysTick_Handler+0x54>)
 80005d0:	f023 0302 	bic.w	r3, r3, #2
 80005d4:	6013      	str	r3, [r2, #0]
		/*	Stop the timer					*/
		CLR_BIT(STK -> CTRL , 0);
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <SysTick_Handler+0x54>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <SysTick_Handler+0x54>)
 80005dc:	f023 0301 	bic.w	r3, r3, #1
 80005e0:	6013      	str	r3, [r2, #0]
		STK ->	LOAD	=	0;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <SysTick_Handler+0x54>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
		STK ->	VAL		=	0;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <SysTick_Handler+0x54>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
	}
	STK_CallBack();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <SysTick_Handler+0x58>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4798      	blx	r3
	/*	to clear the timer flsg just read it */
	Local_u8Temp	=	GET_BIT(STK -> CTRL,16);
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <SysTick_Handler+0x54>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000020 	.word	0x20000020
 8000610:	e000e010 	.word	0xe000e010
 8000614:	2000001c 	.word	0x2000001c

08000618 <ToggleLed>:
#include	"RCC_interface.h"
#include	"DIO_interface.h"
#include	"STK_interface.h"

void	ToggleLed(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	static	u8 flag	=	0;
	if(flag	==	0)
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <ToggleLed+0x34>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d108      	bne.n	8000636 <ToggleLed+0x1e>
	{
		/*		Led On		*/
		DIO_voidSetPinValue(PORTC,PIN13,GPIO_LOW);
 8000624:	2200      	movs	r2, #0
 8000626:	210d      	movs	r1, #13
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff fefd 	bl	8000428 <DIO_voidSetPinValue>
		flag	=	1;
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <ToggleLed+0x34>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
	{
		/*		Led Off		*/
		DIO_voidSetPinValue(PORTC,PIN13,GPIO_HIGH);		
		flag	=	0;
	}
}
 8000634:	e007      	b.n	8000646 <ToggleLed+0x2e>
		DIO_voidSetPinValue(PORTC,PIN13,GPIO_HIGH);		
 8000636:	2201      	movs	r2, #1
 8000638:	210d      	movs	r1, #13
 800063a:	2002      	movs	r0, #2
 800063c:	f7ff fef4 	bl	8000428 <DIO_voidSetPinValue>
		flag	=	0;
 8000640:	4b02      	ldr	r3, [pc, #8]	; (800064c <ToggleLed+0x34>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000021 	.word	0x20000021

08000650 <main>:

/*	C13 ==> Built in led (Toggle Led)		*/
int main()
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	/*	System Clock Init			*/
	RCC_voidSysClkInt();
 8000654:	f7ff fd8c 	bl	8000170 <RCC_voidSysClkInt>
	/*	Enable RCC for GPIOC 		*/
	RCC_voidEnablePerClk(RCC_APB2,4);
 8000658:	2104      	movs	r1, #4
 800065a:	2002      	movs	r0, #2
 800065c:	f7ff fdd0 	bl	8000200 <RCC_voidEnablePerClk>
	
	/*	C13 Direction 	"Output @ 2MHz Push Pull"	*/
	DIO_voidSetPinDirection(PORTC,PIN13,GPIO_OUTPUT_2MHZ_PP);
 8000660:	2202      	movs	r2, #2
 8000662:	210d      	movs	r1, #13
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff fe0d 	bl	8000284 <DIO_voidSetPinDirection>
	/*	SysTick	Init				*/
	STK_voidInit();
 800066a:	f7ff ff75 	bl	8000558 <STK_voidInit>
	
	/*	Call Single Interval 		*/
	/*	LED ON in the CallBack		*/
	STK_voidSetIntervalSingle(1000000, ToggleLed);
 800066e:	4910      	ldr	r1, [pc, #64]	; (80006b0 <main+0x60>)
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <main+0x64>)
 8000672:	f7ff ff7d 	bl	8000570 <STK_voidSetIntervalSingle>
	_delay_ms(2000);
 8000676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800067a:	f7ff ff53 	bl	8000524 <_delay_ms>
	/*	LED OFF in the CallBack		*/
	STK_voidSetIntervalSingle(1000000, ToggleLed);
 800067e:	490c      	ldr	r1, [pc, #48]	; (80006b0 <main+0x60>)
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0x64>)
 8000682:	f7ff ff75 	bl	8000570 <STK_voidSetIntervalSingle>
	_delay_ms(2000);
 8000686:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068a:	f7ff ff4b 	bl	8000524 <_delay_ms>
	STK_voidSetIntervalSingle(1000000, ToggleLed);
 800068e:	4908      	ldr	r1, [pc, #32]	; (80006b0 <main+0x60>)
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <main+0x64>)
 8000692:	f7ff ff6d 	bl	8000570 <STK_voidSetIntervalSingle>
	_delay_ms(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069a:	f7ff ff43 	bl	8000524 <_delay_ms>
	STK_voidSetIntervalSingle(1000000, ToggleLed);
 800069e:	4904      	ldr	r1, [pc, #16]	; (80006b0 <main+0x60>)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <main+0x64>)
 80006a2:	f7ff ff65 	bl	8000570 <STK_voidSetIntervalSingle>
	_delay_ms(2000);
 80006a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006aa:	f7ff ff3b 	bl	8000524 <_delay_ms>
	while(1)
 80006ae:	e7fe      	b.n	80006ae <main+0x5e>
 80006b0:	08000619 	.word	0x08000619
 80006b4:	000f4240 	.word	0x000f4240

080006b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <LoopForever+0xe>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d8:	4c0a      	ldr	r4, [pc, #40]	; (8000704 <LoopForever+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006e6:	f000 f811 	bl	800070c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff ffb1 	bl	8000650 <main>

080006ee <LoopForever>:

LoopForever:
  b LoopForever
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
  ldr   r0, =_estack
 80006f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006fc:	08000774 	.word	0x08000774
  ldr r2, =_sbss
 8000700:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000704:	20000024 	.word	0x20000024

08000708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_2_IRQHandler>
	...

0800070c <__libc_init_array>:
 800070c:	b570      	push	{r4, r5, r6, lr}
 800070e:	2600      	movs	r6, #0
 8000710:	4d0c      	ldr	r5, [pc, #48]	; (8000744 <__libc_init_array+0x38>)
 8000712:	4c0d      	ldr	r4, [pc, #52]	; (8000748 <__libc_init_array+0x3c>)
 8000714:	1b64      	subs	r4, r4, r5
 8000716:	10a4      	asrs	r4, r4, #2
 8000718:	42a6      	cmp	r6, r4
 800071a:	d109      	bne.n	8000730 <__libc_init_array+0x24>
 800071c:	f000 f81a 	bl	8000754 <_init>
 8000720:	2600      	movs	r6, #0
 8000722:	4d0a      	ldr	r5, [pc, #40]	; (800074c <__libc_init_array+0x40>)
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <__libc_init_array+0x44>)
 8000726:	1b64      	subs	r4, r4, r5
 8000728:	10a4      	asrs	r4, r4, #2
 800072a:	42a6      	cmp	r6, r4
 800072c:	d105      	bne.n	800073a <__libc_init_array+0x2e>
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f855 3b04 	ldr.w	r3, [r5], #4
 8000734:	4798      	blx	r3
 8000736:	3601      	adds	r6, #1
 8000738:	e7ee      	b.n	8000718 <__libc_init_array+0xc>
 800073a:	f855 3b04 	ldr.w	r3, [r5], #4
 800073e:	4798      	blx	r3
 8000740:	3601      	adds	r6, #1
 8000742:	e7f2      	b.n	800072a <__libc_init_array+0x1e>
 8000744:	0800076c 	.word	0x0800076c
 8000748:	0800076c 	.word	0x0800076c
 800074c:	0800076c 	.word	0x0800076c
 8000750:	08000770 	.word	0x08000770

08000754 <_init>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	bf00      	nop
 8000758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075a:	bc08      	pop	{r3}
 800075c:	469e      	mov	lr, r3
 800075e:	4770      	bx	lr

08000760 <_fini>:
 8000760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000762:	bf00      	nop
 8000764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000766:	bc08      	pop	{r3}
 8000768:	469e      	mov	lr, r3
 800076a:	4770      	bx	lr
